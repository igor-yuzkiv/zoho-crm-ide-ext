[
    {
        "api_name": "export_to_books",
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "export_to_books",
        "id": "512029000000321001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2020-12-10T14:57:01+01:00",
        "name": "export_to_books",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/export_to_books/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/export_to_books/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.export_to_books()\n{\nitems = zoho.crm.getRecords(\"Upwork_Uploads\");\nsortDate = List();\nstartDate = '';\n// group by date\nfor each  item in items\n{\n\tif(item.get(\"Date\") != startDate)\n\t{\n\t\tsortDate.add(item.get(\"Date\"));\n\t\tstartDate = item.get(\"Date\");\n\t}\n\telse\n\t{\n\t\tcontinue;\n\t}\n}\nfor each  dateGroup in sortDate\n{\n\tupworkGroupDate = zoho.crm.searchRecords(\"Upwork_Uploads\",\"(Date:equals:\" + dateGroup + \")\");\n\tstartAccount = '';\n\tsortAccount = List();\n\t// group by Account_Name\n\tfor each  item in upworkGroupDate\n\t{\n\t\tif(item.get(\"Account_Name\") != startAccount)\n\t\t{\n\t\t\tsortAccount.add(item.get(\"Account_Name\"));\n\t\t\tstartAccount = item.get(\"Account_Name\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t}\n\tinfo dateGroup;\n\tinfo sortAccount;\n\tfor each  unicAccount in sortAccount\n\t{\n\t\titemGroupByDateAccount = zoho.crm.searchRecords(\"Upwork_Uploads\",\"((Date:equals:\" + dateGroup + \")and (Account_Name:equals:\" + unicAccount + \"))\");\n\t\tinfo itemGroupByDateAccount.size();\n\t\tbooksInvoice = Map();\n\t\tlistVar = List();\n\t\tadjustment = 0;\n\t\tfor each  productCRM in itemGroupByDateAccount\n\t\t{\n\t\t\tif(productCRM.get(\"Type\") == 'Withdrawal' || productCRM.get(\"Type\") == 'Withdrawal Fee')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprodBooks = Map();\n\t\t\tprodBooks.put(\"item_id\",2234095000000510020);\n\t\t\tprodBooks.put(\"description\",productCRM.get(\"Description\"));\n\t\t\tprodBooks.put(\"quantity\",1);\n\t\t\tif(productCRM.get(\"Amount\") < 0)\n\t\t\t{\n\t\t\t\tprodBooks.put(\"rate\",0);\n\t\t\t\tadjustment = adjustment + productCRM.get(\"Amount\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprodBooks.put(\"rate\",productCRM.get(\"Amount\"));\n\t\t\t}\n\t\t\tlistVar.add(prodBooks);\n\t\t}\n\t\tbooksInvoice.put(\"customer_id\",2234095000000511059);\n\t\tbooksInvoice.put(\"line_items\",listVar);\n\t\tbooksInvoice.put(\"date\",dateGroup);\n\t\tif(adjustment < 0)\n\t\t{\n\t\t\tbooksInvoice.put(\"adjustment\",adjustment);\n\t\t}\n\t\tinfo zoho.books.createRecord(\"Invoices\",713248035,booksInvoice);\n\t}\n\tinfo \"--------------------\";\n}\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho Books",
                    "function": "zoho.books.createRecord",
                    "service": "ZohoBooks"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2020-12-10 05:57:01.0",
        "workflow": "items = zoho.crm.getRecords(\"Upwork_Uploads\");\nsortDate = List();\nstartDate = '';\n// group by date\nfor each  item in items\n{\n\tif(item.get(\"Date\") != startDate)\n\t{\n\t\tsortDate.add(item.get(\"Date\"));\n\t\tstartDate = item.get(\"Date\");\n\t}\n\telse\n\t{\n\t\tcontinue;\n\t}\n}\nfor each  dateGroup in sortDate\n{\n\tupworkGroupDate = zoho.crm.searchRecords(\"Upwork_Uploads\",\"(Date:equals:\" + dateGroup + \")\");\n\tstartAccount = '';\n\tsortAccount = List();\n\t// group by Account_Name\n\tfor each  item in upworkGroupDate\n\t{\n\t\tif(item.get(\"Account_Name\") != startAccount)\n\t\t{\n\t\t\tsortAccount.add(item.get(\"Account_Name\"));\n\t\t\tstartAccount = item.get(\"Account_Name\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t}\n\tinfo dateGroup;\n\tinfo sortAccount;\n\tfor each  unicAccount in sortAccount\n\t{\n\t\titemGroupByDateAccount = zoho.crm.searchRecords(\"Upwork_Uploads\",\"((Date:equals:\" + dateGroup + \")and (Account_Name:equals:\" + unicAccount + \"))\");\n\t\tinfo itemGroupByDateAccount.size();\n\t\tbooksInvoice = Map();\n\t\tlistVar = List();\n\t\tadjustment = 0;\n\t\tfor each  productCRM in itemGroupByDateAccount\n\t\t{\n\t\t\tif(productCRM.get(\"Type\") == 'Withdrawal' || productCRM.get(\"Type\") == 'Withdrawal Fee')\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprodBooks = Map();\n\t\t\tprodBooks.put(\"item_id\",2234095000000510020);\n\t\t\tprodBooks.put(\"description\",productCRM.get(\"Description\"));\n\t\t\tprodBooks.put(\"quantity\",1);\n\t\t\tif(productCRM.get(\"Amount\") < 0)\n\t\t\t{\n\t\t\t\tprodBooks.put(\"rate\",0);\n\t\t\t\tadjustment = adjustment + productCRM.get(\"Amount\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprodBooks.put(\"rate\",productCRM.get(\"Amount\"));\n\t\t\t}\n\t\t\tlistVar.add(prodBooks);\n\t\t}\n\t\tbooksInvoice.put(\"customer_id\",2234095000000511059);\n\t\tbooksInvoice.put(\"line_items\",listVar);\n\t\tbooksInvoice.put(\"date\",dateGroup);\n\t\tif(adjustment < 0)\n\t\t{\n\t\t\tbooksInvoice.put(\"adjustment\",adjustment);\n\t\t}\n\t\tinfo zoho.books.createRecord(\"Invoices\",713248035,booksInvoice);\n\t}\n\tinfo \"--------------------\";\n}\nreturn \"\";"
    },
    {
        "api_name": "testorder",
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": null,
                "id": "4444945000013335029",
                "isOldDataNeeded": false,
                "module": "Deals",
                "name": "testOrder"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "testOrder",
        "id": "512029000000017001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-01-17T10:22:12+01:00",
        "name": "testOrder",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testorder/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testorder/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testOrder()\n{\nproducts = {{\"id\":\"123\",\"quantity\":1,\"list_price\":10.00},{\"id\":\"1234\",\"quantity\":1,\"list_price\":12.00}};\nitemList = List();\nfor each  product in products\n{\n\tpMap = Map();\n\tpMap.put(\"Product\",{\"id\":product.get(\"id\")});\n\tpMap.put(\"Quantity\",product.get(\"quantity\"));\n\tpMap.put(\"ListPrice\",product.get(\"list_price\"));\n\titemList.add(pMap);\n}\ninfo itemList;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2022-01-17 01:22:12.0",
        "workflow": "products = {{\"id\":\"123\",\"quantity\":1,\"list_price\":10.00},{\"id\":\"1234\",\"quantity\":1,\"list_price\":12.00}};\nitemList = List();\nfor each  product in products\n{\n\tpMap = Map();\n\tpMap.put(\"Product\",{\"id\":product.get(\"id\")});\n\tpMap.put(\"Quantity\",product.get(\"quantity\"));\n\tpMap.put(\"ListPrice\",product.get(\"list_price\"));\n\titemList.add(pMap);\n}\ninfo itemList;"
    },
    {
        "api_name": "test21",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000050312039",
                "connectionLinkName": "project_workdrive",
                "connectionName": "project_workdrive",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoProjects.tasks.ALL",
                    "ZohoProjects.bugs.ALL",
                    "ZohoProjects.events.ALL",
                    "ZohoProjects.forums.ALL",
                    "WorkDrive.team.ALL",
                    "WorkDrive.workspace.ALL",
                    "WorkDrive.files.ALL",
                    "ZohoProjects.tags.ALL",
                    "ZohoProjects.users.ALL",
                    "ZohoProjects.clients.ALL",
                    "ZohoProjects.portals.ALL",
                    "WorkDrive.links.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test2",
        "id": "512029000000311001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-03-04T09:13:48+01:00",
        "name": "test21",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test21/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test21/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test21()\n{\nfileImage = invokeurl\n[\n\turl :\"https://mockoon.com/images/tutorials/blog-posts-mock-endpoint.png\"\n\ttype :GET\n];\nfileImage.setParamName(\"upload_file\");\ninfo isFile(fileImage);\nparams = Map();\nattachment_details = Map();\nlocation_details = Map();\nlocation_details.put(\"folder_id\",\"uwo9zee8ae9e321fb4eb8aea3c3779aa16790\");\nlocation_details.put(\"project_id\",\"1590562000003089005\");\nattachment_details.put(\"storage_type\",\"workdrive\");\nparams.put(\"attachment_details\",attachment_details);\nheaders = Map();\nheaders.put(\"content-type\",\"multipart/form-data\");\nresponse = invokeurl\n[\n\turl :\"https://projects.zoho.com/api/v3/portal/711667417/attachments\"\n\ttype :POST\n\tparameters:params\n\tfiles:fileImage\n\tconnection:\"project_workdrive\"\n];\ninfo response;\nid = response.get(\"attachment\").get(0).get(\"attachment_id\");\nattachment_ids = {id};\nparams2 = Map();\nparams2.put(\"attachment_ids\",attachment_ids);\nupdateRe = invokeurl\n[\n\turl :\"https://projects.zoho.com/api/v3/portal/711667417/projects/1590562000003089005/tasks/1590562000005296101/attachments\"\n\ttype :POST\n\tparameters:params2\n\tconnection:\"project_workdrive\"\n];\ninfo updateRe;\n// n = 100;\n// counter = leftpad(\"1\",n).replaceAll(\" \",\"1,\").toList();\n// for each index i in counter\n// {\n// \tzoho.crm.createRecord(\"DIDI\",{\"Name\":\"123\"});\n// }\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "https://mockoon.com/images/tutorials/blog-posts-mock-endpoint.png"
                },
                {
                    "connection": "project_workdrive",
                    "method": "post",
                    "url": "https://projects.zoho.com/api/v3/portal/711667417/attachments"
                },
                {
                    "connection": "project_workdrive",
                    "method": "post",
                    "url": "https://projects.zoho.com/api/v3/portal/711667417/projects/1590562000003089005/tasks/1590562000005296101/attachments"
                }
            ]
        },
        "updatedTime": "2025-03-04 00:13:48.0",
        "workflow": "fileImage = invokeurl\n[\n\turl :\"https://mockoon.com/images/tutorials/blog-posts-mock-endpoint.png\"\n\ttype :GET\n];\nfileImage.setParamName(\"upload_file\");\ninfo isFile(fileImage);\nparams = Map();\nattachment_details = Map();\nlocation_details = Map();\nlocation_details.put(\"folder_id\",\"uwo9zee8ae9e321fb4eb8aea3c3779aa16790\");\nlocation_details.put(\"project_id\",\"1590562000003089005\");\nattachment_details.put(\"storage_type\",\"workdrive\");\nparams.put(\"attachment_details\",attachment_details);\nheaders = Map();\nheaders.put(\"content-type\",\"multipart/form-data\");\nresponse = invokeurl\n[\n\turl :\"https://projects.zoho.com/api/v3/portal/711667417/attachments\"\n\ttype :POST\n\tparameters:params\n\tfiles:fileImage\n\tconnection:\"project_workdrive\"\n];\ninfo response;\nid = response.get(\"attachment\").get(0).get(\"attachment_id\");\nattachment_ids = {id};\nparams2 = Map();\nparams2.put(\"attachment_ids\",attachment_ids);\nupdateRe = invokeurl\n[\n\turl :\"https://projects.zoho.com/api/v3/portal/711667417/projects/1590562000003089005/tasks/1590562000005296101/attachments\"\n\ttype :POST\n\tparameters:params2\n\tconnection:\"project_workdrive\"\n];\ninfo updateRe;\n// n = 100;\n// counter = leftpad(\"1\",n).replaceAll(\" \",\"1,\").toList();\n// for each index i in counter\n// {\n// \tzoho.crm.createRecord(\"DIDI\",{\"Name\":\"123\"});\n// }"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "scheduler",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001275001",
                "connectionLinkName": "zoho_workdrive",
                "connectionName": "zoho_workdrive",
                "isUserDefinedService": "false",
                "scopes": [
                    "WorkDrive.files.ALL",
                    "WorkDrive.files.CREATE",
                    "WorkDrive.files.DELETE",
                    "WorkDrive.files.READ",
                    "WorkDrive.files.UPDATE",
                    "WorkDrive.files.UPDATE ",
                    "WorkDrive.files.sharing.CREATE",
                    "WorkDrive.files.sharing.READ",
                    "WorkDrive.team.ALL",
                    "WorkDrive.teamfolders.CREATE",
                    "WorkDrive.teamfolders.DELETE",
                    "WorkDrive.teamfolders.READ",
                    "WorkDrive.teamfolders.admin.READ",
                    "WorkDrive.users.ALL",
                    "WorkDrive.users.READ",
                    "WorkDrive.workspace.ALL",
                    "Workdrive.files.READ",
                    "ZohoFiles.files.CREATE",
                    "ZohoFiles.files.READ",
                    "ZohoSearch.securesearch.READ"
                ],
                "serviceName": "zoho_workdrive",
                "userAccess": "false"
            }
        ],
        "description": "test callsapp",
        "display_name": "test Workdrive",
        "id": "512029000000392005",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1688120583000,
        "name": "test",
        "nameSpace": "schedule",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void schedule.test()\n{\ndata = {\"ourNumber\":\"3119\",\"phone\":\"380674423873\",\"callType\":\"Outbound\",\"callPrefix\":\"Outgoing call to \",\"title\":\"Outgoing call to 380674423873\",\"search\":{{\"module\":\"Leads\",\"name\":\"Full_Name\",\"fields\":\"(Phone:equals:380674423873) or (Mobile:equals:380674423873)\"},{\"module\":\"Contacts\",\"name\":\"Full_Name\",\"fields\":\"(Phone:equals:380674423873) or (Mobile:equals:380674423873)\"}},\"call_id\":\"4444945000017491001\",\"call\":{\"Call_Duration\":\"0:10\",\"Description\":\"Recorded call:\\n\"},\"recordLink\":\"https://crm.t-one.ca/client/plugin/fs_manager/recordfile/?extension_id=20413&record=1e4da715-4f41-4b26-a4f0-931b5bf6d633\",\"workdrive_folder_id\":null,\"record\":{\"module\":\"Leads\",\"data\":{\"Last_Name\":\"Outgoing call to 380674423873\",\"Phone\":\"380674423873\"}}};\nresponse = zoho.crm.getRecords(\"users\",1,200,{\"type\":\"AdminUsers\"});\nusers = response.get(\"users\");\nzuid = null;\nfor each  user in response.get(\"users\")\n{\n\tcurrentId = user.get(\"zuid\").toLong();\n\tif(zuid.isNull() || zuid > currentId)\n\t{\n\t\tzuid = currentId;\n\t}\n}\ninfo zuid;\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/users/\" + zuid + \"/teams\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\ninfo response;\nteamId = response.get(\"data\").get(0).get(\"id\");\nparameters = Map();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"name\",\"CallsApp Records\");\natt_param1.put(\"parent_id\",teamId);\natt_param1.put(\"is_public_within_team\",\"true\");\natt_param1.put(\"description\",\"Contains call record files\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"teamfolders\");\nparameters.put(\"data\",data_param1);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teamfolders\"\n\ttype :POST\n\tparameters:parameters.toString()\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\ninfo response;\nworkdrive_id = response.get(\"data\").get(\"id\");\nrecord = false;\ntitle = data.get(\"phone\");\ncallId = null;\ncallMap = Map();\ncallMap.putAll(data.get(\"call\"));\nif(data.containKey(\"recordLink\"))\n{\n\theader = Map();\n\theader.put(\"Accept\",\"application/vnd.api+json\");\n\tinfo data.get(\"recordLink\");\n\tfile = invokeurl\n\t[\n\t\turl :data.get(\"recordLink\")\n\t\ttype :GET\n\t];\n\tinfo file;\n\tlist_of_text = List();\n\tlist_of_text.add({\"paramName\":\"filename\",\"content\":data.get(\"title\") + \".mp3\",\"stringPart\":\"true\"});\n\tlist_of_text.add({\"paramName\":\"parent_id\",\"content\":\"8z95f4e6d9d821faf42adabc7248be0fa541e\",\"stringPart\":\"true\"});\n\tlist_of_text.add({\"paramName\":\"override-name-exist\",\"content\":\"true\",\"stringPart\":\"true\"});\n\tlist_of_text.add({\"paramName\":\"content\",\"content\":file,\"stringPart\":\"false\"});\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://www.zohoapis.com/workdrive/api/v1/upload\"\n\t\ttype :POST\n\t\theaders:header\n\t\tfiles:list_of_text\n\t\tconnection:\"zoho_workdrive\"\n\t];\n\tinfo response;\n\tlink = \"<File Upload Error>\";\n\tif(!response.get(\"data\").isNull() && response.get(\"data\").size() > 0 && !response.get(\"data\").get(0).get(\"attributes\").isNull())\n\t{\n\t\tlink = response.get(\"data\").get(0).get(\"attributes\").get(\"Permalink\");\n\t}\n\tcallMap.put(\"Description\",callMap.get(\"Description\") + link);\n}\nif(data.get(\"call_id\").isNull())\n{\n\tfor each  search in data.get(\"search\")\n\t{\n\t\trecordSearch = zoho.crm.searchRecords(search.get(\"module\"),search.get(\"fields\"),1,1,{\"delay\":false});\n\t\tif(recordSearch.size() > 0)\n\t\t{\n\t\t\trecord = recordSearch.get(0);\n\t\t\tif(!record.get(search.get(\"name\")).contains(data.get(\"phone\")))\n\t\t\t{\n\t\t\t\ttitle = record.get(search.get(\"name\"));\n\t\t\t}\n\t\t\tfoundModule = search.get(\"module\");\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!record)\n\t{\n\t\tinfo \"CREATE LEAD\";\n\t\tcreateMap = Map();\n\t\tcreateMap.putAll(data.get(\"record\").get(\"data\"));\n\t\trecord = zoho.crm.createRecord(\"Leads\",createMap);\n\t\tfoundModule = \"Leads\";\n\t}\n\tinfo \"CREATE CALL\";\n\tcallMap.put(\"Subject\",callMap.get(\"Subject\") + title);\n\tif(foundModule == \"Contacts\")\n\t{\n\t\tcallMap.put(\"Who_Id\",record.get(\"id\"));\n\t\tif(record.containKey(\"Account\"))\n\t\t{\n\t\t\tcallMap.put(\"$se_module\",\"Accounts\");\n\t\t\tcallMap.put(\"What_Id\",record.get(\"Account\"));\n\t\t}\n\t}\n\telse\n\t{\n\t\tcallMap.put(\"$se_module\",foundModule);\n\t\tcallMap.put(\"What_Id\",record.get(\"id\"));\n\t}\n\tinfo callMap;\n\tcall = zoho.crm.createRecord(\"Calls\",callMap);\n\tinfo call;\n\tcallId = call.get(\"id\");\n}\nelse\n{\n\tinfo \"UPDATE CALL\";\n\tcall = zoho.crm.updateRecord(\"Calls\",data.get(\"call_id\"),callMap);\n\tinfo call;\n\tcallId = call.get(\"id\");\n}\ninfo {\"id\":callId};\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecords",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "zoho_workdrive",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_workdrive",
                    "method": "post",
                    "url": "https://www.zohoapis.com/workdrive/api/v1/teamfolders"
                },
                {
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_workdrive",
                    "method": "post",
                    "url": "https://www.zohoapis.com/workdrive/api/v1/upload"
                }
            ]
        },
        "updatedTime": "2023-06-30 03:23:03.0",
        "workflow": "data = {\"ourNumber\":\"3119\",\"phone\":\"380674423873\",\"callType\":\"Outbound\",\"callPrefix\":\"Outgoing call to \",\"title\":\"Outgoing call to 380674423873\",\"search\":{{\"module\":\"Leads\",\"name\":\"Full_Name\",\"fields\":\"(Phone:equals:380674423873) or (Mobile:equals:380674423873)\"},{\"module\":\"Contacts\",\"name\":\"Full_Name\",\"fields\":\"(Phone:equals:380674423873) or (Mobile:equals:380674423873)\"}},\"call_id\":\"4444945000017491001\",\"call\":{\"Call_Duration\":\"0:10\",\"Description\":\"Recorded call:\\n\"},\"recordLink\":\"https://crm.t-one.ca/client/plugin/fs_manager/recordfile/?extension_id=20413&record=1e4da715-4f41-4b26-a4f0-931b5bf6d633\",\"workdrive_folder_id\":null,\"record\":{\"module\":\"Leads\",\"data\":{\"Last_Name\":\"Outgoing call to 380674423873\",\"Phone\":\"380674423873\"}}};\nresponse = zoho.crm.getRecords(\"users\",1,200,{\"type\":\"AdminUsers\"});\nusers = response.get(\"users\");\nzuid = null;\nfor each  user in response.get(\"users\")\n{\n\tcurrentId = user.get(\"zuid\").toLong();\n\tif(zuid.isNull() || zuid > currentId)\n\t{\n\t\tzuid = currentId;\n\t}\n}\ninfo zuid;\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/users/\" + zuid + \"/teams\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\ninfo response;\nteamId = response.get(\"data\").get(0).get(\"id\");\nparameters = Map();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"name\",\"CallsApp Records\");\natt_param1.put(\"parent_id\",teamId);\natt_param1.put(\"is_public_within_team\",\"true\");\natt_param1.put(\"description\",\"Contains call record files\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"teamfolders\");\nparameters.put(\"data\",data_param1);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teamfolders\"\n\ttype :POST\n\tparameters:parameters.toString()\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\ninfo response;\nworkdrive_id = response.get(\"data\").get(\"id\");\nrecord = false;\ntitle = data.get(\"phone\");\ncallId = null;\ncallMap = Map();\ncallMap.putAll(data.get(\"call\"));\nif(data.containKey(\"recordLink\"))\n{\n\theader = Map();\n\theader.put(\"Accept\",\"application/vnd.api+json\");\n\tinfo data.get(\"recordLink\");\n\tfile = invokeurl\n\t[\n\t\turl :data.get(\"recordLink\")\n\t\ttype :GET\n\t];\n\tinfo file;\n\tlist_of_text = List();\n\tlist_of_text.add({\"paramName\":\"filename\",\"content\":data.get(\"title\") + \".mp3\",\"stringPart\":\"true\"});\n\tlist_of_text.add({\"paramName\":\"parent_id\",\"content\":\"8z95f4e6d9d821faf42adabc7248be0fa541e\",\"stringPart\":\"true\"});\n\tlist_of_text.add({\"paramName\":\"override-name-exist\",\"content\":\"true\",\"stringPart\":\"true\"});\n\tlist_of_text.add({\"paramName\":\"content\",\"content\":file,\"stringPart\":\"false\"});\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://www.zohoapis.com/workdrive/api/v1/upload\"\n\t\ttype :POST\n\t\theaders:header\n\t\tfiles:list_of_text\n\t\tconnection:\"zoho_workdrive\"\n\t];\n\tinfo response;\n\tlink = \"<File Upload Error>\";\n\tif(!response.get(\"data\").isNull() && response.get(\"data\").size() > 0 && !response.get(\"data\").get(0).get(\"attributes\").isNull())\n\t{\n\t\tlink = response.get(\"data\").get(0).get(\"attributes\").get(\"Permalink\");\n\t}\n\tcallMap.put(\"Description\",callMap.get(\"Description\") + link);\n}\nif(data.get(\"call_id\").isNull())\n{\n\tfor each  search in data.get(\"search\")\n\t{\n\t\trecordSearch = zoho.crm.searchRecords(search.get(\"module\"),search.get(\"fields\"),1,1,{\"delay\":false});\n\t\tif(recordSearch.size() > 0)\n\t\t{\n\t\t\trecord = recordSearch.get(0);\n\t\t\tif(!record.get(search.get(\"name\")).contains(data.get(\"phone\")))\n\t\t\t{\n\t\t\t\ttitle = record.get(search.get(\"name\"));\n\t\t\t}\n\t\t\tfoundModule = search.get(\"module\");\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(!record)\n\t{\n\t\tinfo \"CREATE LEAD\";\n\t\tcreateMap = Map();\n\t\tcreateMap.putAll(data.get(\"record\").get(\"data\"));\n\t\trecord = zoho.crm.createRecord(\"Leads\",createMap);\n\t\tfoundModule = \"Leads\";\n\t}\n\tinfo \"CREATE CALL\";\n\tcallMap.put(\"Subject\",callMap.get(\"Subject\") + title);\n\tif(foundModule == \"Contacts\")\n\t{\n\t\tcallMap.put(\"Who_Id\",record.get(\"id\"));\n\t\tif(record.containKey(\"Account\"))\n\t\t{\n\t\t\tcallMap.put(\"$se_module\",\"Accounts\");\n\t\t\tcallMap.put(\"What_Id\",record.get(\"Account\"));\n\t\t}\n\t}\n\telse\n\t{\n\t\tcallMap.put(\"$se_module\",foundModule);\n\t\tcallMap.put(\"What_Id\",record.get(\"id\"));\n\t}\n\tinfo callMap;\n\tcall = zoho.crm.createRecord(\"Calls\",callMap);\n\tinfo call;\n\tcallId = call.get(\"id\");\n}\nelse\n{\n\tinfo \"UPDATE CALL\";\n\tcall = zoho.crm.updateRecord(\"Calls\",data.get(\"call_id\"),callMap);\n\tinfo call;\n\tcallId = call.get(\"id\");\n}\ninfo {\"id\":callId};"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": null,
                "id": "4444945000009335045",
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "TerstIfRenameModule"
            }
        ],
        "category": "automation",
        "config": true,
        "description": "Тест на возможность изменения имени модуля без последствий плохой работы воркфлоу",
        "display_name": "TerstIfRenameModule",
        "id": "512029000000632001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-07-19T09:29:27+02:00",
        "name": "TerstIfRenameModule",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.TerstIfRenameModule()\n{\nleadId = 4444945000009335005;\nrecordMap = Map();\nrecordMap.put(\"Company\",\"E\");\ninfo zoho.crm.updateRecord(\"Leads\",leadId,recordMap);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-07-19 00:29:27.0",
        "workflow": "leadId = 4444945000009335005;\nrecordMap = Map();\nrecordMap.put(\"Company\",\"E\");\ninfo zoho.crm.updateRecord(\"Leads\",leadId,recordMap);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "custom_function4",
        "id": "512029000000437001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1619710012000,
        "name": "custom_function4",
        "nameSpace": "automation",
        "params": [
            {
                "name": "mailid",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.custom_function4(string mailid)\n{\ninfo mailid;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false,
            "params": [
                "mailid"
            ]
        },
        "updatedTime": "2021-04-29 08:26:52.0",
        "workflow": "info mailid;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "testAPIDeluge",
        "id": "512029000000270001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1602079338000,
        "name": "testAPIDeluge",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testAPIDeluge()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2020-10-07 07:02:18.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000047291665",
                "connectionLinkName": "zbb",
                "connectionName": "zbb",
                "isUserDefinedService": "false",
                "scopes": [
                    "zohobookings.data.CREATE",
                    "zohobookings.data.READ"
                ],
                "serviceName": "zoho_bookings",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test_ext",
        "id": "512029000000135001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-07-01T06:21:46+02:00",
        "name": "test_ext",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test_ext()\n{\ninfo zoho.bookings.getWorkspaces(\"zbb\");\ndata = {\"data\":{{\"name\":\"Test1\",\"email\":\"test1@test.com\",\"gender\":\"Female\",\"role\":\"Admin\",\"dob\":\"12-Aug-1999 00:00:00\",\"additional_info\":\"Testing\",\"phone\":\"1234567890\",\"designation\":\"Developer\",\"assigned_services\":{\"82045000000112024\",\"82045000000098220\"}}}};\nfds = invokeurl\n[\n\turl :\"https://www.zohoapis.eu/bookings/v1/json/addstaff\"\n\ttype :POST\n\tparameters:data\n\tconnection:\"zbb\"\n];\ninfo fds;\n//zbb\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "zbb",
                    "display_name": "Zoho Bookings",
                    "function": "zoho.bookings.getWorkspaces",
                    "service": "ZohoBookings"
                }
            ],
            "webhooks": [
                {
                    "connection": "zbb",
                    "method": "post",
                    "url": "https://www.zohoapis.eu/bookings/v1/json/addstaff"
                }
            ]
        },
        "updatedTime": "2024-06-30 21:21:48.0",
        "workflow": "info zoho.bookings.getWorkspaces(\"zbb\");\ndata = {\"data\":{{\"name\":\"Test1\",\"email\":\"test1@test.com\",\"gender\":\"Female\",\"role\":\"Admin\",\"dob\":\"12-Aug-1999 00:00:00\",\"additional_info\":\"Testing\",\"phone\":\"1234567890\",\"designation\":\"Developer\",\"assigned_services\":{\"82045000000112024\",\"82045000000098220\"}}}};\nfds = invokeurl\n[\n\turl :\"https://www.zohoapis.eu/bookings/v1/json/addstaff\"\n\ttype :POST\n\tparameters:data\n\tconnection:\"zbb\"\n];\ninfo fds;\n//zbb"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "createOrderSales",
        "id": "512029000000527001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1630238316000,
        "name": "createOrderSales",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.createOrderSales()\n{\nproductId = null;\nshopifyId = 10328288624827;\nsku = \"30072\";\ntitle = \"Flat Lashes Single-Length Trays - 12mm 015 CC\";\nunitPrice = 32;\nshopifySource = \"sugarlashpro-dev-us\";\nvendorName = \"test vendor\";\nproductName = \"Volume Pick-Up Tweezer V-MASTER - 140mm\";\nexistProduct = zoho.crm.searchRecords(\"Products\",\"(shopifytocrm0__Shopify_Id:equals:\" + shopifyId + \")\");\nif(existProduct.size() == 0 && sku != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(shopifytocrm0__Shopify_SKU:equals:\" + sku + \")\");\n}\nif(existProduct.size() == 0 && title != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(Product_Name:equals:\" + title + \")\");\n}\nif(existProduct.size() == 0 && productName != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(Product_Name:equals:\" + productName + \")\");\n}\nif(existProduct.size() > 0)\n{\n\tfor each  product in existProduct\n\t{\n\t\tinfo product.get(\"shopifytocrm0__Shopify_Source\");\n\t\tif(product.get(\"shopifytocrm0__Shopify_Source\") == shopifySource)\n\t\t{\n\t\t\tproductId = product.get(\"id\");\n\t\t}\n\t}\n}\n/* if(existProduct.size() == 0 && productId == null)\n{\n\t\ttry \n\t{\n\t\tnewProduct = Map();\n\t\tnewProduct.put(\"Product_Name\",productName);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_SKU\",sku);\n\t\tnewProduct.put(\"Unit_Price\",unitPrice);\n\t\t//newProduct.put(\"Product_Active\",active);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Id\",shopifyId);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Source\",shopifySource);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Vendor\",vendorName);\n\t\tresult = zoho.crm.createRecord(\"Products\",newProduct);\n\t\tproductId = result.get(\"id\");\n\t\t//return newProduct;\n\t}\n catch (e)\n\t{\t\t\n\t\tproductId = \"null\";\n\t}\n} */\ninfo existProduct.size();\ninfo productId.toString();\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-08-29 04:58:36.0",
        "workflow": "productId = null;\nshopifyId = 10328288624827;\nsku = \"30072\";\ntitle = \"Flat Lashes Single-Length Trays - 12mm 015 CC\";\nunitPrice = 32;\nshopifySource = \"sugarlashpro-dev-us\";\nvendorName = \"test vendor\";\nproductName = \"Volume Pick-Up Tweezer V-MASTER - 140mm\";\nexistProduct = zoho.crm.searchRecords(\"Products\",\"(shopifytocrm0__Shopify_Id:equals:\" + shopifyId + \")\");\nif(existProduct.size() == 0 && sku != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(shopifytocrm0__Shopify_SKU:equals:\" + sku + \")\");\n}\nif(existProduct.size() == 0 && title != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(Product_Name:equals:\" + title + \")\");\n}\nif(existProduct.size() == 0 && productName != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(Product_Name:equals:\" + productName + \")\");\n}\nif(existProduct.size() > 0)\n{\n\tfor each  product in existProduct\n\t{\n\t\tinfo product.get(\"shopifytocrm0__Shopify_Source\");\n\t\tif(product.get(\"shopifytocrm0__Shopify_Source\") == shopifySource)\n\t\t{\n\t\t\tproductId = product.get(\"id\");\n\t\t}\n\t}\n}\n/* if(existProduct.size() == 0 && productId == null)\n{\n\t\ttry \n\t{\n\t\tnewProduct = Map();\n\t\tnewProduct.put(\"Product_Name\",productName);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_SKU\",sku);\n\t\tnewProduct.put(\"Unit_Price\",unitPrice);\n\t\t//newProduct.put(\"Product_Active\",active);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Id\",shopifyId);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Source\",shopifySource);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Vendor\",vendorName);\n\t\tresult = zoho.crm.createRecord(\"Products\",newProduct);\n\t\tproductId = result.get(\"id\");\n\t\t//return newProduct;\n\t}\n catch (e)\n\t{\t\t\n\t\tproductId = \"null\";\n\t}\n} */\ninfo existProduct.size();\ninfo productId.toString();"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "crmoz_asign_accont_crm",
        "id": "512029000000324001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2020-12-14T14:47:24+01:00",
        "name": "crmoz_asign_accont_crm",
        "nameSpace": "button",
        "params": [
            {
                "name": "ids",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "STRING",
        "script": "string button.crmoz_asign_accont_crm(String ids)\n{\nidsList = ids.toCollection(\"|||\");\nfor each  id in idsList\n{\n\tupworkItem = zoho.crm.getRecordById(\"Upwork_Uploads\",id);\n\taccount = zoho.crm.searchRecords(\"Accounts\",\"(Account_Name:equals:\" + upworkItem.get(\"Team\") + \")\");\n\tcustomerBooks = zoho.books.getRecords(\"Contacts\",713248035,{\"contact_name\":\"TestTest\"}).get(\"contacts\");\n\tif(customerBooks.size() > 0)\n\t{\n\t\tinfo customerBooks.get(0).get(\"contact_id\");\n\t}\n\tinfo customerBooks;\n\tif(account.size() > 0)\n\t{\n\t\tupworkMap = Map();\n\t\tupworkMap.put(\"Account_CRM\",account.get(0).get(\"id\"));\n\t\tzoho.crm.updateRecord(\"Upwork_Uploads\",id,upworkMap);\n\t}\n\telse\n\t{\n\t\tnewNote = Map();\n\t\tnewNote.put(\"se_module\",\"Upwork_Uploads\");\n\t\tnewNote.put(\"Parent_Id\",id.toString());\n\t\tnewNote.put(\"Note_Content\",\"Error asign! Not find account - \" + upworkItem.get(\"Team\"));\n\t\tresp = zoho.crm.createRecord(\"Notes\",newNote);\n\t}\n}\nreturn \"Asign account is successfully\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho Books",
                    "function": "zoho.books.getRecords",
                    "service": "ZohoBooks"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "ids"
            ]
        },
        "updatedTime": "2020-12-14 05:47:26.0",
        "workflow": "idsList = ids.toCollection(\"|||\");\nfor each  id in idsList\n{\n\tupworkItem = zoho.crm.getRecordById(\"Upwork_Uploads\",id);\n\taccount = zoho.crm.searchRecords(\"Accounts\",\"(Account_Name:equals:\" + upworkItem.get(\"Team\") + \")\");\n\tcustomerBooks = zoho.books.getRecords(\"Contacts\",713248035,{\"contact_name\":\"TestTest\"}).get(\"contacts\");\n\tif(customerBooks.size() > 0)\n\t{\n\t\tinfo customerBooks.get(0).get(\"contact_id\");\n\t}\n\tinfo customerBooks;\n\tif(account.size() > 0)\n\t{\n\t\tupworkMap = Map();\n\t\tupworkMap.put(\"Account_CRM\",account.get(0).get(\"id\"));\n\t\tzoho.crm.updateRecord(\"Upwork_Uploads\",id,upworkMap);\n\t}\n\telse\n\t{\n\t\tnewNote = Map();\n\t\tnewNote.put(\"se_module\",\"Upwork_Uploads\");\n\t\tnewNote.put(\"Parent_Id\",id.toString());\n\t\tnewNote.put(\"Note_Content\",\"Error asign! Not find account - \" + upworkItem.get(\"Team\"));\n\t\tresp = zoho.crm.createRecord(\"Notes\",newNote);\n\t}\n}\nreturn \"Asign account is successfully\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testTask",
        "id": "512029000000595008",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1625838567000,
        "name": "testTask",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testTask()\n{\ndateRem = toTime(now.addHour(25),\"yyyy-mm-dd'T'HH:mm:ss+00:00\");\nd = dateRem.toDate();\nyear = d.getYear();\nmonth = d.getMonth();\nif(month.length() == 1)\n{\n\tmonth = \"0\" + month;\n}\nday = d.getDay();\nif(day.length() == 1)\n{\n\tday = \"0\" + day;\n}\nnewDat = year + \"-\" + month + \"-\" + day;\nt = getSuffix(dateRem.toTime(),d).replaceAll(\" \",\"\").toString();\n//taskRemindAt = {\"ALARM\":\"FREQ=NONE;ACTION=POPUP;TRIGGER=DATE-TIME:\"+newDat+'T'+t+\"+01:00\"};\ntaskRemindAt = {\"ALARM\":\"FREQ=NONE;ACTION=POPUP;TRIGGER=DATE-TIME:\" + dateRem};\n//taskRemindAt ={\"ALARM\":\"FREQ=NONE;ACTION=POPUP;TRIGGER=DATE-TIME:2021-07-10T07:35:51+00:00\"};\ninfo taskRemindAt;\ntaskMap = Map();\ntaskMap.put(\"Subject\",\"TEST\");\ntaskMap.put(\"Due_Date\",today);\ntaskMap.put(\"Remind_At\",taskRemindAt);\ninfo zoho.crm.createRecord(\"Tasks\",taskMap);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-07-09 06:49:27.0",
        "workflow": "dateRem = toTime(now.addHour(25),\"yyyy-mm-dd'T'HH:mm:ss+00:00\");\nd = dateRem.toDate();\nyear = d.getYear();\nmonth = d.getMonth();\nif(month.length() == 1)\n{\n\tmonth = \"0\" + month;\n}\nday = d.getDay();\nif(day.length() == 1)\n{\n\tday = \"0\" + day;\n}\nnewDat = year + \"-\" + month + \"-\" + day;\nt = getSuffix(dateRem.toTime(),d).replaceAll(\" \",\"\").toString();\n//taskRemindAt = {\"ALARM\":\"FREQ=NONE;ACTION=POPUP;TRIGGER=DATE-TIME:\"+newDat+'T'+t+\"+01:00\"};\ntaskRemindAt = {\"ALARM\":\"FREQ=NONE;ACTION=POPUP;TRIGGER=DATE-TIME:\" + dateRem};\n//taskRemindAt ={\"ALARM\":\"FREQ=NONE;ACTION=POPUP;TRIGGER=DATE-TIME:2021-07-10T07:35:51+00:00\"};\ninfo taskRemindAt;\ntaskMap = Map();\ntaskMap.put(\"Subject\",\"TEST\");\ntaskMap.put(\"Due_Date\",today);\ntaskMap.put(\"Remind_At\",taskRemindAt);\ninfo zoho.crm.createRecord(\"Tasks\",taskMap);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000000386001",
                "connectionLinkName": "gc",
                "connectionName": "Calendar",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/calendar",
                    "https://www.googleapis.com/auth/calendar.readonly"
                ],
                "serviceName": "google_calendar",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test_calendar",
        "id": "512029000000387001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1614063592000,
        "name": "test_calendar",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test_calendar()\n{\nparams = Map();\nparams.put(\"timeZone\",\"Europe/Kiev\");\nparams.put(\"timeMin\",\"2021-02-05T09:00:00-00:00\");\nparams.put(\"timeMax\",\"2021-02-05T19:00:00-00:00\");\nresponse = invokeurl\n[\n\turl :\"https://www.googleapis.com/calendar/v3/calendars/sf0f8nkc82h8ul00i24867lu78@group.calendar.google.com/events\"\n\ttype :GET\n\tparameters:params.toString()\n\tconnection:\"gc\"\n];\nr = response.getJSON(\"items\");\nfor each  el in r\n{\n\tinfo el.getJson(\"start\");\n}\n//sf0f8nkc82h8ul00i24867lu78@group.calendar.google.com\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "gc",
                    "method": "get",
                    "url": "https://www.googleapis.com/calendar/v3/calendars/sf0f8nkc82h8ul00i24867lu78@group.calendar.google.com/events"
                }
            ]
        },
        "updatedTime": "2021-02-22 22:59:52.0",
        "workflow": "params = Map();\nparams.put(\"timeZone\",\"Europe/Kiev\");\nparams.put(\"timeMin\",\"2021-02-05T09:00:00-00:00\");\nparams.put(\"timeMax\",\"2021-02-05T19:00:00-00:00\");\nresponse = invokeurl\n[\n\turl :\"https://www.googleapis.com/calendar/v3/calendars/sf0f8nkc82h8ul00i24867lu78@group.calendar.google.com/events\"\n\ttype :GET\n\tparameters:params.toString()\n\tconnection:\"gc\"\n];\nr = response.getJSON(\"items\");\nfor each  el in r\n{\n\tinfo el.getJson(\"start\");\n}\n//sf0f8nkc82h8ul00i24867lu78@group.calendar.google.com"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "DEN_testUsers",
        "id": "512029000000309001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1604483929000,
        "name": "DEN_testUsers",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.DEN_testUsers()\n{\nhourStartWork = 9;\nhourEndWork = 18;\nnowTime = \"04-Nov-2020 09:00:00\";\ninfo nowTime.getHour();\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2020-11-04 01:58:49.0",
        "workflow": "hourStartWork = 9;\nhourEndWork = 18;\nnowTime = \"04-Nov-2020 09:00:00\";\ninfo nowTime.getHour();"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "leadId",
                        "value": "Leads.Lead Id"
                    },
                    {
                        "name": "leadStatus",
                        "value": "Leads.Lead Status"
                    }
                ],
                "id": 4444945000009982500,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "crmoz_create_task",
                "status": false
            },
            {
                "_type": "automation_action",
                "arguments": [
                    {
                        "name": "leadId",
                        "value": "Leads.Lead Id"
                    },
                    {
                        "name": "leadStatus",
                        "value": "Leads.Lead Status"
                    }
                ],
                "id": "4444945000009994087",
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "leadStatusToTask"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "leadStatusToTask",
        "id": "512029000000739001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-09-01T11:58:16+02:00",
        "name": "leadStatusToTask",
        "nameSpace": "automation",
        "params": [
            {
                "name": "leadId",
                "type": "BIGINT"
            },
            {
                "name": "leadStatus",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.leadStatusToTask(Int leadId, String leadStatus)\n{\n//leadId = 4444945000009982186;\n//leadStatus = \"No ansver_3\";\n//leadStatus = \"in Work\";\ncheckStatus = null;\nmodule_name = \"Leads\";\nrelation_name = \"Tasks\";\nactivities = zoho.crm.getRelatedRecords(relation_name,module_name,leadId);\n//activities = zoho.crm.searchRecords(relation_name,\"(What_Id:equals:\" + leadId + \")\");\n//\ntimeList = List();\nfor each  task in activities\n{\n\tif(task.get(\"What_Id\").get(\"id\") == leadId)\n\t{\n\t\ttimeList.add(task.get(\"Created_Time\"));\n\t}\n}\nlastTime = timeList.sort(false).get(0);\nlistId = List();\nfor each  timeItem in timeList.sort(false)\n{\n\t/* \ttask = zoho.crm.searchRecords(relation_name,\"(Created_Time:equals:\" + timeItem + \")\");\n\tlistId.add(task.get(0).get(\"id\")); */\n\tif(timeItem == lastTime)\n\t{\n\t\ttask = zoho.crm.searchRecords(relation_name,\"(Created_Time:equals:\" + timeItem + \")\");\n\t\ttaskId = task.get(0).get(\"id\");\n\t\ttaskStatus = {\"Lead_Status\":leadStatus};\n\t\tresponse = zoho.crm.updateRecord(\"Tasks\",taskId,taskStatus);\n\t\tcheckTask = zoho.crm.searchRecords(relation_name,\"(Created_Time:equals:\" + timeItem + \")\");\n\t\tcheckStatus = checkTask.get(0).get(\"Lead_Status\");\n\t\tif(checkStatus == null)\n\t\t{\n\t\t\tzoho.crm.updateRecord(\"Tasks\",taskId,taskStatus);\n\t\t\tinfo \"------\";\n\t\t}\n\t\t//info \"------\";\n\t}\n\tinfo checkStatus;\n\tif(timeItem != lastTime)\n\t{\n\t\ttask = zoho.crm.searchRecords(relation_name,\"(Created_Time:equals:\" + timeItem + \")\");\n\t\ttaskId = task.get(0).get(\"id\");\n\t\ttaskStatus = {\"Status\":\"Completed\"};\n\t\tresponse = zoho.crm.updateRecord(\"Tasks\",taskId,taskStatus);\n\t\t//info response;\n\t}\n}\n//taskIds = listId.sort(false);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRelatedRecords",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "leadId",
                "leadStatus"
            ]
        },
        "updatedTime": "2021-09-01 02:58:16.0",
        "workflow": "//leadId = 4444945000009982186;\n//leadStatus = \"No ansver_3\";\n//leadStatus = \"in Work\";\ncheckStatus = null;\nmodule_name = \"Leads\";\nrelation_name = \"Tasks\";\nactivities = zoho.crm.getRelatedRecords(relation_name,module_name,leadId);\n//activities = zoho.crm.searchRecords(relation_name,\"(What_Id:equals:\" + leadId + \")\");\n//\ntimeList = List();\nfor each  task in activities\n{\n\tif(task.get(\"What_Id\").get(\"id\") == leadId)\n\t{\n\t\ttimeList.add(task.get(\"Created_Time\"));\n\t}\n}\nlastTime = timeList.sort(false).get(0);\nlistId = List();\nfor each  timeItem in timeList.sort(false)\n{\n\t/* \ttask = zoho.crm.searchRecords(relation_name,\"(Created_Time:equals:\" + timeItem + \")\");\n\tlistId.add(task.get(0).get(\"id\")); */\n\tif(timeItem == lastTime)\n\t{\n\t\ttask = zoho.crm.searchRecords(relation_name,\"(Created_Time:equals:\" + timeItem + \")\");\n\t\ttaskId = task.get(0).get(\"id\");\n\t\ttaskStatus = {\"Lead_Status\":leadStatus};\n\t\tresponse = zoho.crm.updateRecord(\"Tasks\",taskId,taskStatus);\n\t\tcheckTask = zoho.crm.searchRecords(relation_name,\"(Created_Time:equals:\" + timeItem + \")\");\n\t\tcheckStatus = checkTask.get(0).get(\"Lead_Status\");\n\t\tif(checkStatus == null)\n\t\t{\n\t\t\tzoho.crm.updateRecord(\"Tasks\",taskId,taskStatus);\n\t\t\tinfo \"------\";\n\t\t}\n\t\t//info \"------\";\n\t}\n\tinfo checkStatus;\n\tif(timeItem != lastTime)\n\t{\n\t\ttask = zoho.crm.searchRecords(relation_name,\"(Created_Time:equals:\" + timeItem + \")\");\n\t\ttaskId = task.get(0).get(\"id\");\n\t\ttaskStatus = {\"Status\":\"Completed\"};\n\t\tresponse = zoho.crm.updateRecord(\"Tasks\",taskId,taskStatus);\n\t\t//info response;\n\t}\n}\n//taskIds = listId.sort(false);"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "orderID",
                        "value": "Sales Orders.Sales Order Id"
                    }
                ],
                "id": 4444945000000388000,
                "isOldDataNeeded": false,
                "module": "Sales Orders",
                "name": "Test",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "testOrder",
        "id": "512029000000018001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-01-21T09:18:10+01:00",
        "name": "testOrder1",
        "nameSpace": "automation",
        "params": [
            {
                "name": "orderID",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testOrder1(Int orderID)\n{\n// order = zoho.crm.getRecordById(\"Sales_Orders\",orderID);\n// amount = order.get(\"Excise_Duty\");\n// dealID = order.get(\"Deal_Name\").get(\"id\");\n// deal = zoho.crm.getRecordById(\"Deals\",dealID);\n// payments = zoho.crm.getRelatedRecords(\"SalesOrders\",\"Deals\",dealID);\n// for each  pay in payments\n// {\n// \tamount = amount + pay.get(\"Excise_Duty\");\n// }\n// zoho.crm.updateRecord(\"Deals\",dealID,{\"Amount\":amount});\n// info zoho.recruit.getRecordById(\"CustomModule1\", \"595874000000320315\") ;\n// candidateMap = Map();\ninfo zoho.crm.getRecords(\"Contacts\");\n//test = zoho.recruit.getRecordById(\"Candidates\",\"595874000000321016\");\n//info test;\n// candidateMap.put(\"Last Name\", test.get(\"CustomModule1 Name\"));\n// candidateMap.put(\"Email\", test.get(\"Email\"));\n// // candidateMap.put(\"\", test.get(\"\"));\n// // candidateMap.put(\"\", test.get(\"\"));\n/*candidatesMap = Map();\ncandidatesMap.put(\"Last Name\",test.get(\"CustomModule1 Name\"));\ncandidatesMap.put(\"Email\",test.get(\"Email\"));\ncandidatesMap.put(\"Mobile\",\"+91 998877665\");\ncandidatesMap.put(\"Experience in years\",\"5\");\ncandidatesMap.put(\"Current Job Title\",\"Assistant Manager\");\ncandidatesMap.put(\"Skill Set\",\"MCA\");\ncandidatesMap.put(\"Experience Details\",\"Working in UTS for 5 years\");\nresponse = zoho.recruit.addRecord(\"Candidates\",candidatesMap);\ninfo response;*/\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-10-25 01:04:33.0",
        "workflow": "// order = zoho.crm.getRecordById(\"Sales_Orders\",orderID);\n// amount = order.get(\"Excise_Duty\");\n// dealID = order.get(\"Deal_Name\").get(\"id\");\n// deal = zoho.crm.getRecordById(\"Deals\",dealID);\n// payments = zoho.crm.getRelatedRecords(\"SalesOrders\",\"Deals\",dealID);\n// for each  pay in payments\n// {\n// \tamount = amount + pay.get(\"Excise_Duty\");\n// }\n// zoho.crm.updateRecord(\"Deals\",dealID,{\"Amount\":amount});\n// info zoho.recruit.getRecordById(\"CustomModule1\", \"595874000000320315\") ;\n// candidateMap = Map();\ninfo zoho.crm.getRecords(\"Contacts\");\n//test = zoho.recruit.getRecordById(\"Candidates\",\"595874000000321016\");\n//info test;\n// candidateMap.put(\"Last Name\", test.get(\"CustomModule1 Name\"));\n// candidateMap.put(\"Email\", test.get(\"Email\"));\n// // candidateMap.put(\"\", test.get(\"\"));\n// // candidateMap.put(\"\", test.get(\"\"));\n/*candidatesMap = Map();\ncandidatesMap.put(\"Last Name\",test.get(\"CustomModule1 Name\"));\ncandidatesMap.put(\"Email\",test.get(\"Email\"));\ncandidatesMap.put(\"Mobile\",\"+91 998877665\");\ncandidatesMap.put(\"Experience in years\",\"5\");\ncandidatesMap.put(\"Current Job Title\",\"Assistant Manager\");\ncandidatesMap.put(\"Skill Set\",\"MCA\");\ncandidatesMap.put(\"Experience Details\",\"Working in UTS for 5 years\");\nresponse = zoho.recruit.addRecord(\"Candidates\",candidatesMap);\ninfo response;*/"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000000209001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-09-26T12:00:59+02:00",
        "name": "test3",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test3()\n{\nloops = 150;\ncounter = leftpad(\"1\",loops).replaceAll(\" \",\"1,\").toList();\nchunkSize = 100;\nloops = 50;\ninfo counter.size();\ninfo (counter.size() / 100).round(0);\nchunks = leftpad(\"1\",(counter.size() / 100).round(0)).replaceAll(\" \",\"1,\").toList();\nindex = 0;\nfor each  chunk in chunks\n{\n\t//info index*chunkSize;\n\t//info (index+1)*chunkSize;\n\tinfo counter.subList(index * chunkSize,(index + 1) * chunkSize).size();\n\tindex = index + 1;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-09-26 03:01:01.0",
        "workflow": "loops = 150;\ncounter = leftpad(\"1\",loops).replaceAll(\" \",\"1,\").toList();\nchunkSize = 100;\nloops = 50;\ninfo counter.size();\ninfo (counter.size() / 100).round(0);\nchunks = leftpad(\"1\",(counter.size() / 100).round(0)).replaceAll(\" \",\"1,\").toList();\nindex = 0;\nfor each  chunk in chunks\n{\n\t//info index*chunkSize;\n\t//info (index+1)*chunkSize;\n\tinfo counter.subList(index * chunkSize,(index + 1) * chunkSize).size();\n\tindex = index + 1;\n}"
    },
    {
        "api_name": "test4",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000000652001",
                "connectionLinkName": "zoho_booking",
                "connectionName": "Zoho Booking",
                "isUserDefinedService": "false",
                "scopes": [
                    "zohobookings.data.CREATE",
                    "zohobookings.data.READ"
                ],
                "serviceName": "zoho_bookings",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test4",
        "id": "512029000000670003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-08-06T14:00:03+02:00",
        "name": "test4",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "email",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test4/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test4/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test4(String email)\n{\n/*contacts = zoho.crm.searchRecords(\"Contacts\",\"(Email:equals:mp@crmoz.com)\",1,1);\nemailsList = List();\ncontactEmail = contacts.get(0).get(\"Email\");\nemailsList.add(\"test1@com.com\");\nemailsList.add(\"test2@com.com\");\nreturn emailsList.toString();*/\n//a = zoho.bookings.updateRecord(\"appointment\", \"TE-00005\", {\"notes\":\"1211\",\"action\":\"noshow\"}, \"zoho_booking\");\na11 = invokeurl\n[\n\turl :\"https://www.zohoapis.com/bookings/v1/json/getappointment?booking_id=TE-00003\"\n\ttype :GET\n\tconnection:\"zoho_booking\"\n];\n/*params = Map();\nparams.put(\"booking_id\",\"#TE-00010\");\nparams.put(\"customer_more_info\",{\"Description\":\"sdf\"});\na = invokeurl\n[\n\turl: \"https://bookings.zoho.com/service/api/v1/zoho_user4113/bookings/functions/BusinessSetupTab/editAppointmentInfo/execute\"\n\ttype: POST\n\tparameters:{\"args-additional_info\":{\"appointmentId\":\"#TE-00010\",\"key\":\"NOTES\",\"value\":\"111\",\"notesType\":\"ADD\"}}\n\tconnection:\"zoho_booking\"\n];*/\ninfo a11;\nparams = Map();\nparams.put(\"booking_id\",\"TE-00003\");\nparams.put(\"additional_fields\",{\"notes\":\"aaaaaaaa\"});\na = invokeurl\n[\n\turl :\"https://www.zohoapis.com/bookings/v1/json/updateappointment\"\n\ttype :POST\n\tparameters:params.toString()\n\tconnection:\"zoho_booking\"\n];\ninfo a;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_booking",
                    "method": "get",
                    "url": "https://www.zohoapis.com/bookings/v1/json/getappointment?booking_id=TE-00003"
                },
                {
                    "connection": "zoho_booking",
                    "method": "post",
                    "url": "https://www.zohoapis.com/bookings/v1/json/updateappointment"
                }
            ]
        },
        "updatedTime": "2021-08-06 05:00:05.0",
        "workflow": "/*contacts = zoho.crm.searchRecords(\"Contacts\",\"(Email:equals:mp@crmoz.com)\",1,1);\nemailsList = List();\ncontactEmail = contacts.get(0).get(\"Email\");\nemailsList.add(\"test1@com.com\");\nemailsList.add(\"test2@com.com\");\nreturn emailsList.toString();*/\n//a = zoho.bookings.updateRecord(\"appointment\", \"TE-00005\", {\"notes\":\"1211\",\"action\":\"noshow\"}, \"zoho_booking\");\na11 = invokeurl\n[\n\turl :\"https://www.zohoapis.com/bookings/v1/json/getappointment?booking_id=TE-00003\"\n\ttype :GET\n\tconnection:\"zoho_booking\"\n];\n/*params = Map();\nparams.put(\"booking_id\",\"#TE-00010\");\nparams.put(\"customer_more_info\",{\"Description\":\"sdf\"});\na = invokeurl\n[\n\turl: \"https://bookings.zoho.com/service/api/v1/zoho_user4113/bookings/functions/BusinessSetupTab/editAppointmentInfo/execute\"\n\ttype: POST\n\tparameters:{\"args-additional_info\":{\"appointmentId\":\"#TE-00010\",\"key\":\"NOTES\",\"value\":\"111\",\"notesType\":\"ADD\"}}\n\tconnection:\"zoho_booking\"\n];*/\ninfo a11;\nparams = Map();\nparams.put(\"booking_id\",\"TE-00003\");\nparams.put(\"additional_fields\",{\"notes\":\"aaaaaaaa\"});\na = invokeurl\n[\n\turl :\"https://www.zohoapis.com/bookings/v1/json/updateappointment\"\n\ttype :POST\n\tparameters:params.toString()\n\tconnection:\"zoho_booking\"\n];\ninfo a;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000000183001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1679985998000,
        "name": "test2",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test2()\n{\n/*currentLead = zoho.crm.getRecordById(\"Leads\",4444945000003266001);\nup = Map();\nup.put(\"Email\",currentLead.get(\"Email\"));\nup.put(\"Phone\",currentLead.get(\"Phone\"));\nzoho.crm.updateRecord(\"Contacts\",4444945000003266012,up);*/\ninfo zoho.loginuserid;\ninfo zoho.loginuser;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-03-27 23:46:38.0",
        "workflow": "/*currentLead = zoho.crm.getRecordById(\"Leads\",4444945000003266001);\nup = Map();\nup.put(\"Email\",currentLead.get(\"Email\"));\nup.put(\"Phone\",currentLead.get(\"Phone\"));\nzoho.crm.updateRecord(\"Contacts\",4444945000003266012,up);*/\ninfo zoho.loginuserid;\ninfo zoho.loginuser;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "oz_testFunction",
        "id": "512029000000374001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1613380504000,
        "name": "oz_testFunction",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.oz_testFunction()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-02-15 01:15:04.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "Test12321",
        "id": "512029000000635001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1626964656000,
        "name": "Test3213",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.Test3213()\n{\n// q = List();\n// //can add multiple files\n// q.add(file_object1);\n// res = zoho.sign.createDocument(q);\n// req_id = res.get('requests').get('request_id');\n// doc_id = res.get('requests').get('document_ids').get(0).get('document_id');\ndoc_id = \"175983000000054002\";\nreciMap = Map();\nreciMap.put(\"recipient_name\",\"Denis Dikiy\");\nreciMap.put(\"recipient_email\",\"d.dikiy@crmoz.com\");\nreciMap.put(\"action_type\",\"SIGN\");\nreciMap.put(\"signing_order\",0);\nfieldList = List();\ntextField1 = Map();\ntextField1.put(\"field_name\",\"Company\");\ntextField1.put(\"is_mandatory\",\"true\");\ntextField1.put(\"field_type_name\",\"Company\");\ntextField1.put(\"document_id\",doc_id);\ntextField1.put(\"x_coord\",10);\ntextField1.put(\"y_coord\",30);\ntextField1.put(\"abs_width\",100);\ntextField1.put(\"abs_height\",15);\ntextField1.put(\"page_no\",0);\nfieldList.add(textField1);\nreciMap.put(\"fields\",fieldList);\nreciList = List();\nreciList.add(reciMap);\nrequest = Map();\nrequest.put(\"actions\",reciList);\ndata = Map();\ndata.put(\"requests\",request);\nupdateMap = Map();\nupdateMap.put(\"data\",data);\ninfo updateMap;\n// res = zoho.sign.submitRequest(req_id, updateMap);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-07-22 07:37:36.0",
        "workflow": "// q = List();\n// //can add multiple files\n// q.add(file_object1);\n// res = zoho.sign.createDocument(q);\n// req_id = res.get('requests').get('request_id');\n// doc_id = res.get('requests').get('document_ids').get(0).get('document_id');\ndoc_id = \"175983000000054002\";\nreciMap = Map();\nreciMap.put(\"recipient_name\",\"Denis Dikiy\");\nreciMap.put(\"recipient_email\",\"d.dikiy@crmoz.com\");\nreciMap.put(\"action_type\",\"SIGN\");\nreciMap.put(\"signing_order\",0);\nfieldList = List();\ntextField1 = Map();\ntextField1.put(\"field_name\",\"Company\");\ntextField1.put(\"is_mandatory\",\"true\");\ntextField1.put(\"field_type_name\",\"Company\");\ntextField1.put(\"document_id\",doc_id);\ntextField1.put(\"x_coord\",10);\ntextField1.put(\"y_coord\",30);\ntextField1.put(\"abs_width\",100);\ntextField1.put(\"abs_height\",15);\ntextField1.put(\"page_no\",0);\nfieldList.add(textField1);\nreciMap.put(\"fields\",fieldList);\nreciList = List();\nreciList.add(reciMap);\nrequest = Map();\nrequest.put(\"actions\",reciList);\ndata = Map();\ndata.put(\"requests\",request);\nupdateMap = Map();\nupdateMap.put(\"data\",data);\ninfo updateMap;\n// res = zoho.sign.submitRequest(req_id, updateMap);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": "test",
        "display_name": "test",
        "id": "512029000000594030",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1626079252000,
        "name": "test6",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test6()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-07-12 01:40:52.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "ChangeLeadStatusDelPrevTask",
        "id": "512029000000738001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1629376473000,
        "name": "ChangeLeadStatusDelPrevTask",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.ChangeLeadStatusDelPrevTask()\n{\nleadId = 4444945000009982186;\nparent_module_name = \"Leads\";\nrelation_name = \"Activities\";\ncontact = zoho.crm.getRelatedRecords(relation_name,parent_module_name,leadId);\ninfo contact;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRelatedRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-08-19 05:34:33.0",
        "workflow": "leadId = 4444945000009982186;\nparent_module_name = \"Leads\";\nrelation_name = \"Activities\";\ncontact = zoho.crm.getRelatedRecords(relation_name,parent_module_name,leadId);\ninfo contact;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testEMandPHchecker",
        "id": "512029000000292001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1629368535000,
        "name": "testEMandPHchecker1",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testEMandPHchecker1()\n{\nrecordId = \"4444945000003745244\";\nmodule = \"Contacts\";\nrecord = zoho.crm.getRecordById(module,recordId);\ntrigger = Map();\ntrigger.put(\"trigger\",\"[workflow,blueprint]\");\nfieldStatus = \"emailandphonechecker__Mobile_Status\";\nfieldCheck = \"Mobile\";\nvalueCheck = record.get(fieldCheck);\nif(valueCheck.isnull())\n{\n\tzoho.crm.updateRecord(module,recordId,{fieldStatus:null},trigger);\n}\nelse\n{\n\tfieldSync = \"emailandphonechecker__EnP_Checker_Ext_Sync_Contacts\";\n\tfieldRequestsMax = \"emailandphonechecker__EnP_Checker_Ext_Requests_Max\";\n\tfieldRequestsCurrent = \"emailandphonechecker__EnP_Checker_Ext_Requests_Current\";\n\tsync = zoho.crm.getOrgVariable(fieldSync);\n\trequestsMaxVar = zoho.crm.getOrgVariable(fieldRequestsMax).tolong();\n\trequestsCurrentVar = zoho.crm.getOrgVariable(fieldRequestsCurrent).tolong();\n\tif(requestsCurrentVar >= requestsMaxVar)\n\t{\n\t\trecordUp = Map();\n\t\trecordUp.put(fieldStatus,null);\n\t\tif(!record.get(fieldCheck).isnull())\n\t\t{\n\t\t\trecordUp.put(fieldStatus,\"Out of limit\");\n\t\t}\n\t\tzoho.crm.updateRecord(module,recordId,recordUp,trigger);\n\t}\n\tif(sync != \"\" && sync != \"0\")\n\t{\n\t\torg = zoho.crm.invokeConnector(\"crm.getorg\",Map());\n\t\torgId = org.get(\"response\").get(\"org\").get(0).get(\"id\");\n\t\trequest = Map();\n\t\trequest.put(\"orgId\",orgId);\n\t\trequest.put(\"token\",zoho.encryption.md5(\"key\" + orgId));\n\t\trequest.put(fieldCheck,record.get(fieldCheck));\n\t\tinfo request;\n\t\tresp = posturl(\"https://emandphchecker.crmoz.com/ext/phones/check\",request);\n\t\tinfo resp;\n\t\tif(resp.containskey(\"data\"))\n\t\t{\n\t\t\tresult = resp.get(\"data\");\n\t\t\tif(result.containskey(\"fields\") && !result.get(\"fields\").isempty())\n\t\t\t{\n\t\t\t\tzoho.crm.updateRecord(module,recordId,result.get(\"fields\"),trigger);\n\t\t\t}\n\t\t\tif(result.containkey(\"company\"))\n\t\t\t{\n\t\t\t\tif(result.get(\"company\").containkey(\"requests_max\"))\n\t\t\t\t{\n\t\t\t\t\trequestsMax = Map();\n\t\t\t\t\trequestsMax.put(\"apiname\",fieldRequestsMax);\n\t\t\t\t\trequestsMax.put(\"value\",result.get(\"company\").get(\"requests_max\"));\n\t\t\t\t\tresp = zoho.crm.invokeConnector(\"crm.set\",requestsMax);\n\t\t\t\t}\n\t\t\t\tif(result.get(\"company\").containkey(\"requests_current\"))\n\t\t\t\t{\n\t\t\t\t\trequestsCurrent = Map();\n\t\t\t\t\trequestsCurrent.put(\"apiname\",fieldRequestsCurrent);\n\t\t\t\t\trequestsCurrent.put(\"value\",result.get(\"company\").get(\"requests_current\"));\n\t\t\t\t\tresp = zoho.crm.invokeConnector(\"crm.set\",requestsCurrent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getOrgVariable",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "post",
                    "url": "https://emandphchecker.crmoz.com/ext/phones/check"
                }
            ]
        },
        "updatedTime": "2021-08-19 03:22:15.0",
        "workflow": "recordId = \"4444945000003745244\";\nmodule = \"Contacts\";\nrecord = zoho.crm.getRecordById(module,recordId);\ntrigger = Map();\ntrigger.put(\"trigger\",\"[workflow,blueprint]\");\nfieldStatus = \"emailandphonechecker__Mobile_Status\";\nfieldCheck = \"Mobile\";\nvalueCheck = record.get(fieldCheck);\nif(valueCheck.isnull())\n{\n\tzoho.crm.updateRecord(module,recordId,{fieldStatus:null},trigger);\n}\nelse\n{\n\tfieldSync = \"emailandphonechecker__EnP_Checker_Ext_Sync_Contacts\";\n\tfieldRequestsMax = \"emailandphonechecker__EnP_Checker_Ext_Requests_Max\";\n\tfieldRequestsCurrent = \"emailandphonechecker__EnP_Checker_Ext_Requests_Current\";\n\tsync = zoho.crm.getOrgVariable(fieldSync);\n\trequestsMaxVar = zoho.crm.getOrgVariable(fieldRequestsMax).tolong();\n\trequestsCurrentVar = zoho.crm.getOrgVariable(fieldRequestsCurrent).tolong();\n\tif(requestsCurrentVar >= requestsMaxVar)\n\t{\n\t\trecordUp = Map();\n\t\trecordUp.put(fieldStatus,null);\n\t\tif(!record.get(fieldCheck).isnull())\n\t\t{\n\t\t\trecordUp.put(fieldStatus,\"Out of limit\");\n\t\t}\n\t\tzoho.crm.updateRecord(module,recordId,recordUp,trigger);\n\t}\n\tif(sync != \"\" && sync != \"0\")\n\t{\n\t\torg = zoho.crm.invokeConnector(\"crm.getorg\",Map());\n\t\torgId = org.get(\"response\").get(\"org\").get(0).get(\"id\");\n\t\trequest = Map();\n\t\trequest.put(\"orgId\",orgId);\n\t\trequest.put(\"token\",zoho.encryption.md5(\"key\" + orgId));\n\t\trequest.put(fieldCheck,record.get(fieldCheck));\n\t\tinfo request;\n\t\tresp = posturl(\"https://emandphchecker.crmoz.com/ext/phones/check\",request);\n\t\tinfo resp;\n\t\tif(resp.containskey(\"data\"))\n\t\t{\n\t\t\tresult = resp.get(\"data\");\n\t\t\tif(result.containskey(\"fields\") && !result.get(\"fields\").isempty())\n\t\t\t{\n\t\t\t\tzoho.crm.updateRecord(module,recordId,result.get(\"fields\"),trigger);\n\t\t\t}\n\t\t\tif(result.containkey(\"company\"))\n\t\t\t{\n\t\t\t\tif(result.get(\"company\").containkey(\"requests_max\"))\n\t\t\t\t{\n\t\t\t\t\trequestsMax = Map();\n\t\t\t\t\trequestsMax.put(\"apiname\",fieldRequestsMax);\n\t\t\t\t\trequestsMax.put(\"value\",result.get(\"company\").get(\"requests_max\"));\n\t\t\t\t\tresp = zoho.crm.invokeConnector(\"crm.set\",requestsMax);\n\t\t\t\t}\n\t\t\t\tif(result.get(\"company\").containkey(\"requests_current\"))\n\t\t\t\t{\n\t\t\t\t\trequestsCurrent = Map();\n\t\t\t\t\trequestsCurrent.put(\"apiname\",fieldRequestsCurrent);\n\t\t\t\t\trequestsCurrent.put(\"value\",result.get(\"company\").get(\"requests_current\"));\n\t\t\t\t\tresp = zoho.crm.invokeConnector(\"crm.set\",requestsCurrent);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}"
    },
    {
        "api_name": "getzapikay",
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": null,
                "id": "4444945000003854008",
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "getZAPIKEY"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "getZAPIKEY",
        "id": "512029000000268001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-01-17T10:23:27+01:00",
        "name": "getZAPIKAY",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/getzapikay/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/getzapikay/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.getZAPIKAY()\n{\n//( TEXT module , NUMBER id , ? KEY-VALUE optionalDataMap , ? TEXT connections )\ninfo zoho.crm.getRecordById(\"Deals\",4444945000000087545);\n// m = {\"nameSpace\":\"alexander3.rollupandpopullateforzohocrm\"};\n// apikeyresp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\n// info apikeyresp.get(\"response\");\n//Extension=ZAPIKEY\n//R&P=1003.0e06648a684662a5cf4bfa35617143d3.cccd201da02c7992c298ba7bc939cffb\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2022-01-17 01:23:28.0",
        "workflow": "//( TEXT module , NUMBER id , ? KEY-VALUE optionalDataMap , ? TEXT connections )\ninfo zoho.crm.getRecordById(\"Deals\",4444945000000087545);\n// m = {\"nameSpace\":\"alexander3.rollupandpopullateforzohocrm\"};\n// apikeyresp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\n// info apikeyresp.get(\"response\");\n//Extension=ZAPIKEY\n//R&P=1003.0e06648a684662a5cf4bfa35617143d3.cccd201da02c7992c298ba7bc939cffb"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "contactId",
                        "value": "Contacts.Contact Id"
                    }
                ],
                "id": 4444945000009017300,
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "watcherOfContact",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": "variant 2",
        "display_name": "newContactToDesk",
        "id": "512029000000589001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-08-03T10:16:12+02:00",
        "name": "newContactToDesk1",
        "nameSpace": "automation",
        "params": [
            {
                "name": "contactId",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.newContactToDesk1(Int contactId)\n{\ncontactId = 600254000000782259;\n//accountId = 4444945000009106207;\norgId = 714987616;\nsearchValue = {\"id\":contactId};\nexistDeskContact = zoho.desk.searchRecords(orgId,\"contacts\",searchValue);\n//info existDeskContact;\nCRMContact = zoho.crm.searchRecords(\"Contacts\",\"(DeskId:equals:\" + contactId + \")\");\ndeskId = CRMContact.get(0).get(\"DeskId\");\ninfo deskId;\nif(deskId == null)\n{\n\tfirstName = CRMContact.get(0).get(\"First_Name\");\n\tlastName = CRMContact.get(0).get(\"Last_Name\");\n\temail = CRMContact.get(0).get(\"Email\");\n\tphone = CRMContact.get(0).get(\"Phone\");\n\tcontactMap = Map();\n\tcontactMap.put(\"firstName\",firstName);\n\tcontactMap.put(\"lastName\",lastName);\n\tcontactMap.put(\"email\",email);\n\tcontactMap.put(\"phone\",phone);\n\t//contactMap.put(\"accountId\",accountId);\n\t//contactMap.put(\"DeskId\",contactId.toString());\n\tDeskContact = zoho.desk.create(orgId,\"contacts\",contactMap);\n\tupdateCRMContactMap = Map();\n\tupdateCRMContactMap.put(\"DeskId\",DeskContact.get(\"id\").toString());\n\tinfo zoho.crm.updateRecord(\"Contacts\",contactId,updateCRMContactMap);\n}\nelse\n{\n\tfirstName = CRMContact.get(0).get(\"First_Name\");\n\tlastName = CRMContact.get(0).get(\"Last_Name\");\n\temail = CRMContact.get(0).get(\"Email\");\n\tphone = CRMContact.get(0).get(\"Phone\");\n\tcontactMap = Map();\n\tcontactMap.put(\"firstName\",firstName);\n\tcontactMap.put(\"lastName\",lastName);\n\tcontactMap.put(\"email\",email);\n\tcontactMap.put(\"phone\",phone);\n\t//contactMap.put(\"accountId\",accountId);\n\tinfo zoho.desk.update(orgId,\"contacts\",deskId,contactMap);\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho Desk",
                    "function": "zoho.desk.create",
                    "service": "Desk"
                },
                {
                    "display_name": "Zoho Desk",
                    "function": "zoho.desk.update",
                    "service": "Desk"
                },
                {
                    "display_name": "Zoho Desk",
                    "function": "zoho.desk.searchRecords",
                    "service": "Desk"
                }
            ],
            "params": [
                "contactId"
            ]
        },
        "updatedTime": "2021-08-03 01:16:12.0",
        "workflow": "contactId = 600254000000782259;\n//accountId = 4444945000009106207;\norgId = 714987616;\nsearchValue = {\"id\":contactId};\nexistDeskContact = zoho.desk.searchRecords(orgId,\"contacts\",searchValue);\n//info existDeskContact;\nCRMContact = zoho.crm.searchRecords(\"Contacts\",\"(DeskId:equals:\" + contactId + \")\");\ndeskId = CRMContact.get(0).get(\"DeskId\");\ninfo deskId;\nif(deskId == null)\n{\n\tfirstName = CRMContact.get(0).get(\"First_Name\");\n\tlastName = CRMContact.get(0).get(\"Last_Name\");\n\temail = CRMContact.get(0).get(\"Email\");\n\tphone = CRMContact.get(0).get(\"Phone\");\n\tcontactMap = Map();\n\tcontactMap.put(\"firstName\",firstName);\n\tcontactMap.put(\"lastName\",lastName);\n\tcontactMap.put(\"email\",email);\n\tcontactMap.put(\"phone\",phone);\n\t//contactMap.put(\"accountId\",accountId);\n\t//contactMap.put(\"DeskId\",contactId.toString());\n\tDeskContact = zoho.desk.create(orgId,\"contacts\",contactMap);\n\tupdateCRMContactMap = Map();\n\tupdateCRMContactMap.put(\"DeskId\",DeskContact.get(\"id\").toString());\n\tinfo zoho.crm.updateRecord(\"Contacts\",contactId,updateCRMContactMap);\n}\nelse\n{\n\tfirstName = CRMContact.get(0).get(\"First_Name\");\n\tlastName = CRMContact.get(0).get(\"Last_Name\");\n\temail = CRMContact.get(0).get(\"Email\");\n\tphone = CRMContact.get(0).get(\"Phone\");\n\tcontactMap = Map();\n\tcontactMap.put(\"firstName\",firstName);\n\tcontactMap.put(\"lastName\",lastName);\n\tcontactMap.put(\"email\",email);\n\tcontactMap.put(\"phone\",phone);\n\t//contactMap.put(\"accountId\",accountId);\n\tinfo zoho.desk.update(orgId,\"contacts\",deskId,contactMap);\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000000254001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1601369778000,
        "name": "test4",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test4()\n{\n/*task_values = Map();\n\t\ttask_values.put(\"Subject\",\"\");\n\t\ttask_values.put(\"Who_Id\",4444945000003745244);\n\t\ttask_values.put(\"Status\",\"Новая\");\n\t\tnewTask = zoho.crm.createRecord(\"Tasks\",task_values,{\"trigger\":{\"workflow\"}});\n\t\tif (newTask.getJson(\"id\") == null){\n\t\tinfo newTask.getJson(\"id\");\n\t\t}*/\ninvoice = zoho.crm.getRecordById(\"Invoices\",4444945000001432002);\ninfo invoice.get(\"Contact_Name\").get(\"id\");\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2020-09-29 01:56:18.0",
        "workflow": "/*task_values = Map();\n\t\ttask_values.put(\"Subject\",\"\");\n\t\ttask_values.put(\"Who_Id\",4444945000003745244);\n\t\ttask_values.put(\"Status\",\"Новая\");\n\t\tnewTask = zoho.crm.createRecord(\"Tasks\",task_values,{\"trigger\":{\"workflow\"}});\n\t\tif (newTask.getJson(\"id\") == null){\n\t\tinfo newTask.getJson(\"id\");\n\t\t}*/\ninvoice = zoho.crm.getRecordById(\"Invoices\",4444945000001432002);\ninfo invoice.get(\"Contact_Name\").get(\"id\");"
    },
    {
        "api_name": "testzohosign",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": null,
                "id": 4444945000003482000,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "testzohoSign",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "testzohoSign",
        "id": "512029000000212001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2020-09-09T14:00:48+02:00",
        "name": "testzohoSign",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testzohosign/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testzohosign/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testzohoSign()\n{\n// Fetch file from cloud\npdf_file = invokeurl\n[\n\turl :\"http://34.244.5.42/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319\"\n\ttype :GET\n];\n// Create a map to store request name\ndataMap = Map();\ndataMap.put(\"requests\",{\"request_name\":\"My request\",\"is_sequential\":true,\"actions\":{{\"recipient_name\":\"Oliver G\",\"recipient_email\":\"user4@demo4.crmoz.com\",\"action_type\":\"SIGN\",\"signing_order\":0,\"verify_recipient\":false}}});\nrequestMap = Map();\nrequestMap.put(\"data\",dataMap);\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,requestMap);\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho Sign",
                    "function": "zoho.sign.createDocument",
                    "service": "ZohoSign"
                }
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "http://34.244.5.42/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319"
                }
            ]
        },
        "updatedTime": "2020-09-09 05:00:48.0",
        "workflow": "// Fetch file from cloud\npdf_file = invokeurl\n[\n\turl :\"http://34.244.5.42/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319\"\n\ttype :GET\n];\n// Create a map to store request name\ndataMap = Map();\ndataMap.put(\"requests\",{\"request_name\":\"My request\",\"is_sequential\":true,\"actions\":{{\"recipient_name\":\"Oliver G\",\"recipient_email\":\"user4@demo4.crmoz.com\",\"action_type\":\"SIGN\",\"signing_order\":0,\"verify_recipient\":false}}});\nrequestMap = Map();\nrequestMap.put(\"data\",dataMap);\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,requestMap);\ninfo response;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "test23",
        "id": "512029000000426001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1617862847000,
        "name": "test23",
        "nameSpace": "button",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string button.test23()\n{\ninfo zoho.adminuserid;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-04-07 23:20:47.0",
        "workflow": "info zoho.adminuserid;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": null,
                "id": "4444945000008953852",
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "TestFunctionRule"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "TestFunctionRule",
        "id": "512029000000564003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-07-06T16:18:34+02:00",
        "name": "TestFunctionRule",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.TestFunctionRule()\n{\nexistContact = zoho.crm.searchRecords(\"Contacts\",\"(First_Name:equals:Test Rule)\");\ncontactId = existContact.get(0).get(\"id\");\nnewContact = Map();\nnewContact.put(\"Email\",\"qwerty@mail.com\");\nnewContact.put(\"Subscribed\",\"Not Subscribed\");\nzoho.crm.updateRecord(\"Contacts\",contactId,newContact);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-07-06 07:18:34.0",
        "workflow": "existContact = zoho.crm.searchRecords(\"Contacts\",\"(First_Name:equals:Test Rule)\");\ncontactId = existContact.get(0).get(\"id\");\nnewContact = Map();\nnewContact.put(\"Email\",\"qwerty@mail.com\");\nnewContact.put(\"Subscribed\",\"Not Subscribed\");\nzoho.crm.updateRecord(\"Contacts\",contactId,newContact);"
    },
    {
        "api_name": "zohosigncreatedocument1",
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [],
                "id": "4444945000006890136",
                "module": "Extension",
                "name": "Test Button"
            }
        ],
        "category": "button",
        "config": true,
        "description": null,
        "display_name": "zohoSignCreateDocument",
        "id": "512029000000407001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-03-09T15:41:55+01:00",
        "name": "zohoSignCreateDocument1",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/zohosigncreatedocument1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/zohosigncreatedocument1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.zohoSignCreateDocument1()\n{\n// Fetch file from cloud\npdf_file = invokeurl\n[\n\turl :\"http://0cdb8aa1bfa6.ngrok.io/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319&is_sign=true\"\n\ttype :GET\n];\n// Create a map to store request name\ndataMap = Map();\ndataMap.put(\"requests\",{\"request_name\":\"My request\",\"is_sequential\":true,\"actions\":{{\"recipient_name\":\"Oliver G\",\"recipient_email\":\"user4@demo4.crmoz.com\",\"action_type\":\"SIGN\",\"signing_order\":0,\"verify_recipient\":false}}});\nrequestMap = Map();\nrequestMap.put(\"data\",dataMap);\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,requestMap);\ninfo response;\nreturn \"Successful\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho Sign",
                    "function": "zoho.sign.createDocument",
                    "service": "ZohoSign"
                }
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "http://0cdb8aa1bfa6.ngrok.io/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319&is_sign=true"
                }
            ]
        },
        "updatedTime": "2021-03-09 06:41:55.0",
        "workflow": "// Fetch file from cloud\npdf_file = invokeurl\n[\n\turl :\"http://0cdb8aa1bfa6.ngrok.io/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319&is_sign=true\"\n\ttype :GET\n];\n// Create a map to store request name\ndataMap = Map();\ndataMap.put(\"requests\",{\"request_name\":\"My request\",\"is_sequential\":true,\"actions\":{{\"recipient_name\":\"Oliver G\",\"recipient_email\":\"user4@demo4.crmoz.com\",\"action_type\":\"SIGN\",\"signing_order\":0,\"verify_recipient\":false}}});\nrequestMap = Map();\nrequestMap.put(\"data\",dataMap);\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,requestMap);\ninfo response;\nreturn \"Successful\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "TestCreateProduct",
        "id": "512029000000721015",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1629116753000,
        "name": "TestCreateProduct",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.TestCreateProduct()\n{\ncrmAPIRequest = {\"vendor_name\":\"Sugarlash PRO\",\"product_name\":\"D-CURL RUNWAY - FULL  0210\",\"product_code\":\"10137\",\"title\":\"D-CURL RUNWAY\",\"unit_price\":29,\"product_active\":true,\"product_id_shopify\":\"9976077025340\",\"product_source\":\"shop1\"};\nproductId = null;\nshopifyId = crmAPIRequest.get(\"product_id_shopify\");\nshopifySource = crmAPIRequest.get(\"product_source\");\nsku = crmAPIRequest.get(\"product_code\");\ntitle = crmAPIRequest.get(\"title\");\nproductName = crmAPIRequest.get(\"product_name\");\nunitPrice = crmAPIRequest.get(\"unit_price\");\nactive = crmAPIRequest.get(\"product_active\");\nvendorName = crmAPIRequest.get(\"vendor_name\");\nexistProduct = zoho.crm.searchRecords(\"Products\",\"(shopifytocrm0__Shopify_Id:equals:\" + shopifyId + \")\");\nif(existProduct.size() == 0 && sku != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(shopifytocrm0__Shopify_SKU:equals:\" + sku + \")\");\n}\nif(existProduct.size() == 0 && title != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(Product_Name:equals:\" + title + \")\");\n}\nif(existProduct.size() == 0 && productName != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(Product_Name:equals:\" + productName + \")\");\n}\nif(existProduct.size() > 0)\n{\n\tfor each  product in existProduct\n\t{\n\t\tif(product.get(\"shopifytocrm0__Shopify_Source\") == shopifySource)\n\t\t{\n\t\t\tproductId = product.get(\"id\");\n\t\t}\n\t}\n}\nif(existProduct.size() == 0 && productId == null)\n{\n\ttry \n\t{\n\t\tnewProduct = Map();\n\t\tnewProduct.put(\"Product_Name\",productName);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_SKU\",sku);\n\t\tnewProduct.put(\"Unit_Price\",unitPrice);\n\t\tnewProduct.put(\"Product_Active\",active);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Id\",shopifyId);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Source\",shopifySource);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Vendor\",vendorName);\n\t\tresult = zoho.crm.createRecord(\"Products\",newProduct);\n\t\tproductId = result.get(\"id\");\n\t}\n catch (e)\n\t{\t\tproductId = null;\n\t}\n}\ninfo productId.toString();\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-08-16 05:25:53.0",
        "workflow": "crmAPIRequest = {\"vendor_name\":\"Sugarlash PRO\",\"product_name\":\"D-CURL RUNWAY - FULL  0210\",\"product_code\":\"10137\",\"title\":\"D-CURL RUNWAY\",\"unit_price\":29,\"product_active\":true,\"product_id_shopify\":\"9976077025340\",\"product_source\":\"shop1\"};\nproductId = null;\nshopifyId = crmAPIRequest.get(\"product_id_shopify\");\nshopifySource = crmAPIRequest.get(\"product_source\");\nsku = crmAPIRequest.get(\"product_code\");\ntitle = crmAPIRequest.get(\"title\");\nproductName = crmAPIRequest.get(\"product_name\");\nunitPrice = crmAPIRequest.get(\"unit_price\");\nactive = crmAPIRequest.get(\"product_active\");\nvendorName = crmAPIRequest.get(\"vendor_name\");\nexistProduct = zoho.crm.searchRecords(\"Products\",\"(shopifytocrm0__Shopify_Id:equals:\" + shopifyId + \")\");\nif(existProduct.size() == 0 && sku != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(shopifytocrm0__Shopify_SKU:equals:\" + sku + \")\");\n}\nif(existProduct.size() == 0 && title != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(Product_Name:equals:\" + title + \")\");\n}\nif(existProduct.size() == 0 && productName != \"\")\n{\n\texistProduct = zoho.crm.searchRecords(\"Products\",\"(Product_Name:equals:\" + productName + \")\");\n}\nif(existProduct.size() > 0)\n{\n\tfor each  product in existProduct\n\t{\n\t\tif(product.get(\"shopifytocrm0__Shopify_Source\") == shopifySource)\n\t\t{\n\t\t\tproductId = product.get(\"id\");\n\t\t}\n\t}\n}\nif(existProduct.size() == 0 && productId == null)\n{\n\ttry \n\t{\n\t\tnewProduct = Map();\n\t\tnewProduct.put(\"Product_Name\",productName);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_SKU\",sku);\n\t\tnewProduct.put(\"Unit_Price\",unitPrice);\n\t\tnewProduct.put(\"Product_Active\",active);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Id\",shopifyId);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Source\",shopifySource);\n\t\tnewProduct.put(\"shopifytocrm0__Shopify_Vendor\",vendorName);\n\t\tresult = zoho.crm.createRecord(\"Products\",newProduct);\n\t\tproductId = result.get(\"id\");\n\t}\n catch (e)\n\t{\t\tproductId = null;\n\t}\n}\ninfo productId.toString();"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [],
                "id": "4444945000006115007",
                "module": "Leads",
                "name": "test"
            }
        ],
        "category": "button",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "5000000024233082",
                "connectionLinkName": "wd",
                "connectionName": "wd",
                "isUserDefinedService": "false",
                "scopes": [
                    "TeamDrive.team.ALL",
                    "TeamDrive.files.ALL",
                    "WorkDrive.team.ALL",
                    "WorkDrive.files.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test",
        "id": "512029000000359001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-01-22T11:32:34+01:00",
        "name": "test",
        "nameSpace": "button",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string button.test()\n{\nmp = Map();\nmp.put(\"Accept\",\"application/vnd.api+json\");\ndl = Map();\ndl.put(\"download_link\",{\"download_limit\",\"5\"});\nexternalLinkMap = Map();\nexternalLinkMap.put(\"resource_id\",\"n3sas0d9aba2af4a84ed8ae500259024d0957\");\nexternalLinkMap.put(\"link_name\",\"workDriveLink\");\nexternalLinkMap.put(\"link_type\",\"download\");\nexternalLinkMap.put(\"request_user_data\",false);\nexternalLinkMap.put(\"allow_download\",true);\nexternalLinkMap.put(\"download_link\",{\"download_limit\":\"5\"});\nattributesMap = {\"attributes\":externalLinkMap,\"type\":\"links\"};\ndataMap = Map();\ndataMap.put(\"data\",attributesMap);\nresp = invokeurl\n[\n\turl :\"https://workdrive.zoho.com/api/v1/links\"\n\ttype :POST\n\tparameters:dataMap.toString()\n\theaders:mp\n\tconnection:\"wd\"\n];\ninfo resp;\nsharedLink = resp.get(\"data\").get(\"attributes\").get(\"link\");\nlinkId = sharedLink.getSuffix(\"external/\").getPrefix(\"/download\");\n//openUrl(sharedLink,\"new_window\");\nopenUrl('https://files.zohoexternal.com/public/workdrive-external/download/n3sas0d9aba2af4a84ed8ae500259024d0957?x-cli-msg={\"linkId\":\"' + linkId + '\"}',\"new window\");\nreturn \"\";\n//return resp;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "wd",
                    "method": "post",
                    "url": "https://workdrive.zoho.com/api/v1/links"
                },
                {
                    "method": "open",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2021-01-22 02:32:34.0",
        "workflow": "mp = Map();\nmp.put(\"Accept\",\"application/vnd.api+json\");\ndl = Map();\ndl.put(\"download_link\",{\"download_limit\",\"5\"});\nexternalLinkMap = Map();\nexternalLinkMap.put(\"resource_id\",\"n3sas0d9aba2af4a84ed8ae500259024d0957\");\nexternalLinkMap.put(\"link_name\",\"workDriveLink\");\nexternalLinkMap.put(\"link_type\",\"download\");\nexternalLinkMap.put(\"request_user_data\",false);\nexternalLinkMap.put(\"allow_download\",true);\nexternalLinkMap.put(\"download_link\",{\"download_limit\":\"5\"});\nattributesMap = {\"attributes\":externalLinkMap,\"type\":\"links\"};\ndataMap = Map();\ndataMap.put(\"data\",attributesMap);\nresp = invokeurl\n[\n\turl :\"https://workdrive.zoho.com/api/v1/links\"\n\ttype :POST\n\tparameters:dataMap.toString()\n\theaders:mp\n\tconnection:\"wd\"\n];\ninfo resp;\nsharedLink = resp.get(\"data\").get(\"attributes\").get(\"link\");\nlinkId = sharedLink.getSuffix(\"external/\").getPrefix(\"/download\");\n//openUrl(sharedLink,\"new_window\");\nopenUrl('https://files.zohoexternal.com/public/workdrive-external/download/n3sas0d9aba2af4a84ed8ae500259024d0957?x-cli-msg={\"linkId\":\"' + linkId + '\"}',\"new window\");\nreturn \"\";\n//return resp;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": "This function helps you create projects in Zoho CRM for every potential you win. The Projects will appear in your portal under Zoho Projects.\n\nHere are the step by step instructions to configure the custom function:\n1. Select Potential as your module.\n2. Specify values for the arguments as needed.\n   a) PortalName: Portal in which you want to create project.\n   b) ProjName: This should be a dynamic and unique value. Map the \"Potential Name\" field or any potential module field.\n   c) TemplateID: Click \"specify custom value\" link and type a template id which you use in Zoho Projects while creating Projects. If you have any field in potential module which contains templates used in Zoho Projects, you can map that potential field.\n   d) Description: As projects will be created for every potential you win, it should be a dynamic value. So, map it any potential module field. Otherwise, You can write a common description about projects.\ne)startdate: This should be a dynamic and unique value. Map the \"Start Date\" field or any potential module field.\nf)enddate: This should be a dynamic and unique value. Map the \"End Date\" field or any potential module field.\n3. Save the configuration to create the project for the closed potential.\n\nHow to make it work?\nAssociate this custom function under appropriate workflow rule to automatically create projects for every potentials you win.",
        "display_name": "Create Projects while winning Potentials",
        "id": "512029000000634001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1626682306000,
        "name": "Create_Projects_for_Closed_Potentials",
        "nameSpace": "automation",
        "params": [
            {
                "name": "ProjName",
                "type": "STRING"
            },
            {
                "name": "PortalName",
                "type": "STRING"
            },
            {
                "name": "TemplateID",
                "type": "STRING"
            },
            {
                "name": "Description",
                "type": "STRING"
            },
            {
                "name": "startdate",
                "type": "TIMESTAMP"
            },
            {
                "name": "enddate",
                "type": "TIMESTAMP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.Create_Projects_for_Closed_Potentials(string ProjName, string PortalName, string TemplateID, string Description, date startdate, date enddate)\n{\ncreateMap = Map();\ncreateMap.put(\"name\",ProjName);\n// Provide name of the project to be created\ncreateMap.put(\"description\",Description);\ncreateMap.put(\"start_date\",startdate.toString(\"MM-dd-yyyy\"));\ncreateMap.put(\"end_date\",enddate.toString(\"MM-dd-yyyy\"));\ncreateMap.put(\"template_id\",TemplateID);\nresponse = zoho.projects.createProject(PortalName,createMap);\ninfo response;\n// Notes :\n//Please change the below line in the code, after creation of connection.\n//response = zoho.projects.createProject(PortalName,createMap,\"xxxxxxxxx\");\n// Please replace 'xxxxxxxxx' with the project connection api name with scopes ( ZohoProjects.projects.ALL, ZohoProjects.projects.CREATE )\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho Projects",
                    "function": "zoho.projects.createProject",
                    "service": "ZohoProjects"
                }
            ],
            "params": [
                "ProjName",
                "Description",
                "startdate",
                "enddate",
                "TemplateID",
                "PortalName"
            ]
        },
        "updatedTime": "2021-07-19 01:11:46.0",
        "workflow": "createMap = Map();\ncreateMap.put(\"name\",ProjName);\n// Provide name of the project to be created\ncreateMap.put(\"description\",Description);\ncreateMap.put(\"start_date\",startdate.toString(\"MM-dd-yyyy\"));\ncreateMap.put(\"end_date\",enddate.toString(\"MM-dd-yyyy\"));\ncreateMap.put(\"template_id\",TemplateID);\nresponse = zoho.projects.createProject(PortalName,createMap);\ninfo response;\n// Notes :\n//Please change the below line in the code, after creation of connection.\n//response = zoho.projects.createProject(PortalName,createMap,\"xxxxxxxxx\");\n// Please replace 'xxxxxxxxx' with the project connection api name with scopes ( ZohoProjects.projects.ALL, ZohoProjects.projects.CREATE )"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "scheduler",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000000650001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1627478519000,
        "name": "test1",
        "nameSpace": "schedule",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void schedule.test1()\n{\ninfo \"test\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-12-27 15:28:47.0",
        "workflow": "info \"test\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "TestCheckerEmail",
        "id": "512029000000737001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1629369384000,
        "name": "TestCheckerEmail",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.TestCheckerEmail()\n{\nrecordId = \"4444945000009777064\";\nmodule = \"Contacts\";\nrecord = zoho.crm.getRecordById(module,recordId);\nfieldStatus = \"Status\";\nemail = record.get(\"Email\");\nphone = record.get(\"Phone\");\nif(email.isnull() && phone.isnull())\n{\n\tzoho.crm.updateRecord(module,recordId,{fieldStatus:\"Informed\"});\n}\nelse\n{\n\torg = zoho.crm.invokeConnector(\"crm.getorg\",Map());\n\torgId = org.get(\"response\").get(\"org\").get(0).get(\"id\");\n\trequest = Map();\n\trequest.put(\"orgId\",orgId);\n\trequest.put(\"token\",zoho.encryption.md5(\"key\" + orgId));\n\trequest.put(\"Email\",email);\n\tresp = posturl(\"https://emandphchecker.crmoz.com/ext/phones/check\",request);\n\tif(resp.containskey(\"data\"))\n\t{\n\t\tresult = resp.get(\"data\");\n\t\tif(result.containskey(\"fields\") && !result.get(\"fields\").isempty())\n\t\t{\n\t\t\t//info result;\n\t\t}\n\t}\n\tinfo resp;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "post",
                    "url": "https://emandphchecker.crmoz.com/ext/phones/check"
                }
            ]
        },
        "updatedTime": "2021-08-19 03:36:24.0",
        "workflow": "recordId = \"4444945000009777064\";\nmodule = \"Contacts\";\nrecord = zoho.crm.getRecordById(module,recordId);\nfieldStatus = \"Status\";\nemail = record.get(\"Email\");\nphone = record.get(\"Phone\");\nif(email.isnull() && phone.isnull())\n{\n\tzoho.crm.updateRecord(module,recordId,{fieldStatus:\"Informed\"});\n}\nelse\n{\n\torg = zoho.crm.invokeConnector(\"crm.getorg\",Map());\n\torgId = org.get(\"response\").get(\"org\").get(0).get(\"id\");\n\trequest = Map();\n\trequest.put(\"orgId\",orgId);\n\trequest.put(\"token\",zoho.encryption.md5(\"key\" + orgId));\n\trequest.put(\"Email\",email);\n\tresp = posturl(\"https://emandphchecker.crmoz.com/ext/phones/check\",request);\n\tif(resp.containskey(\"data\"))\n\t{\n\t\tresult = resp.get(\"data\");\n\t\tif(result.containskey(\"fields\") && !result.get(\"fields\").isempty())\n\t\t{\n\t\t\t//info result;\n\t\t}\n\t}\n\tinfo resp;\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000000436001",
                "connectionLinkName": "testdda",
                "connectionName": "test",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoSign.account.ALL",
                    "ZohoSign.documents.ALL",
                    "ZohoSign.documents.UPDATE",
                    "ZohoSign.templates.ALL"
                ],
                "serviceName": "zoho_sign",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "DIKIY_TEST_ZOHO_SIGN",
        "id": "512029000000442001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1619782016000,
        "name": "DIKIY_TEST_ZOHO_SIGN",
        "nameSpace": "automation",
        "params": [
            {
                "name": "file",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.DIKIY_TEST_ZOHO_SIGN(string file)\n{\nresponse = zoho.crm.getRecordById(\"Products\",4444945000006593206);\ninfo file;\nq = response.get(\"File_Upload_1\").get(0).get(\"download_Url\");\ninfo concat(\"https://crm.zoho.com\",q);\npdf_file = invokeurl\n[\n\turl :\"http://www.africau.edu/images/default/sample.pdf\"\n\ttype :GET\n];\ninfo pdf_file;\ndataMap = Map();\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,dataMap,\"testdda\");\ninfo response;\n//zoho.sign.createDocument(<files>, <data_map>, zoho_sign);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                },
                {
                    "connection": "testdda",
                    "display_name": "Zoho Sign",
                    "function": "zoho.sign.createDocument",
                    "service": "ZohoSign"
                }
            ],
            "params": [
                "file"
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "http://www.africau.edu/images/default/sample.pdf"
                }
            ]
        },
        "updatedTime": "2021-04-30 04:26:56.0",
        "workflow": "response = zoho.crm.getRecordById(\"Products\",4444945000006593206);\ninfo file;\nq = response.get(\"File_Upload_1\").get(0).get(\"download_Url\");\ninfo concat(\"https://crm.zoho.com\",q);\npdf_file = invokeurl\n[\n\turl :\"http://www.africau.edu/images/default/sample.pdf\"\n\ttype :GET\n];\ninfo pdf_file;\ndataMap = Map();\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,dataMap,\"testdda\");\ninfo response;\n//zoho.sign.createDocument(<files>, <data_map>, zoho_sign);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "testEMandPHchecker",
        "id": "512029000000291001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1603435418000,
        "name": "testEMandPHchecker",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testEMandPHchecker()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2020-10-22 23:43:38.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000019667855",
                "connectionLinkName": "testzoho",
                "connectionName": "testZoho",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.fields.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.org.READ",
                    "ZohoCRM.bulk.READ",
                    "ZohoCRM.bulk.ALL",
                    "ZohoCRM.coql.READ"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test",
        "id": "512029000000121001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1628862550000,
        "name": "test1",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test1()\n{\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2/Potentials/4444945000000262292\"\n\ttype :DELETE\n\tconnection:\"testzoho\"\n];\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "testzoho",
                    "method": "delete",
                    "url": "https://www.zohoapis.com/crm/v2/Potentials/4444945000000262292"
                }
            ]
        },
        "updatedTime": "2021-08-13 06:49:10.0",
        "workflow": "response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2/Potentials/4444945000000262292\"\n\ttype :DELETE\n\tconnection:\"testzoho\"\n];\ninfo response;"
    },
    {
        "api_name": "zohosigncreatedocument",
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [],
                "id": "4444945000003488020",
                "module": "Extension",
                "name": "Send to Zoho Sign"
            }
        ],
        "category": "button",
        "config": true,
        "description": null,
        "display_name": "zohoSignCreateDocument",
        "id": "512029000000213001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2020-09-11T14:16:02+02:00",
        "name": "zohoSignCreateDocument",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/zohosigncreatedocument/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/zohosigncreatedocument/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.zohoSignCreateDocument()\n{\n// Fetch file from cloud\npdf_file = invokeurl\n[\n\turl :\"http://0cdb8aa1bfa6.ngrok.io/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319&is_sign=true\"\n\ttype :GET\n];\n// Create a map to store request name\ndataMap = Map();\ndataMap.put(\"requests\",{\"request_name\":\"My request\",\"is_sequential\":true,\"actions\":{{\"recipient_name\":\"Oliver G\",\"recipient_email\":\"user4@demo4.crmoz.com\",\"action_type\":\"SIGN\",\"signing_order\":0,\"verify_recipient\":false}}});\nrequestMap = Map();\nrequestMap.put(\"data\",dataMap);\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,requestMap);\ninfo response;\nreturn \"Successful\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho Sign",
                    "function": "zoho.sign.createDocument",
                    "service": "ZohoSign"
                }
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "http://0cdb8aa1bfa6.ngrok.io/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319&is_sign=true"
                }
            ]
        },
        "updatedTime": "2020-09-11 05:16:03.0",
        "workflow": "// Fetch file from cloud\npdf_file = invokeurl\n[\n\turl :\"http://0cdb8aa1bfa6.ngrok.io/quotes/quotes-pdf?token=Ro8pTnTPaTnhWTYiND7sEYKEn5UhSPo1&quote_id=2033773000004054319&is_sign=true\"\n\ttype :GET\n];\n// Create a map to store request name\ndataMap = Map();\ndataMap.put(\"requests\",{\"request_name\":\"My request\",\"is_sequential\":true,\"actions\":{{\"recipient_name\":\"Oliver G\",\"recipient_email\":\"user4@demo4.crmoz.com\",\"action_type\":\"SIGN\",\"signing_order\":0,\"verify_recipient\":false}}});\nrequestMap = Map();\nrequestMap.put(\"data\",dataMap);\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,requestMap);\ninfo response;\nreturn \"Successful\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testDen",
        "id": "512029000000349008",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1608539167000,
        "name": "testDen",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testDen()\n{\nfieldRequestsMax = \"emailandphonechecker__EnP_Checker_Ext_Requests_Max\";\nfieldRequestsCurrent = \"emailandphonechecker__EnP_Checker_Ext_Requests_Current\";\norg = zoho.crm.invokeConnector(\"crm.getorg\",Map());\norgId = org.get(\"response\").get(\"org\").get(0).get(\"id\");\nrequest = Map();\nrequest.put(\"orgId\",orgId);\nrequest.put(\"token\",zoho.encryption.md5(\"key\" + orgId));\nrequest.put(\"Phone\",\"380970985027\");\nrequest.put(\"Mobile\",\"84848484\");\nresp = postUrl(\"https://emandphchecker.crmoz.com/ext/phones/check\",request);\ninfo resp;\nif(resp.containsKey(\"data\"))\n{\n\tresult = resp.get(\"data\");\n\tif(result.containsKey(\"fields\") && !result.get(\"fields\").isEmpty())\n\t{\n\t\tinfo \"UP\";\n\t\t//zoho.crm.updateRecord(module,recordId,result.get(\"fields\"),trigger);\n\t}\n\tif(result.containKey(\"company\"))\n\t{\n\t\tif(result.get(\"company\").containKey(\"requests_max\"))\n\t\t{\n\t\t\trequestsMax = Map();\n\t\t\trequestsMax.put(\"apiname\",fieldRequestsMax);\n\t\t\trequestsMax.put(\"value\",result.get(\"company\").get(\"requests_max\"));\n\t\t\tresp = zoho.crm.invokeConnector(\"crm.set\",requestsMax);\n\t\t}\n\t\tif(result.get(\"company\").containKey(\"requests_current\"))\n\t\t{\n\t\t\trequestsCurrent = Map();\n\t\t\trequestsCurrent.put(\"apiname\",fieldRequestsCurrent);\n\t\t\trequestsCurrent.put(\"value\",result.get(\"company\").get(\"requests_current\"));\n\t\t\tresp = zoho.crm.invokeConnector(\"crm.set\",requestsCurrent);\n\t\t}\n\t}\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "post",
                    "url": "https://emandphchecker.crmoz.com/ext/phones/check"
                }
            ]
        },
        "updatedTime": "2020-12-21 00:26:07.0",
        "workflow": "fieldRequestsMax = \"emailandphonechecker__EnP_Checker_Ext_Requests_Max\";\nfieldRequestsCurrent = \"emailandphonechecker__EnP_Checker_Ext_Requests_Current\";\norg = zoho.crm.invokeConnector(\"crm.getorg\",Map());\norgId = org.get(\"response\").get(\"org\").get(0).get(\"id\");\nrequest = Map();\nrequest.put(\"orgId\",orgId);\nrequest.put(\"token\",zoho.encryption.md5(\"key\" + orgId));\nrequest.put(\"Phone\",\"380970985027\");\nrequest.put(\"Mobile\",\"84848484\");\nresp = postUrl(\"https://emandphchecker.crmoz.com/ext/phones/check\",request);\ninfo resp;\nif(resp.containsKey(\"data\"))\n{\n\tresult = resp.get(\"data\");\n\tif(result.containsKey(\"fields\") && !result.get(\"fields\").isEmpty())\n\t{\n\t\tinfo \"UP\";\n\t\t//zoho.crm.updateRecord(module,recordId,result.get(\"fields\"),trigger);\n\t}\n\tif(result.containKey(\"company\"))\n\t{\n\t\tif(result.get(\"company\").containKey(\"requests_max\"))\n\t\t{\n\t\t\trequestsMax = Map();\n\t\t\trequestsMax.put(\"apiname\",fieldRequestsMax);\n\t\t\trequestsMax.put(\"value\",result.get(\"company\").get(\"requests_max\"));\n\t\t\tresp = zoho.crm.invokeConnector(\"crm.set\",requestsMax);\n\t\t}\n\t\tif(result.get(\"company\").containKey(\"requests_current\"))\n\t\t{\n\t\t\trequestsCurrent = Map();\n\t\t\trequestsCurrent.put(\"apiname\",fieldRequestsCurrent);\n\t\t\trequestsCurrent.put(\"value\",result.get(\"company\").get(\"requests_current\"));\n\t\t\tresp = zoho.crm.invokeConnector(\"crm.set\",requestsCurrent);\n\t\t}\n\t}\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000000425001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1628862798000,
        "name": "test5",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test5()\n{\nexistProduct = zoho.crm.searchRecords(\"Products\",\"(Shopify_Id:equals:9976077025338)\");\ninfo existProduct;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-08-13 06:53:18.0",
        "workflow": "existProduct = zoho.crm.searchRecords(\"Products\",\"(Shopify_Id:equals:9976077025338)\");\ninfo existProduct;"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "id",
                        "value": "Contacts.Contact Id"
                    }
                ],
                "id": 4444945000009500000,
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "Booking Test",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000000652001",
                "connectionLinkName": "zoho_booking",
                "connectionName": "Zoho Booking",
                "isUserDefinedService": "false",
                "scopes": [
                    "zohobookings.data.CREATE",
                    "zohobookings.data.READ"
                ],
                "serviceName": "zoho_bookings",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testBooking",
        "id": "512029000000643001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-07-30T11:46:20+02:00",
        "name": "testBooking",
        "nameSpace": "automation",
        "params": [
            {
                "name": "id",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testBooking(Int id)\n{\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/bookings/v1/json/staffs\"\n\ttype :GET\n\tconnection:\"zoho_booking\"\n];\ntry \n{\n\tstaffData = resp.getJson(\"response\").getJson(\"returnvalue\").getJson(\"data\");\n\tinfo staffData;\n\tfor each  staff in staffData\n\t{\n\t\tif(staff.get(\"email\") == \"user4@demo4.crmoz.com\")\n\t\t{\n\t\t\tstaffId = staff.get(\"id\");\n\t\t}\n\t}\n}\n catch (e)\n{\tinfo \"error\";\n}\ncontactDetails = zoho.crm.getRecordById(\"Contacts\",id);\nfirstName = ifNull(contactDetails.get(\"First_Name\"),\"\");\nlastName = ifNull(contactDetails.get(\"Last_Name\"),\"\");\nfullName = firstName + ' ' + lastName;\nemail = ifNull(contactDetails.get(\"Email\"),\"\");\nphone = ifNull(contactDetails.get(\"Phone\"),\"\");\nbody = \"<a href='https://zoho-user4113.zohobookings.com/#/customer/3986638000000080008?Name=\" + fullName + \"&Email=\" + email + \"&Contact Number=\" + phone + \"&staffId=\" + staffId + \"&hideYourInfo=true'>Go To Link</a>\";\ntry \n{\n\tsendmail\n\t[\n\t\tfrom :zoho.adminuserid\n\t\tto :email\n\t\tsubject :\"Link\"\n\t\tmessage :body\n\t]\n\tzoho.crm.updateRecord(\"Contacts\",id,{\"Booking_Status\":\"Send Link\"});\n}\n catch (e)\n{}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "id"
            ],
            "sendmail": [
                {
                    "to": [
                        "unknown"
                    ]
                }
            ],
            "webhooks": [
                {
                    "connection": "zoho_booking",
                    "method": "get",
                    "url": "https://www.zohoapis.com/bookings/v1/json/staffs"
                }
            ]
        },
        "updatedTime": "2021-07-30 02:46:23.0",
        "workflow": "resp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/bookings/v1/json/staffs\"\n\ttype :GET\n\tconnection:\"zoho_booking\"\n];\ntry \n{\n\tstaffData = resp.getJson(\"response\").getJson(\"returnvalue\").getJson(\"data\");\n\tinfo staffData;\n\tfor each  staff in staffData\n\t{\n\t\tif(staff.get(\"email\") == \"user4@demo4.crmoz.com\")\n\t\t{\n\t\t\tstaffId = staff.get(\"id\");\n\t\t}\n\t}\n}\n catch (e)\n{\tinfo \"error\";\n}\ncontactDetails = zoho.crm.getRecordById(\"Contacts\",id);\nfirstName = ifNull(contactDetails.get(\"First_Name\"),\"\");\nlastName = ifNull(contactDetails.get(\"Last_Name\"),\"\");\nfullName = firstName + ' ' + lastName;\nemail = ifNull(contactDetails.get(\"Email\"),\"\");\nphone = ifNull(contactDetails.get(\"Phone\"),\"\");\nbody = \"<a href='https://zoho-user4113.zohobookings.com/#/customer/3986638000000080008?Name=\" + fullName + \"&Email=\" + email + \"&Contact Number=\" + phone + \"&staffId=\" + staffId + \"&hideYourInfo=true'>Go To Link</a>\";\ntry \n{\n\tsendmail\n\t[\n\t\tfrom :zoho.adminuserid\n\t\tto :email\n\t\tsubject :\"Link\"\n\t\tmessage :body\n\t]\n\tzoho.crm.updateRecord(\"Contacts\",id,{\"Booking_Status\":\"Send Link\"});\n}\n catch (e)\n{}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "shopifyTestContact",
        "id": "512029000000563001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1625643342000,
        "name": "shopifyTestContact",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.shopifyTestContact()\n{\ncontactId = \"4444945000008900599\";\ncontact = zoho.crm.getRecordById(\"Contacts\",\"11111111111\");\nemail = \"ergeyer@yahoo.com\";\naccount = contact.get(\"Account_Name\");\ncompany = \"\";\nexistAccount = zoho.crm.searchRecords(\"Accounts\",\"(Account_Name:equals:\" + company + \")\");\nexistContact = zoho.crm.searchRecords(\"Contacts\",\"(Email:equals:\" + email + \")\");\nupdateContact = Map();\n//tags = existContact.get(0).get(\"Tag\");\ntags = {{\"name\":\"one\"},{\"name\":\"two\"},{\"name\":\"three\"}};\ntagList = List();\ntags = \"Sugarlash,PRO Partnership,Rewards Program\";\nfor each  tag in tags\n{\n\tinfo tag;\n\tif(tag.trim().len() > 24)\n\t{\n\t\ttag = tag.subString(0,24);\n\t}\n\ttagList.add({\"name\":tag});\n}\ntags = tagList;\ninfo tagList;\n//updateContact.put(\"Tag\",tags);\nnewContact = Map();\nnewContact.put(\"Tag\",tags);\n/*newContact.put(\"First_Name\",\"First_Name\");\n\t\tnewContact.put(\"Last_Name\",\"Last_Name\");\n\t\tnewContact.put(\"Email\", \"tes@mail.com\");\n\t\tnewContact.put(\"shopifytocrm0__Shopify_Id\", \"123456\");\n\t\tnewContact.put(\"Mailing_City\", \"ffafaf\");\n\t\tnewContact.put(\"Mailing_Country\", \"faefaeF\");\n\t\tnewContact.put(\"Mailing_State\", \"WFEWFEWF\");\n\t\tnewContact.put(\"Mailing_Street\",\"vfdvfvf\");\n\t\tnewContact.put(\"Mailing_Zip\", \"123\");\n\t\tnewContact.put(\"Phone\",\"545252525\");\n\t\tnewContact.put(\"Account_Name\", null);\n\t\t//newContact.put(\"Tag\",tags);*/\n//info newContact;\n//response = zoho.crm.createRecord(\"Contacts\",newContact);\n//info response.get(\"id\");\n//info updateContact;\n//NewTag = {\"Tag\":[{\"name\":\"Test222\"}]};\n//info zoho.crm.updateRecord(\"Contacts\",contactId,newContact);\n//zoho.crm.updateRecord(\"Contacts\",contactId,updateContact);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-07-07 00:35:42.0",
        "workflow": "contactId = \"4444945000008900599\";\ncontact = zoho.crm.getRecordById(\"Contacts\",\"11111111111\");\nemail = \"ergeyer@yahoo.com\";\naccount = contact.get(\"Account_Name\");\ncompany = \"\";\nexistAccount = zoho.crm.searchRecords(\"Accounts\",\"(Account_Name:equals:\" + company + \")\");\nexistContact = zoho.crm.searchRecords(\"Contacts\",\"(Email:equals:\" + email + \")\");\nupdateContact = Map();\n//tags = existContact.get(0).get(\"Tag\");\ntags = {{\"name\":\"one\"},{\"name\":\"two\"},{\"name\":\"three\"}};\ntagList = List();\ntags = \"Sugarlash,PRO Partnership,Rewards Program\";\nfor each  tag in tags\n{\n\tinfo tag;\n\tif(tag.trim().len() > 24)\n\t{\n\t\ttag = tag.subString(0,24);\n\t}\n\ttagList.add({\"name\":tag});\n}\ntags = tagList;\ninfo tagList;\n//updateContact.put(\"Tag\",tags);\nnewContact = Map();\nnewContact.put(\"Tag\",tags);\n/*newContact.put(\"First_Name\",\"First_Name\");\n\t\tnewContact.put(\"Last_Name\",\"Last_Name\");\n\t\tnewContact.put(\"Email\", \"tes@mail.com\");\n\t\tnewContact.put(\"shopifytocrm0__Shopify_Id\", \"123456\");\n\t\tnewContact.put(\"Mailing_City\", \"ffafaf\");\n\t\tnewContact.put(\"Mailing_Country\", \"faefaeF\");\n\t\tnewContact.put(\"Mailing_State\", \"WFEWFEWF\");\n\t\tnewContact.put(\"Mailing_Street\",\"vfdvfvf\");\n\t\tnewContact.put(\"Mailing_Zip\", \"123\");\n\t\tnewContact.put(\"Phone\",\"545252525\");\n\t\tnewContact.put(\"Account_Name\", null);\n\t\t//newContact.put(\"Tag\",tags);*/\n//info newContact;\n//response = zoho.crm.createRecord(\"Contacts\",newContact);\n//info response.get(\"id\");\n//info updateContact;\n//NewTag = {\"Tag\":[{\"name\":\"Test222\"}]};\n//info zoho.crm.updateRecord(\"Contacts\",contactId,newContact);\n//zoho.crm.updateRecord(\"Contacts\",contactId,updateContact);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000000436001",
                "connectionLinkName": "testdda",
                "connectionName": "test",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoSign.account.ALL",
                    "ZohoSign.documents.ALL",
                    "ZohoSign.documents.UPDATE",
                    "ZohoSign.templates.ALL"
                ],
                "serviceName": "zoho_sign",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "denis_dikiy_test_fun",
        "id": "512029000000446003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1619784659000,
        "name": "denis_dikiy_test_fun",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.denis_dikiy_test_fun()\n{\nresponse = zoho.crm.getRecordById(\"Products\",4444945000006593206);\nq = response.get(\"File_Upload_1\").get(0).get(\"download_Url\");\ninfo concat(\"https://crm.zoho.com\",q);\npdf_file = invokeurl\n[\n\turl :\"http://www.africau.edu/images/default/sample.pdf\"\n\ttype :GET\n];\ninfo pdf_file;\ndataMap = Map();\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,dataMap,\"testdda\");\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                },
                {
                    "connection": "testdda",
                    "display_name": "Zoho Sign",
                    "function": "zoho.sign.createDocument",
                    "service": "ZohoSign"
                }
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "http://www.africau.edu/images/default/sample.pdf"
                }
            ]
        },
        "updatedTime": "2021-04-30 05:10:59.0",
        "workflow": "response = zoho.crm.getRecordById(\"Products\",4444945000006593206);\nq = response.get(\"File_Upload_1\").get(0).get(\"download_Url\");\ninfo concat(\"https://crm.zoho.com\",q);\npdf_file = invokeurl\n[\n\turl :\"http://www.africau.edu/images/default/sample.pdf\"\n\ttype :GET\n];\ninfo pdf_file;\ndataMap = Map();\n// Perform create document task to upload the file to Zoho Sign\nresponse = zoho.sign.createDocument(pdf_file,dataMap,\"testdda\");\ninfo response;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testEXXT",
        "id": "512029000000133001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1594109534000,
        "name": "testEXT1",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testEXT1()\n{\nm = {\"nameSpace\":\"alexander3.zohocheckeremail\"};\napikeyresp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\nzapikey = apikeyresp.get(\"response\");\ninfo zapikey;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2020-07-07 01:12:14.0",
        "workflow": "m = {\"nameSpace\":\"alexander3.zohocheckeremail\"};\napikeyresp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\nzapikey = apikeyresp.get(\"response\");\ninfo zapikey;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000000112001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1655976244000,
        "name": "test",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test()\n{\nupList = List();\nm = Map();\nm.put(\"id\",\"4444945000013335050\");\nm.put(\"Source\",null);\nupList.add(m);\ninfo zoho.crm.bulkUpdate(\"Deals\",upList);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2022-06-23 02:24:04.0",
        "workflow": "upList = List();\nm = Map();\nm.put(\"id\",\"4444945000013335050\");\nm.put(\"Source\",null);\nupList.add(m);\ninfo zoho.crm.bulkUpdate(\"Deals\",upList);"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": [
                    {
                        "name": "contactId",
                        "value": "Contact Id"
                    }
                ],
                "id": "4444945000009065420",
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "newContactToDesk"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "newContactToDesk",
        "id": "512029000000576001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-07-08T14:21:47+02:00",
        "name": "newContactToDesk",
        "nameSpace": "automation",
        "params": [
            {
                "name": "contactId",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.newContactToDesk(int contactId)\n{\n//contactId = 4444945000009065614;\norgId = 714987616;\nsearchValue = {\"id\":contactId};\nexistDeskContact = zoho.desk.searchRecords(orgId,\"contacts\",searchValue);\nCRMContact = zoho.crm.searchRecords(\"Contacts\",\"(id:equals:\" + contactId + \")\");\ndeskId = CRMContact.get(0).get(\"DeskId\");\nif(deskId == null)\n{\n\tfirstName = CRMContact.get(0).get(\"First_Name\");\n\tlastName = CRMContact.get(0).get(\"Last_Name\");\n\temail = CRMContact.get(0).get(\"Email\");\n\tphone = CRMContact.get(0).get(\"Phone\");\n\tcontactMap = Map();\n\tcontactMap.put(\"firstName\",firstName);\n\tcontactMap.put(\"lastName\",lastName);\n\tcontactMap.put(\"email\",email);\n\tcontactMap.put(\"phone\",phone);\n\t//contactMap.put(\"DeskId\",contactId.toString());\n\tDeskContact = zoho.desk.create(orgId,\"contacts\",contactMap);\n\tupdateCRMContactMap = Map();\n\tupdateCRMContactMap.put(\"DeskId\",DeskContact.get(\"id\").toString());\n\tinfo zoho.crm.updateRecord(\"Contacts\",contactId,updateCRMContactMap);\n}\nelse\n{\n\tfirstName = CRMContact.get(0).get(\"First_Name\");\n\tlastName = CRMContact.get(0).get(\"Last_Name\");\n\temail = CRMContact.get(0).get(\"Email\");\n\tphone = CRMContact.get(0).get(\"Phone\");\n\tcontactMap = Map();\n\tcontactMap.put(\"firstName\",firstName);\n\tcontactMap.put(\"lastName\",lastName);\n\tcontactMap.put(\"email\",email);\n\tcontactMap.put(\"phone\",phone);\n\tinfo zoho.desk.update(orgId,\"contacts\",deskId,contactMap);\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho Desk",
                    "function": "zoho.desk.create",
                    "service": "Desk"
                },
                {
                    "display_name": "Zoho Desk",
                    "function": "zoho.desk.update",
                    "service": "Desk"
                },
                {
                    "display_name": "Zoho Desk",
                    "function": "zoho.desk.searchRecords",
                    "service": "Desk"
                }
            ],
            "params": [
                "contactId"
            ]
        },
        "updatedTime": "2021-07-08 05:21:47.0",
        "workflow": "//contactId = 4444945000009065614;\norgId = 714987616;\nsearchValue = {\"id\":contactId};\nexistDeskContact = zoho.desk.searchRecords(orgId,\"contacts\",searchValue);\nCRMContact = zoho.crm.searchRecords(\"Contacts\",\"(id:equals:\" + contactId + \")\");\ndeskId = CRMContact.get(0).get(\"DeskId\");\nif(deskId == null)\n{\n\tfirstName = CRMContact.get(0).get(\"First_Name\");\n\tlastName = CRMContact.get(0).get(\"Last_Name\");\n\temail = CRMContact.get(0).get(\"Email\");\n\tphone = CRMContact.get(0).get(\"Phone\");\n\tcontactMap = Map();\n\tcontactMap.put(\"firstName\",firstName);\n\tcontactMap.put(\"lastName\",lastName);\n\tcontactMap.put(\"email\",email);\n\tcontactMap.put(\"phone\",phone);\n\t//contactMap.put(\"DeskId\",contactId.toString());\n\tDeskContact = zoho.desk.create(orgId,\"contacts\",contactMap);\n\tupdateCRMContactMap = Map();\n\tupdateCRMContactMap.put(\"DeskId\",DeskContact.get(\"id\").toString());\n\tinfo zoho.crm.updateRecord(\"Contacts\",contactId,updateCRMContactMap);\n}\nelse\n{\n\tfirstName = CRMContact.get(0).get(\"First_Name\");\n\tlastName = CRMContact.get(0).get(\"Last_Name\");\n\temail = CRMContact.get(0).get(\"Email\");\n\tphone = CRMContact.get(0).get(\"Phone\");\n\tcontactMap = Map();\n\tcontactMap.put(\"firstName\",firstName);\n\tcontactMap.put(\"lastName\",lastName);\n\tcontactMap.put(\"email\",email);\n\tcontactMap.put(\"phone\",phone);\n\tinfo zoho.desk.update(orgId,\"contacts\",deskId,contactMap);\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000028197096",
                "connectionLinkName": "zoho_cliq",
                "connectionName": "zoho_cliq",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCliq.Webhooks.CREATE",
                    "ZohoCliq.Channels.All",
                    "ZohoCliq.StorageData.ALL",
                    "ZohoCliq.Reminders.ALL",
                    "ZohoCliq.Teams.ALL",
                    "ZohoCliq.Buddies.READ",
                    "ZohoCliq.Messages.UPDATE",
                    "ZohoCliq.Messages.READ",
                    "ZohoCliq.Users.READ",
                    "ZohoCliq.Organisation.READ",
                    "ZohoCliq.Messages.DELETE",
                    "ZohoCliq.Profile.CREATE",
                    "ZohoCliq.Profile.DELETE",
                    "ZohoCliq.Profile.READ",
                    "ZohoCliq.Chats.READ",
                    "ZohoCliq.Chats.UPDATE",
                    "ZohoCliq.Chats.CREATE",
                    "ZohoCliq.Chats.DELETE",
                    "ZohoCliq.Users.UPDATE",
                    "ZohoCliq.Users.CREATE",
                    "ZohoCliq.Applications.ALL",
                    "ZohoCliq.Profile.Update",
                    "ZohoCliq.OrganizationChats.READ",
                    "ZohoCliq.OrganizationMessages.READ",
                    "ZohoCliq.messageactions.CREATE",
                    "ZohoCliq.Departments.ALL",
                    "ZohoCliq.chatlets.ALL",
                    "ZohoCliq.Organisation.CREATE",
                    "ZohoCliq.Attachments.READ",
                    "ZohoCliq.Designations.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "Test",
        "id": "512029000000691027",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1628510296000,
        "name": "Test",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.Test()\n{\nmessage = {\"text\":\" [Pupkin](zohoid:d.dikiy@crmoz.com) Issues Filed Under your Name\",\"bot\":{\"name\":\"Candidate Notifier\"}};\nCliqMessage = zoho.cliq.postToUser(\"d.dikiy@crmoz.com\",message,\"zoho_cliq\");\ninfo CliqMessage;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "zoho_cliq",
                    "display_name": "Zoho Cliq",
                    "function": "zoho.cliq.postToUser",
                    "service": "ZohoChat"
                }
            ]
        },
        "updatedTime": "2021-08-09 04:58:16.0",
        "workflow": "message = {\"text\":\" [Pupkin](zohoid:d.dikiy@crmoz.com) Issues Filed Under your Name\",\"bot\":{\"name\":\"Candidate Notifier\"}};\nCliqMessage = zoho.cliq.postToUser(\"d.dikiy@crmoz.com\",message,\"zoho_cliq\");\ninfo CliqMessage;"
    },
    {
        "api_name": "oz_testfunction1",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testShopifyOrder",
        "id": "512029000000525008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-08-16T14:42:24+02:00",
        "name": "oz_testFunction1",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/oz_testfunction1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/oz_testfunction1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.oz_testFunction1()\n{\n/* Задаем переменные по которым будем создавать условия */\nshopify_id = '38160354837061';\nsource_sync = 'www.sugarlashpro-staging1.com';\ncontactId = 4444945000009849002;\n/* Получаем Account name From Contacts */\naccountId = null;\ncontact = zoho.crm.getRecordById(\"Contacts\",contactId);\naccount = contact.get(\"Account_Name\");\nif(account != null)\n{\n\taccountId = account.get(\"id\");\n}\ninfo account;\n/* /////// */\n/* Получаем массив продуктов   */\nproducts = {{\"id\":\"4444945000008792027\",\"quantity\":10,\"list_price\":10.00},{\"id\":\"4444945000008791027\",\"quantity\":1,\"list_price\":48.00}};\n/*  //////  */\nnewSalesOrder = Map();\nnewSalesOrder.put('Subject','120394');\nnewSalesOrder.put('shopifytocrm0__Shopify_Source',source_sync);\nnewSalesOrder.put('shopifytocrm0__Shopify_Id',shopify_id);\nnewSalesOrder.put('shopifytocrm0__Shipping_Title','');\nnewSalesOrder.put('Status','fulfilled');\nnewSalesOrder.put('Currency','USD');\nnewSalesOrder.put('Email','test@gmail.com');\nnewSalesOrder.put('last_name','Test');\nnewSalesOrder.put('first_name','Test');\nnewSalesOrder.put('shipping_last_name','Test');\nnewSalesOrder.put('shipping_first_name','Test');\nnewSalesOrder.put('shopifytocrm0__Shipping_Charges',0);\nnewSalesOrder.put('Shipping_City','Test');\nnewSalesOrder.put('Shipping_Code','66212');\nnewSalesOrder.put('shipping_company','Test');\nnewSalesOrder.put('Shipping_Country','Test');\nnewSalesOrder.put('Shipping_Street','Test');\nnewSalesOrder.put('Shipping_State','Test');\nnewSalesOrder.put('shopifytocrm0__Billing_Address_1','Test');\nnewSalesOrder.put('shopifytocrm0__Billing_Address_2','');\nnewSalesOrder.put('Billing_City','Test');\nnewSalesOrder.put('Billing_Code','66212');\nnewSalesOrder.put('Billing_Country','Test');\nnewSalesOrder.put('Billing_Street','Test');\nnewSalesOrder.put('Billing_State','Test');\nnewSalesOrder.put('country_code','US');\nnewSalesOrder.put('shopifytocrm0__Financial_Status','paid');\nnewSalesOrder.put('Sub_Total',325.0);\nnewSalesOrder.put('Discount',325.0);\nnewSalesOrder.put('shopifytocrm0__Tax_Sum',0);\nnewSalesOrder.put('shopifytocrm0__Refunded_Sum',0);\nnewSalesOrder.put('Adjustment',0.0);\nnewSalesOrder.put('Contact_Name',contactId);\nnewSalesOrder.put('Account_Name',accountId);\nnewSalesOrder.put('shopifytocrm0__Tracking_Number_Checked_At','2021-06-22T08:10:22');\nnewSalesOrder.put('shopifytocrm0__Tracking_Number','8913555781');\n/* Ищем, существует ли заказ в CRM */\nexist_shopify = zoho.crm.searchRecords(\"Sales_Orders\",\"(shopifytocrm0__Shopify_Id:equals:\" + shopify_id + \")\");\nexist_source = zoho.crm.searchRecords(\"Sales_Orders\",\"(shopifytocrm0__Shopify_Source:equals:\" + source_sync + \")\");\ninfo exist_shopify.size();\ninfo exist_source.size();\n/* Создаем условие */\nitemsList = List();\nif(exist_shopify.size() == 0)\n{\n\tif(exist_source.size() == 0)\n\t{\n\t\t/*  ПРоходимся по массиву продуктов   */\n\t\tfor each  product in products\n\t\t{\n\t\t\tproductMap = Map();\n\t\t\tproductMap.put(\"product\",{\"id\":product.get('id')});\n\t\t\tproductMap.put(\"quantity\",product.get('quantity'));\n\t\t\tproductMap.put(\"list_price\",product.get('list_price'));\n\t\t\titemsList.add(productMap);\n\t\t}\n\t\t/* Добавляем в сабформу полученные продукты */\n\t\tnewSalesOrder.put(\"Product_Details\",itemsList);\n\t\t//info newSalesOrder;\n\t\tinfo zoho.crm.createRecord(\"Sales_Orders\",newSalesOrder);\n\t\tinfo 'We created';\n\t}\n}\nelse\n{\n\t/*  Получаем id Sales Orders   */\n\tid = exist_shopify.get(0).get('id');\n\t/*  ПРоходимся по массиву продуктов   */\n\tfor each  product in products\n\t{\n\t\tproductMap = Map();\n\t\tproductMap.put(\"product\",{\"id\":product.get('id')});\n\t\tproductMap.put(\"quantity\",product.get('quantity'));\n\t\tproductMap.put(\"list_price\",product.get('list_price'));\n\t\titemsList.add(productMap);\n\t}\n\t/* Добавляем в сабформу полученные продукты */\n\tnewSalesOrder.put(\"Product_Details\",itemsList);\n\t//info newSalesOrder;\n\tinfo zoho.crm.updateRecord(\"Sales_Orders\",id,newSalesOrder);\n\tinfo 'We updated';\n}\ninfo 'That all';\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-08-16 05:42:25.0",
        "workflow": "/* Задаем переменные по которым будем создавать условия */\nshopify_id = '38160354837061';\nsource_sync = 'www.sugarlashpro-staging1.com';\ncontactId = 4444945000009849002;\n/* Получаем Account name From Contacts */\naccountId = null;\ncontact = zoho.crm.getRecordById(\"Contacts\",contactId);\naccount = contact.get(\"Account_Name\");\nif(account != null)\n{\n\taccountId = account.get(\"id\");\n}\ninfo account;\n/* /////// */\n/* Получаем массив продуктов   */\nproducts = {{\"id\":\"4444945000008792027\",\"quantity\":10,\"list_price\":10.00},{\"id\":\"4444945000008791027\",\"quantity\":1,\"list_price\":48.00}};\n/*  //////  */\nnewSalesOrder = Map();\nnewSalesOrder.put('Subject','120394');\nnewSalesOrder.put('shopifytocrm0__Shopify_Source',source_sync);\nnewSalesOrder.put('shopifytocrm0__Shopify_Id',shopify_id);\nnewSalesOrder.put('shopifytocrm0__Shipping_Title','');\nnewSalesOrder.put('Status','fulfilled');\nnewSalesOrder.put('Currency','USD');\nnewSalesOrder.put('Email','test@gmail.com');\nnewSalesOrder.put('last_name','Test');\nnewSalesOrder.put('first_name','Test');\nnewSalesOrder.put('shipping_last_name','Test');\nnewSalesOrder.put('shipping_first_name','Test');\nnewSalesOrder.put('shopifytocrm0__Shipping_Charges',0);\nnewSalesOrder.put('Shipping_City','Test');\nnewSalesOrder.put('Shipping_Code','66212');\nnewSalesOrder.put('shipping_company','Test');\nnewSalesOrder.put('Shipping_Country','Test');\nnewSalesOrder.put('Shipping_Street','Test');\nnewSalesOrder.put('Shipping_State','Test');\nnewSalesOrder.put('shopifytocrm0__Billing_Address_1','Test');\nnewSalesOrder.put('shopifytocrm0__Billing_Address_2','');\nnewSalesOrder.put('Billing_City','Test');\nnewSalesOrder.put('Billing_Code','66212');\nnewSalesOrder.put('Billing_Country','Test');\nnewSalesOrder.put('Billing_Street','Test');\nnewSalesOrder.put('Billing_State','Test');\nnewSalesOrder.put('country_code','US');\nnewSalesOrder.put('shopifytocrm0__Financial_Status','paid');\nnewSalesOrder.put('Sub_Total',325.0);\nnewSalesOrder.put('Discount',325.0);\nnewSalesOrder.put('shopifytocrm0__Tax_Sum',0);\nnewSalesOrder.put('shopifytocrm0__Refunded_Sum',0);\nnewSalesOrder.put('Adjustment',0.0);\nnewSalesOrder.put('Contact_Name',contactId);\nnewSalesOrder.put('Account_Name',accountId);\nnewSalesOrder.put('shopifytocrm0__Tracking_Number_Checked_At','2021-06-22T08:10:22');\nnewSalesOrder.put('shopifytocrm0__Tracking_Number','8913555781');\n/* Ищем, существует ли заказ в CRM */\nexist_shopify = zoho.crm.searchRecords(\"Sales_Orders\",\"(shopifytocrm0__Shopify_Id:equals:\" + shopify_id + \")\");\nexist_source = zoho.crm.searchRecords(\"Sales_Orders\",\"(shopifytocrm0__Shopify_Source:equals:\" + source_sync + \")\");\ninfo exist_shopify.size();\ninfo exist_source.size();\n/* Создаем условие */\nitemsList = List();\nif(exist_shopify.size() == 0)\n{\n\tif(exist_source.size() == 0)\n\t{\n\t\t/*  ПРоходимся по массиву продуктов   */\n\t\tfor each  product in products\n\t\t{\n\t\t\tproductMap = Map();\n\t\t\tproductMap.put(\"product\",{\"id\":product.get('id')});\n\t\t\tproductMap.put(\"quantity\",product.get('quantity'));\n\t\t\tproductMap.put(\"list_price\",product.get('list_price'));\n\t\t\titemsList.add(productMap);\n\t\t}\n\t\t/* Добавляем в сабформу полученные продукты */\n\t\tnewSalesOrder.put(\"Product_Details\",itemsList);\n\t\t//info newSalesOrder;\n\t\tinfo zoho.crm.createRecord(\"Sales_Orders\",newSalesOrder);\n\t\tinfo 'We created';\n\t}\n}\nelse\n{\n\t/*  Получаем id Sales Orders   */\n\tid = exist_shopify.get(0).get('id');\n\t/*  ПРоходимся по массиву продуктов   */\n\tfor each  product in products\n\t{\n\t\tproductMap = Map();\n\t\tproductMap.put(\"product\",{\"id\":product.get('id')});\n\t\tproductMap.put(\"quantity\",product.get('quantity'));\n\t\tproductMap.put(\"list_price\",product.get('list_price'));\n\t\titemsList.add(productMap);\n\t}\n\t/* Добавляем в сабформу полученные продукты */\n\tnewSalesOrder.put(\"Product_Details\",itemsList);\n\t//info newSalesOrder;\n\tinfo zoho.crm.updateRecord(\"Sales_Orders\",id,newSalesOrder);\n\tinfo 'We updated';\n}\ninfo 'That all';"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "crmoz_export_to_books",
        "id": "512029000000330003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-03-01T14:07:09+01:00",
        "name": "crmoz_export_to_books",
        "nameSpace": "button",
        "params": [
            {
                "name": "ids",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "STRING",
        "script": "string button.crmoz_export_to_books(String ids)\n{\nidsList = ids.toCollection(\"|||\");\nsortDate = List();\nstartDate = '';\norg_id = 713248035;\nitem_books_id = 2234095000000510020;\nerrorsList = List();\nsuccessfullyCounter = 0;\nfor each  id in idsList\n{\n\titem = zoho.crm.getRecordById(\"Upwork_Uploads\",id);\n\tteamGroup = item.get(\"Team\");\n\tunicDate = item.get(\"Date\");\n\tinfo teamGroup;\n\tinfo unicDate;\n\tif(teamGroup == null)\n\t{\n\t\terrorsList.add({\"message\":\"Name:\" + item.get(\"Name\") + \" - Team must be  is not null\"});\n\t\tzoho.crm.updateRecord(\"Upwork_Uploads\",id,{\"error_books\":\"Team must be  is not null\"});\n\t\tcontinue;\n\t}\n\tif(item.get(\"Books_Invoice_ID\") != null)\n\t{\n\t\terrorsList.add({\"message\":\"Invoice already exists\"});\n\t\tzoho.crm.updateRecord(\"Upwork_Uploads\",id,{\"error_books\":\"Invoice already exists\"});\n\t\tcontinue;\n\t}\n\tcustomerBooks = zoho.books.getRecords(\"Contacts\",org_id,{\"contact_name\":item.get(\"Account_CRM\").get(\"name\")}).get(\"contacts\");\n\tif(customerBooks.size() < 0)\n\t{\n\t\terrorsList.add({\"message\":\"Error create invoice! Message - Not selected customer\"});\n\t\tnewNote = Map();\n\t\tnewNote.put(\"se_module\",\"Upwork_Uploads\");\n\t\tnewNote.put(\"Parent_Id\",id.toString());\n\t\tnewNote.put(\"Note_Content\",\"Error create invoice! Message - Not selected customer\");\n\t\tresp = zoho.crm.createRecord(\"Notes\",newNote);\n\t\tzoho.crm.updateRecord(\"Upwork_Uploads\",id,{\"error_books\":\"Not selected customer\"});\n\t}\n}\nif(errorsList.size() > 0)\n{\n\tmessages = '';\n\tfor each  item in errorsList\n\t{\n\t\tmessages = messages + item.get(\"message\") + \" ;\";\n\t}\n\treturn messages;\n}\nelse\n{\n\tsortDate = List();\n\t// group by date ************************************************\n\tfor each  id in idsList\n\t{\n\t\titem = zoho.crm.getRecordById(\"Upwork_Uploads\",id);\n\t\tif(item.get(\"Date\") != startDate)\n\t\t{\n\t\t\tsortDate.add(item.get(\"Date\"));\n\t\t\tstartDate = item.get(\"Date\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t}\n\tfor each  dateGroup in sortDate\n\t{\n\t\tupworkGroupDate = zoho.crm.searchRecords(\"Upwork_Uploads\",\"(Date:equals:\" + dateGroup + \")\");\n\t\tstartAccount = '';\n\t\tsortAccount = List();\n\t\t// group by Team **************************************************\n\t\tfor each  item in upworkGroupDate\n\t\t{\n\t\t\tif(item.get(\"Team\") != startAccount)\n\t\t\t{\n\t\t\t\tsortAccount.add(item.get(\"Team\"));\n\t\t\t\tstartAccount = item.get(\"Team\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tinfo dateGroup;\n\t\tinfo sortAccount;\n\t\tfor each  unicAccount in sortAccount\n\t\t{\n\t\t\tif(unicAccount == null)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\titemGroupByDateAccount = zoho.crm.searchRecords(\"Upwork_Uploads\",\"((Date:equals:\" + dateGroup + \")and (Team:equals:\" + unicAccount + \"))\");\n\t\t\tinfo itemGroupByDateAccount.size();\n\t\t\tbooksInvoice = Map();\n\t\t\tlistVar = List();\n\t\t\tadjustment = 0;\n\t\t\tfor each  productCRM in itemGroupByDateAccount\n\t\t\t{\n\t\t\t\tif(productCRM.get(\"Type\") == 'Withdrawal' || productCRM.get(\"Type\") == 'Withdrawal Fee')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(productCRM.get(\"Amount\") < 0)\n\t\t\t\t{\n\t\t\t\t\tadjustment = adjustment + productCRM.get(\"Amount\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprodBooks = Map();\n\t\t\t\t\tprodBooks.put(\"rate\",productCRM.get(\"Amount\"));\n\t\t\t\t\tprodBooks.put(\"item_id\",item_books_id);\n\t\t\t\t\tprodBooks.put(\"description\",productCRM.get(\"Description\"));\n\t\t\t\t\tprodBooks.put(\"quantity\",1);\n\t\t\t\t\tlistVar.add(prodBooks);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcustomerBooks = zoho.books.getRecords(\"Contacts\",org_id,{\"contact_name\":itemGroupByDateAccount.get(0).get(\"Account_CRM\").get(\"name\")}).get(\"contacts\");\n\t\t\tif(customerBooks.size() > 0)\n\t\t\t{\n\t\t\t\tbooksInvoice.put(\"customer_id\",customerBooks.get(0).get(\"contact_id\"));\n\t\t\t\tbooksInvoice.put(\"line_items\",listVar);\n\t\t\t\tbooksInvoice.put(\"date\",dateGroup);\n\t\t\t\tif(adjustment < 0)\n\t\t\t\t{\n\t\t\t\t\tbooksInvoice.put(\"adjustment\",adjustment);\n\t\t\t\t}\n\t\t\t\tsearchMap = Map();\n\t\t\t\tsearchMap.put(\"date\",dateGroup);\n\t\t\t\tsearchMap.put(\"customer_id\",customerBooks.get(0).get(\"contact_id\"));\n\t\t\t\tinvoiceBooks = zoho.books.getRecords(\"invoices\",org_id,searchMap).get(\"invoices\");\n\t\t\t\tif(invoiceBooks.size() > 0)\n\t\t\t\t{\n\t\t\t\t\terrorsList.add({\"message\":\"Invoice already exists for Date: \" + dateGroup + \" Customer: \" + itemGroupByDateAccount.get(0).get(\"Account_CRM\").get(\"name\")});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsuccessfullyCounter = successfullyCounter + 1;\n\t\t\t\t\tinfo zoho.books.createRecord(\"Invoices\",org_id,booksInvoice);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinfo \"--------------------\";\n\t}\n\tif(errorsList.size() > 0)\n\t{\n\t\tmessages = '';\n\t\tfor each  item in errorsList\n\t\t{\n\t\t\tmessages = messages + item.get(\"message\") + \" ;\";\n\t\t}\n\t\treturn \"Errors  count: \" + errorsList.size() + \" Messages Errors:\" + messages + \". Create \" + successfullyCounter + \" invoices is successfully\";\n\t}\n\telse\n\t{\n\t\treturn \"Create invoice is successfully!\";\n\t}\n}\n// group by date ************************************************\n// for each  id in idsList\n// {\n// \titem = zoho.crm.getRecordById(\"Upwork_Uploads\",id);\n// \tif(item.get(\"Date\") != startDate)\n// \t{\n// \t\tsortDate.add(item.get(\"Date\"));\n// \t\tstartDate = item.get(\"Date\");\n// \t}\n// \telse\n// \t{\n// \t\tcontinue;\n// \t}\n// }\n// for each  dateGroup in sortDate\n// {\n// \tupworkGroupDate = zoho.crm.searchRecords(\"Upwork_Uploads\",\"(Date:equals:\" + dateGroup + \")\");\n// \tstartAccount = '';\n// \tsortAccount = List();\n// \t// group by Team **************************************************\n// \tfor each  item in upworkGroupDate\n// \t{\n// \t\tif(item.get(\"Team\") != startAccount)\n// \t\t{\n// \t\t\tsortAccount.add(item.get(\"Team\"));\n// \t\t\tstartAccount = item.get(\"Team\");\n// \t\t}\n// \t\telse\n// \t\t{\n// \t\t\tcontinue;\n// \t\t}\n// \t}\n// \tinfo dateGroup;\n// \tinfo sortAccount;\n// \tfor each  unicAccount in sortAccount\n// \t{\n// \t\tif(unicAccount == null)\n// \t\t{\n// \t\t\tcontinue;\n// \t\t}\n// \t\titemGroupByDateAccount = zoho.crm.searchRecords(\"Upwork_Uploads\",\"((Date:equals:\" + dateGroup + \")and (Team:equals:\" + unicAccount + \"))\");\n// \t\tinfo itemGroupByDateAccount.size();\n// \t\tbooksInvoice = Map();\n// \t\tlistVar = List();\n// \t\tadjustment = 0;\n// \t\tfor each  productCRM in itemGroupByDateAccount\n// \t\t{\n// \t\t\tif(productCRM.get(\"Type\") == 'Withdrawal' || productCRM.get(\"Type\") == 'Withdrawal Fee')\n// \t\t\t{\n// \t\t\t\tcontinue;\n// \t\t\t}\n// \t\t\tif(productCRM.get(\"Amount\") < 0)\n// \t\t\t{\n// \t\t\t\tadjustment = adjustment + productCRM.get(\"Amount\");\n// \t\t\t\tcontinue;\n// \t\t\t}\n// \t\t\telse\n// \t\t\t{\n// \t\t\t\tprodBooks = Map();\n// \t\t\t\tprodBooks.put(\"rate\",productCRM.get(\"Amount\"));\n// \t\t\t\tprodBooks.put(\"item_id\",item_books_id);\n// \t\t\t\tprodBooks.put(\"description\",productCRM.get(\"Description\"));\n// \t\t\t\tprodBooks.put(\"quantity\",1);\n// \t\t\t\tlistVar.add(prodBooks);\n// \t\t\t}\n// \t\t}\n// \t\tcustomerBooks = zoho.books.getRecords(\"Contacts\",org_id,{\"contact_name\":itemGroupByDateAccount.get(0).get(\"Account_CRM\").get(\"name\")}).get(\"contacts\");\n// \t\tif(customerBooks.size() > 0)\n// \t\t{\n// \t\t\tbooksInvoice.put(\"customer_id\",customerBooks.get(0).get(\"contact_id\"));\n// \t\t\tbooksInvoice.put(\"line_items\",listVar);\n// \t\t\tbooksInvoice.put(\"date\",dateGroup);\n// \t\t\tif(adjustment < 0)\n// \t\t\t{\n// \t\t\t\tbooksInvoice.put(\"adjustment\",adjustment);\n// \t\t\t}\n// \t\t\tinfo zoho.books.createRecord(\"Invoices\",org_id,booksInvoice);\n// \t\t}\n// \t}\n// \tinfo \"--------------------\";\n// }\n// return \"Create invoice is successfully!\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho Books",
                    "function": "zoho.books.getRecords",
                    "service": "ZohoBooks"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho Books",
                    "function": "zoho.books.createRecord",
                    "service": "ZohoBooks"
                }
            ],
            "params": [
                "ids"
            ]
        },
        "updatedTime": "2021-03-01 05:07:09.0",
        "workflow": "idsList = ids.toCollection(\"|||\");\nsortDate = List();\nstartDate = '';\norg_id = 713248035;\nitem_books_id = 2234095000000510020;\nerrorsList = List();\nsuccessfullyCounter = 0;\nfor each  id in idsList\n{\n\titem = zoho.crm.getRecordById(\"Upwork_Uploads\",id);\n\tteamGroup = item.get(\"Team\");\n\tunicDate = item.get(\"Date\");\n\tinfo teamGroup;\n\tinfo unicDate;\n\tif(teamGroup == null)\n\t{\n\t\terrorsList.add({\"message\":\"Name:\" + item.get(\"Name\") + \" - Team must be  is not null\"});\n\t\tzoho.crm.updateRecord(\"Upwork_Uploads\",id,{\"error_books\":\"Team must be  is not null\"});\n\t\tcontinue;\n\t}\n\tif(item.get(\"Books_Invoice_ID\") != null)\n\t{\n\t\terrorsList.add({\"message\":\"Invoice already exists\"});\n\t\tzoho.crm.updateRecord(\"Upwork_Uploads\",id,{\"error_books\":\"Invoice already exists\"});\n\t\tcontinue;\n\t}\n\tcustomerBooks = zoho.books.getRecords(\"Contacts\",org_id,{\"contact_name\":item.get(\"Account_CRM\").get(\"name\")}).get(\"contacts\");\n\tif(customerBooks.size() < 0)\n\t{\n\t\terrorsList.add({\"message\":\"Error create invoice! Message - Not selected customer\"});\n\t\tnewNote = Map();\n\t\tnewNote.put(\"se_module\",\"Upwork_Uploads\");\n\t\tnewNote.put(\"Parent_Id\",id.toString());\n\t\tnewNote.put(\"Note_Content\",\"Error create invoice! Message - Not selected customer\");\n\t\tresp = zoho.crm.createRecord(\"Notes\",newNote);\n\t\tzoho.crm.updateRecord(\"Upwork_Uploads\",id,{\"error_books\":\"Not selected customer\"});\n\t}\n}\nif(errorsList.size() > 0)\n{\n\tmessages = '';\n\tfor each  item in errorsList\n\t{\n\t\tmessages = messages + item.get(\"message\") + \" ;\";\n\t}\n\treturn messages;\n}\nelse\n{\n\tsortDate = List();\n\t// group by date ************************************************\n\tfor each  id in idsList\n\t{\n\t\titem = zoho.crm.getRecordById(\"Upwork_Uploads\",id);\n\t\tif(item.get(\"Date\") != startDate)\n\t\t{\n\t\t\tsortDate.add(item.get(\"Date\"));\n\t\t\tstartDate = item.get(\"Date\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t}\n\tfor each  dateGroup in sortDate\n\t{\n\t\tupworkGroupDate = zoho.crm.searchRecords(\"Upwork_Uploads\",\"(Date:equals:\" + dateGroup + \")\");\n\t\tstartAccount = '';\n\t\tsortAccount = List();\n\t\t// group by Team **************************************************\n\t\tfor each  item in upworkGroupDate\n\t\t{\n\t\t\tif(item.get(\"Team\") != startAccount)\n\t\t\t{\n\t\t\t\tsortAccount.add(item.get(\"Team\"));\n\t\t\t\tstartAccount = item.get(\"Team\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tinfo dateGroup;\n\t\tinfo sortAccount;\n\t\tfor each  unicAccount in sortAccount\n\t\t{\n\t\t\tif(unicAccount == null)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\titemGroupByDateAccount = zoho.crm.searchRecords(\"Upwork_Uploads\",\"((Date:equals:\" + dateGroup + \")and (Team:equals:\" + unicAccount + \"))\");\n\t\t\tinfo itemGroupByDateAccount.size();\n\t\t\tbooksInvoice = Map();\n\t\t\tlistVar = List();\n\t\t\tadjustment = 0;\n\t\t\tfor each  productCRM in itemGroupByDateAccount\n\t\t\t{\n\t\t\t\tif(productCRM.get(\"Type\") == 'Withdrawal' || productCRM.get(\"Type\") == 'Withdrawal Fee')\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(productCRM.get(\"Amount\") < 0)\n\t\t\t\t{\n\t\t\t\t\tadjustment = adjustment + productCRM.get(\"Amount\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tprodBooks = Map();\n\t\t\t\t\tprodBooks.put(\"rate\",productCRM.get(\"Amount\"));\n\t\t\t\t\tprodBooks.put(\"item_id\",item_books_id);\n\t\t\t\t\tprodBooks.put(\"description\",productCRM.get(\"Description\"));\n\t\t\t\t\tprodBooks.put(\"quantity\",1);\n\t\t\t\t\tlistVar.add(prodBooks);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcustomerBooks = zoho.books.getRecords(\"Contacts\",org_id,{\"contact_name\":itemGroupByDateAccount.get(0).get(\"Account_CRM\").get(\"name\")}).get(\"contacts\");\n\t\t\tif(customerBooks.size() > 0)\n\t\t\t{\n\t\t\t\tbooksInvoice.put(\"customer_id\",customerBooks.get(0).get(\"contact_id\"));\n\t\t\t\tbooksInvoice.put(\"line_items\",listVar);\n\t\t\t\tbooksInvoice.put(\"date\",dateGroup);\n\t\t\t\tif(adjustment < 0)\n\t\t\t\t{\n\t\t\t\t\tbooksInvoice.put(\"adjustment\",adjustment);\n\t\t\t\t}\n\t\t\t\tsearchMap = Map();\n\t\t\t\tsearchMap.put(\"date\",dateGroup);\n\t\t\t\tsearchMap.put(\"customer_id\",customerBooks.get(0).get(\"contact_id\"));\n\t\t\t\tinvoiceBooks = zoho.books.getRecords(\"invoices\",org_id,searchMap).get(\"invoices\");\n\t\t\t\tif(invoiceBooks.size() > 0)\n\t\t\t\t{\n\t\t\t\t\terrorsList.add({\"message\":\"Invoice already exists for Date: \" + dateGroup + \" Customer: \" + itemGroupByDateAccount.get(0).get(\"Account_CRM\").get(\"name\")});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsuccessfullyCounter = successfullyCounter + 1;\n\t\t\t\t\tinfo zoho.books.createRecord(\"Invoices\",org_id,booksInvoice);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tinfo \"--------------------\";\n\t}\n\tif(errorsList.size() > 0)\n\t{\n\t\tmessages = '';\n\t\tfor each  item in errorsList\n\t\t{\n\t\t\tmessages = messages + item.get(\"message\") + \" ;\";\n\t\t}\n\t\treturn \"Errors  count: \" + errorsList.size() + \" Messages Errors:\" + messages + \". Create \" + successfullyCounter + \" invoices is successfully\";\n\t}\n\telse\n\t{\n\t\treturn \"Create invoice is successfully!\";\n\t}\n}\n// group by date ************************************************\n// for each  id in idsList\n// {\n// \titem = zoho.crm.getRecordById(\"Upwork_Uploads\",id);\n// \tif(item.get(\"Date\") != startDate)\n// \t{\n// \t\tsortDate.add(item.get(\"Date\"));\n// \t\tstartDate = item.get(\"Date\");\n// \t}\n// \telse\n// \t{\n// \t\tcontinue;\n// \t}\n// }\n// for each  dateGroup in sortDate\n// {\n// \tupworkGroupDate = zoho.crm.searchRecords(\"Upwork_Uploads\",\"(Date:equals:\" + dateGroup + \")\");\n// \tstartAccount = '';\n// \tsortAccount = List();\n// \t// group by Team **************************************************\n// \tfor each  item in upworkGroupDate\n// \t{\n// \t\tif(item.get(\"Team\") != startAccount)\n// \t\t{\n// \t\t\tsortAccount.add(item.get(\"Team\"));\n// \t\t\tstartAccount = item.get(\"Team\");\n// \t\t}\n// \t\telse\n// \t\t{\n// \t\t\tcontinue;\n// \t\t}\n// \t}\n// \tinfo dateGroup;\n// \tinfo sortAccount;\n// \tfor each  unicAccount in sortAccount\n// \t{\n// \t\tif(unicAccount == null)\n// \t\t{\n// \t\t\tcontinue;\n// \t\t}\n// \t\titemGroupByDateAccount = zoho.crm.searchRecords(\"Upwork_Uploads\",\"((Date:equals:\" + dateGroup + \")and (Team:equals:\" + unicAccount + \"))\");\n// \t\tinfo itemGroupByDateAccount.size();\n// \t\tbooksInvoice = Map();\n// \t\tlistVar = List();\n// \t\tadjustment = 0;\n// \t\tfor each  productCRM in itemGroupByDateAccount\n// \t\t{\n// \t\t\tif(productCRM.get(\"Type\") == 'Withdrawal' || productCRM.get(\"Type\") == 'Withdrawal Fee')\n// \t\t\t{\n// \t\t\t\tcontinue;\n// \t\t\t}\n// \t\t\tif(productCRM.get(\"Amount\") < 0)\n// \t\t\t{\n// \t\t\t\tadjustment = adjustment + productCRM.get(\"Amount\");\n// \t\t\t\tcontinue;\n// \t\t\t}\n// \t\t\telse\n// \t\t\t{\n// \t\t\t\tprodBooks = Map();\n// \t\t\t\tprodBooks.put(\"rate\",productCRM.get(\"Amount\"));\n// \t\t\t\tprodBooks.put(\"item_id\",item_books_id);\n// \t\t\t\tprodBooks.put(\"description\",productCRM.get(\"Description\"));\n// \t\t\t\tprodBooks.put(\"quantity\",1);\n// \t\t\t\tlistVar.add(prodBooks);\n// \t\t\t}\n// \t\t}\n// \t\tcustomerBooks = zoho.books.getRecords(\"Contacts\",org_id,{\"contact_name\":itemGroupByDateAccount.get(0).get(\"Account_CRM\").get(\"name\")}).get(\"contacts\");\n// \t\tif(customerBooks.size() > 0)\n// \t\t{\n// \t\t\tbooksInvoice.put(\"customer_id\",customerBooks.get(0).get(\"contact_id\"));\n// \t\t\tbooksInvoice.put(\"line_items\",listVar);\n// \t\t\tbooksInvoice.put(\"date\",dateGroup);\n// \t\t\tif(adjustment < 0)\n// \t\t\t{\n// \t\t\t\tbooksInvoice.put(\"adjustment\",adjustment);\n// \t\t\t}\n// \t\t\tinfo zoho.books.createRecord(\"Invoices\",org_id,booksInvoice);\n// \t\t}\n// \t}\n// \tinfo \"--------------------\";\n// }\n// return \"Create invoice is successfully!\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function17",
        "id": "512029000000858008",
        "modified_by": null,
        "modified_on": 1631094418000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "leadId",
                        "value": "Leads.Lead Id"
                    }
                ],
                "id": 4444945000012203000,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "OZ create: change the field Sales Rep in Accounts",
                "status": true
            },
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "leadId",
                        "value": "Leads.Lead Id"
                    }
                ],
                "id": 4444945000012203000,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "OZ update: change the field Sales Rep in Accounts",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": "if the Lead owner field has changed, then you need to change th",
        "display_name": "OZ: change field Account owner in Leads",
        "id": "512029000000982001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-11-25T10:17:36+01:00",
        "name": "OZ_changeFieldAccountOwne",
        "nameSpace": "automation",
        "params": [
            {
                "name": "leadId",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.OZ_changeFieldAccountOwne(Int leadId)\n{\nLEAD_MODULE = \"Leads\";\nFIELD_ACOUNT_OWNER = \"Account_owner\";\nFIELD_LEAD_OWNER = \"Owner\";\ninfo \"----------------- Start -----------------\";\nlead = zoho.crm.getRecordById(LEAD_MODULE,leadId);\ninfo lead;\ninfo \"----------------- Start -----------------\";\nleadOwner = lead.get(FIELD_LEAD_OWNER);\ninfo \"lead owner: \" + leadOwner;\nlead.put(FIELD_ACOUNT_OWNER,leadOwner);\ninfo lead;\ninfo \"----------------- Update -----------------\";\nresult = zoho.crm.updateRecord(LEAD_MODULE,leadId,lead);\ninfo result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "leadId"
            ]
        },
        "updatedTime": "2021-11-25 01:17:36.0",
        "workflow": "LEAD_MODULE = \"Leads\";\nFIELD_ACOUNT_OWNER = \"Account_owner\";\nFIELD_LEAD_OWNER = \"Owner\";\ninfo \"----------------- Start -----------------\";\nlead = zoho.crm.getRecordById(LEAD_MODULE,leadId);\ninfo lead;\ninfo \"----------------- Start -----------------\";\nleadOwner = lead.get(FIELD_LEAD_OWNER);\ninfo \"lead owner: \" + leadOwner;\nlead.put(FIELD_ACOUNT_OWNER,leadOwner);\ninfo lead;\ninfo \"----------------- Update -----------------\";\nresult = zoho.crm.updateRecord(LEAD_MODULE,leadId,lead);\ninfo result;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": "OZ_updateAllLeads",
        "display_name": "OZ update: all Leads",
        "id": "512029000000986003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1637840748000,
        "name": "OZ_updateAllLeads",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.OZ_updateAllLeads()\n{\nLEAD_MODULE = \"Leads\";\nFIELD_ACOUNT_OWNER = \"Account_owner\";\nFIELD_LEAD_OWNER = \"Owner\";\nLEAD_NUMBER = 48652;\nREQUESTS_NUMBER = 10;\npages = {1};\n//-------------------------\ninfo \"----------------- Start -----------------\";\nfor each  page in pages\n{\n\tleadsOnPage = zoho.crm.getRecords(LEAD_MODULE,page,REQUESTS_NUMBER);\n\tfor each  lead in leadsOnPage\n\t{\n\t\tif(lead.get(FIELD_LEAD_OWNER) != null && lead.get(FIELD_ACOUNT_OWNER) == null)\n\t\t{\n\t\t\tinfo \"----------------- Update start-----------------\";\n\t\t\tinfo \"lead id: \" + lead.get(\"id\");\n\t\t\tinfo \"lead owner: \" + lead.get(FIELD_LEAD_OWNER);\n\t\t\tleadOwner = lead.get(FIELD_LEAD_OWNER);\n\t\t\tlead.put(FIELD_ACOUNT_OWNER,leadOwner);\n\t\t\tinfo lead;\n\t\t\tinfo \"----------------- Update result-----------------\";\n\t\t\tresult = zoho.crm.updateRecord(LEAD_MODULE,lead.get(\"id\"),lead);\n\t\t\tinfo result;\n\t\t}\n\t}\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-11-25 03:45:48.0",
        "workflow": "LEAD_MODULE = \"Leads\";\nFIELD_ACOUNT_OWNER = \"Account_owner\";\nFIELD_LEAD_OWNER = \"Owner\";\nLEAD_NUMBER = 48652;\nREQUESTS_NUMBER = 10;\npages = {1};\n//-------------------------\ninfo \"----------------- Start -----------------\";\nfor each  page in pages\n{\n\tleadsOnPage = zoho.crm.getRecords(LEAD_MODULE,page,REQUESTS_NUMBER);\n\tfor each  lead in leadsOnPage\n\t{\n\t\tif(lead.get(FIELD_LEAD_OWNER) != null && lead.get(FIELD_ACOUNT_OWNER) == null)\n\t\t{\n\t\t\tinfo \"----------------- Update start-----------------\";\n\t\t\tinfo \"lead id: \" + lead.get(\"id\");\n\t\t\tinfo \"lead owner: \" + lead.get(FIELD_LEAD_OWNER);\n\t\t\tleadOwner = lead.get(FIELD_LEAD_OWNER);\n\t\t\tlead.put(FIELD_ACOUNT_OWNER,leadOwner);\n\t\t\tinfo lead;\n\t\t\tinfo \"----------------- Update result-----------------\";\n\t\t\tresult = zoho.crm.updateRecord(LEAD_MODULE,lead.get(\"id\"),lead);\n\t\t\tinfo result;\n\t\t}\n\t}\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function",
        "id": "512029000001267003",
        "modified_by": null,
        "modified_on": 1657116615000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function30",
        "id": "512029000000893001",
        "modified_by": null,
        "modified_on": 1631887695000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testREST",
        "id": "512029000000928001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1632873526000,
        "name": "testREST",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testREST()\n{\ninfo zoho.crm.getRecordById('Purchase_Orders',4444945000008889080);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-09-28 16:58:46.0",
        "workflow": "info zoho.crm.getRecordById('Purchase_Orders',4444945000008889080);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Variable_Function2",
        "id": "512029000000934008",
        "modified_by": null,
        "modified_on": 1633007105000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "TestDenis2",
        "id": "512029000000878008",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1631262801000,
        "name": "TestDenis2",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "request_id",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.TestDenis2(Int request_id)\n{\nres = zoho.sign.submitRequest(request_id,Map());\ninfo res;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho Sign",
                    "function": "zoho.sign.submitRequest",
                    "service": "ZohoSign"
                }
            ],
            "params": [
                "request_id"
            ]
        },
        "updatedTime": "2021-09-10 01:33:21.0",
        "workflow": "res = zoho.sign.submitRequest(request_id,Map());\ninfo res;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Variable_Function1",
        "id": "512029000000934001",
        "modified_by": null,
        "modified_on": 1633007105000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testRest",
        "id": "512029000000924003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1632878117000,
        "name": "testRest",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testRest()\n{\nm = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\napikeyresp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\nzapikey = apikeyresp.get(\"response\");\ninfo zapikey;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-09-28 18:15:17.0",
        "workflow": "m = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\napikeyresp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\nzapikey = apikeyresp.get(\"response\");\ninfo zapikey;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test4",
        "id": "512029000000995001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1638174895000,
        "name": "test41",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test41()\n{\nr = zoho.crm.updateRecord(\"Leads\",4444945000012197163,{\"Street\":\"test1\"},{\"trigger\":{\"workflow\"}});\ninfo r;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-11-29 00:34:55.0",
        "workflow": "r = zoho.crm.updateRecord(\"Leads\",4444945000012197163,{\"Street\":\"test1\"},{\"trigger\":{\"workflow\"}});\ninfo r;\nreturn \"\";"
    },
    {
        "api_name": "asdsa",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000002360001",
                "connectionLinkName": "crm",
                "connectionName": "crm",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.calls.CREATE",
                    "ZohoCRM.modules.calls.READ",
                    "ZohoCRM.modules.notes.ALL",
                    "ZohoCRM.modules.zoho_projects.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.send_mail.ALL.CREATE",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.emails.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.fields.READ",
                    "ZohoCRM.settings.layouts.READ",
                    "ZohoCRM.settings.layouts.read",
                    "ZohoCRM.settings.modules.READ",
                    "ZohoCRM.settings.related_lists.all",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test",
        "id": "512029000000957001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-03-04T13:28:13+01:00",
        "name": "asdsa",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/asdsa/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/asdsa/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.asdsa()\n{\ndata = {\"data\":{{\"Owner\":{\"name\":\"Oliver Oliver Gran\",\"id\":\"4444945000000258001\",\"email\":\"info2@crmoz.com\"},\"$currency_symbol\":\"$\",\"$field_states\":null,\"Tax\":0,\"$sharing_permission\":\"full_access\",\"Image\":null,\"Last_Activity_Time\":\"2025-03-04T13:16:59+01:00\",\"Invoiced_Items\":{{\"Modified_Time\":\"2025-03-04T13:16:59+01:00\",\"Description\":\"Test Product\",\"Discount\":0,\"$field_states\":null,\"Created_Time\":\"2022-10-04T14:30:56+02:00\",\"Parent_Id\":{\"name\":\"Xero INV-0002\",\"id\":\"4444945000021306011\"},\"Sequence_Number\":\"1\",\"Product_Name\":{\"Product_Code\":\"Test\",\"Qty_Ordered\":0,\"Layout\":{\"id\":\"4444945000000091009\"},\"name\":\"Test Product\",\"Qty_in_Stock\":-4,\"Tax\":{{\"id\":\"4444945000000021001\",\"value\":\"Sales Tax - 20.0 %\"}},\"id\":\"4444945000021303001\",\"Taxable\":true,\"Unit_Price\":32,\"Reorder_Level\":0},\"Quantity\":3,\"Tax\":19.2,\"$layout_id\":{\"name\":\"Standard\",\"id\":\"4444945000000234672\"},\"Net_Total\":115.2,\"$in_merge\":false,\"Total\":96,\"Line_Tax\":{},\"Price_Book_Name\":null,\"List_Price\":32,\"id\":\"4444945000021311003\",\"$zia_visions\":null,\"Total_After_Discount\":96},{\"Modified_Time\":\"2025-03-04T13:16:59+01:00\",\"Description\":\"test prod 2\",\"Discount\":0,\"$field_states\":null,\"Created_Time\":\"2022-10-04T14:30:56+02:00\",\"Parent_Id\":{\"name\":\"Xero INV-0002\",\"id\":\"4444945000021306011\"},\"Sequence_Number\":\"2\",\"Product_Name\":{\"Product_Code\":\"Test 2\",\"Qty_Ordered\":0,\"Layout\":{\"id\":\"4444945000000091009\"},\"name\":\"test prod 2\",\"Qty_in_Stock\":-5,\"Tax\":{},\"id\":\"4444945000021310001\",\"Taxable\":true,\"Unit_Price\":46,\"Reorder_Level\":0},\"Quantity\":5,\"Tax\":0,\"$layout_id\":{\"name\":\"Standard\",\"id\":\"4444945000000234672\"},\"Net_Total\":230,\"$in_merge\":false,\"Total\":230,\"Line_Tax\":{},\"Price_Book_Name\":null,\"List_Price\":46,\"id\":\"4444945000021311004\",\"$zia_visions\":null,\"Total_After_Discount\":230}},\"Books_ID\":null,\"$process_flow\":false,\"Exchange_Rate\":1,\"Billing_Country\":null,\"Currency\":\"USD\",\"$locked_for_me\":false,\"id\":\"4444945000021306011\",\"Status\":\"DRAFT\",\"Grand_Total\":330.43,\"$approval\":{\"delegate\":false,\"takeover\":false,\"approve\":false,\"reject\":false,\"resubmit\":false},\"Adjustment\":9.6,\"Billing_Street\":null,\"Created_Time\":\"2022-10-04T14:08:15+02:00\",\"$wizard_connection_path\":null,\"$editable\":true,\"Billing_Code\":null,\"Shipping_City\":null,\"Shipping_Country\":null,\"Shipping_Code\":null,\"Billing_City\":null,\"Created_By\":{\"name\":\"Oliver Oliver Gran\",\"id\":\"4444945000000258001\",\"email\":\"info2@crmoz.com\"},\"Shipping_Street\":null,\"Description\":null,\"Discount\":24.37,\"Shipping_State\":null,\"$review_process\":{\"approve\":false,\"reject\":false,\"resubmit\":false},\"$layout_id\":{\"name\":\"Standard\",\"id\":\"4444945000000091045\"},\"Modified_By\":{\"name\":\"Oliver Oliver Gran\",\"id\":\"4444945000000258001\",\"email\":\"info2@crmoz.com\"},\"$review\":null,\"Account_Name\":{\"name\":\"Test\",\"id\":\"4444945000021302001\"},\"xerotozohocrm__Xero_ID\":null,\"$zia_visions\":null,\"Modified_Time\":\"2025-03-04T13:16:59+01:00\",\"Terms_and_Conditions\":null,\"Sub_Total\":345.2,\"Vendor\":null,\"Record_Status__s\":\"Available\",\"Subject\":\"Xero INV-0002\",\"$orchestration\":false,\"Contact_Name\":null,\"field1\":null,\"$in_merge\":false,\"Locked__s\":false,\"Billing_State\":null,\"$line_tax\":{},\"Tag\":{},\"field3\":null,\"$approval_state\":\"approved\",\"$pathfinder\":false,\"field2\":null,\"$has_more\":{\"Invoiced_Items\":false}}}};\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v7/Invoices/4444945000021306011\"\n\ttype :PUT\n\tparameters:data.toString()\n\tconnection:\"crm\"\n];\ninfo resp;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "crm",
                    "method": "put",
                    "url": "https://www.zohoapis.com/crm/v7/Invoices/4444945000021306011"
                }
            ]
        },
        "updatedTime": "2025-03-04 04:28:13.0",
        "workflow": "data = {\"data\":{{\"Owner\":{\"name\":\"Oliver Oliver Gran\",\"id\":\"4444945000000258001\",\"email\":\"info2@crmoz.com\"},\"$currency_symbol\":\"$\",\"$field_states\":null,\"Tax\":0,\"$sharing_permission\":\"full_access\",\"Image\":null,\"Last_Activity_Time\":\"2025-03-04T13:16:59+01:00\",\"Invoiced_Items\":{{\"Modified_Time\":\"2025-03-04T13:16:59+01:00\",\"Description\":\"Test Product\",\"Discount\":0,\"$field_states\":null,\"Created_Time\":\"2022-10-04T14:30:56+02:00\",\"Parent_Id\":{\"name\":\"Xero INV-0002\",\"id\":\"4444945000021306011\"},\"Sequence_Number\":\"1\",\"Product_Name\":{\"Product_Code\":\"Test\",\"Qty_Ordered\":0,\"Layout\":{\"id\":\"4444945000000091009\"},\"name\":\"Test Product\",\"Qty_in_Stock\":-4,\"Tax\":{{\"id\":\"4444945000000021001\",\"value\":\"Sales Tax - 20.0 %\"}},\"id\":\"4444945000021303001\",\"Taxable\":true,\"Unit_Price\":32,\"Reorder_Level\":0},\"Quantity\":3,\"Tax\":19.2,\"$layout_id\":{\"name\":\"Standard\",\"id\":\"4444945000000234672\"},\"Net_Total\":115.2,\"$in_merge\":false,\"Total\":96,\"Line_Tax\":{},\"Price_Book_Name\":null,\"List_Price\":32,\"id\":\"4444945000021311003\",\"$zia_visions\":null,\"Total_After_Discount\":96},{\"Modified_Time\":\"2025-03-04T13:16:59+01:00\",\"Description\":\"test prod 2\",\"Discount\":0,\"$field_states\":null,\"Created_Time\":\"2022-10-04T14:30:56+02:00\",\"Parent_Id\":{\"name\":\"Xero INV-0002\",\"id\":\"4444945000021306011\"},\"Sequence_Number\":\"2\",\"Product_Name\":{\"Product_Code\":\"Test 2\",\"Qty_Ordered\":0,\"Layout\":{\"id\":\"4444945000000091009\"},\"name\":\"test prod 2\",\"Qty_in_Stock\":-5,\"Tax\":{},\"id\":\"4444945000021310001\",\"Taxable\":true,\"Unit_Price\":46,\"Reorder_Level\":0},\"Quantity\":5,\"Tax\":0,\"$layout_id\":{\"name\":\"Standard\",\"id\":\"4444945000000234672\"},\"Net_Total\":230,\"$in_merge\":false,\"Total\":230,\"Line_Tax\":{},\"Price_Book_Name\":null,\"List_Price\":46,\"id\":\"4444945000021311004\",\"$zia_visions\":null,\"Total_After_Discount\":230}},\"Books_ID\":null,\"$process_flow\":false,\"Exchange_Rate\":1,\"Billing_Country\":null,\"Currency\":\"USD\",\"$locked_for_me\":false,\"id\":\"4444945000021306011\",\"Status\":\"DRAFT\",\"Grand_Total\":330.43,\"$approval\":{\"delegate\":false,\"takeover\":false,\"approve\":false,\"reject\":false,\"resubmit\":false},\"Adjustment\":9.6,\"Billing_Street\":null,\"Created_Time\":\"2022-10-04T14:08:15+02:00\",\"$wizard_connection_path\":null,\"$editable\":true,\"Billing_Code\":null,\"Shipping_City\":null,\"Shipping_Country\":null,\"Shipping_Code\":null,\"Billing_City\":null,\"Created_By\":{\"name\":\"Oliver Oliver Gran\",\"id\":\"4444945000000258001\",\"email\":\"info2@crmoz.com\"},\"Shipping_Street\":null,\"Description\":null,\"Discount\":24.37,\"Shipping_State\":null,\"$review_process\":{\"approve\":false,\"reject\":false,\"resubmit\":false},\"$layout_id\":{\"name\":\"Standard\",\"id\":\"4444945000000091045\"},\"Modified_By\":{\"name\":\"Oliver Oliver Gran\",\"id\":\"4444945000000258001\",\"email\":\"info2@crmoz.com\"},\"$review\":null,\"Account_Name\":{\"name\":\"Test\",\"id\":\"4444945000021302001\"},\"xerotozohocrm__Xero_ID\":null,\"$zia_visions\":null,\"Modified_Time\":\"2025-03-04T13:16:59+01:00\",\"Terms_and_Conditions\":null,\"Sub_Total\":345.2,\"Vendor\":null,\"Record_Status__s\":\"Available\",\"Subject\":\"Xero INV-0002\",\"$orchestration\":false,\"Contact_Name\":null,\"field1\":null,\"$in_merge\":false,\"Locked__s\":false,\"Billing_State\":null,\"$line_tax\":{},\"Tag\":{},\"field3\":null,\"$approval_state\":\"approved\",\"$pathfinder\":false,\"field2\":null,\"$has_more\":{\"Invoiced_Items\":false}}}};\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v7/Invoices/4444945000021306011\"\n\ttype :PUT\n\tparameters:data.toString()\n\tconnection:\"crm\"\n];\ninfo resp;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "display_name": "testFunc",
        "id": "512029000001019001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1639553300000,
        "name": "testFunc",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.testFunc()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-12-14 23:28:20.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "RejectionAllert",
        "id": "512029000000754001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1629988019000,
        "name": "RejectionAllert",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.RejectionAllert()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-08-26 07:26:59.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": [
                    {
                        "name": "accountId",
                        "value": "Accounts.Account Id"
                    }
                ],
                "id": "4444945000011308051",
                "isOldDataNeeded": false,
                "module": "Accounts",
                "name": "CloseAllTask"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "CloseAllTask",
        "id": "512029000000920001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-09-28T20:06:52+02:00",
        "name": "CloseAllTask",
        "nameSpace": "automation",
        "params": [
            {
                "name": "accountId",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.CloseAllTask(Int accountId)\n{\ntasks = zoho.crm.getRelatedRecords(\"Tasks\",\"Accounts\",accountId);\nfor each  task in tasks\n{\n\tstatus = task.get('Status');\n\tif(status != 'Completed')\n\t{\n\t\tinfo zoho.crm.updateRecord(\"Tasks\",task.get(\"id\"),{'Status':'Completed'});\n\t}\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRelatedRecords",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "accountId"
            ]
        },
        "updatedTime": "2021-09-28 11:06:52.0",
        "workflow": "tasks = zoho.crm.getRelatedRecords(\"Tasks\",\"Accounts\",accountId);\nfor each  task in tasks\n{\n\tstatus = task.get('Status');\n\tif(status != 'Completed')\n\t{\n\t\tinfo zoho.crm.updateRecord(\"Tasks\",task.get(\"id\"),{'Status':'Completed'});\n\t}\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001752001",
                "connectionLinkName": "zoho_widget",
                "connectionName": "zoho_widget",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.Files.READ",
                    "ZohoCRM.functions.execute.CREATE",
                    "ZohoCRM.functions.execute.READ",
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.events.CREATE",
                    "ZohoCRM.modules.events.READ",
                    "ZohoCRM.modules.leads.WRITE",
                    "ZohoCRM.modules.salesorders.WRITE",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.templates.inventory.READ",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL",
                    "zohocrm.functions.execute.CREATE"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testMS",
        "id": "512029000001262001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-08-15T12:44:42+02:00",
        "name": "testMS",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.testMS()\n{\n/*dealId = 4444945000013492034;\ndealDetails = zoho.crm.getRecordById(\"Deals\",dealId);\nf = dealDetails.get(\"MultiSelect\");\naccId = dealDetails.get(\"Account_Name\").get(\"id\");\ninfo zoho.crm.updateRecord(\"Accounts\",accId,{\"MultiSelect\":f});*/\n/*resp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2.1/Purchase_Items\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\ninfo resp;\n*/\n/*response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2/users\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\ninfo response;*/\nheader_data = Map();\nheader_data.put(\"Content-Type\",\"application/x-www-form-urlencoded\");\nparamsMap = Map();\nparamsMap.put(\"feature_name\",\"widgets_render\");\nparamsMap.put(\"type\",\"telephony\");\nparamsMap.put(\"platform\",\"web\");\nresponse = invokeurl\n[\n\turl :\"https://crm.zoho.com/crm/v2/__internal/client_tracking\"\n\ttype :POST\n\tparameters:paramsMap\n\theaders:header_data\n\tconnection:\"zoho_widget\"\n];\ninfo response;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_widget",
                    "method": "post",
                    "url": "https://crm.zoho.com/crm/v2/__internal/client_tracking"
                }
            ]
        },
        "updatedTime": "2023-08-15 03:44:43.0",
        "workflow": "/*dealId = 4444945000013492034;\ndealDetails = zoho.crm.getRecordById(\"Deals\",dealId);\nf = dealDetails.get(\"MultiSelect\");\naccId = dealDetails.get(\"Account_Name\").get(\"id\");\ninfo zoho.crm.updateRecord(\"Accounts\",accId,{\"MultiSelect\":f});*/\n/*resp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2.1/Purchase_Items\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\ninfo resp;\n*/\n/*response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2/users\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\ninfo response;*/\nheader_data = Map();\nheader_data.put(\"Content-Type\",\"application/x-www-form-urlencoded\");\nparamsMap = Map();\nparamsMap.put(\"feature_name\",\"widgets_render\");\nparamsMap.put(\"type\",\"telephony\");\nparamsMap.put(\"platform\",\"web\");\nresponse = invokeurl\n[\n\turl :\"https://crm.zoho.com/crm/v2/__internal/client_tracking\"\n\ttype :POST\n\tparameters:paramsMap\n\theaders:header_data\n\tconnection:\"zoho_widget\"\n];\ninfo response;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "salessignals",
        "config": false,
        "display_name": "TestDenis",
        "id": "512029000000878003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1631261558000,
        "name": "TestDenis",
        "nameSpace": "salessignals",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void salessignals.TestDenis()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-09-10 01:12:38.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function8",
        "id": "512029000000935008",
        "modified_by": null,
        "modified_on": 1633007110000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function29",
        "id": "512029000000892001",
        "modified_by": null,
        "modified_on": 1631887695000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "whatsappforzohocrm__incominghandler",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "incominghandler",
        "id": "512029000000895001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-09-17T16:08:12+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/whatsappforzohocrm__incominghandler/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/whatsappforzohocrm__incominghandler/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test_st",
        "id": "512029000000952001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1633966115000,
        "name": "test_st",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test_st()\n{\nresp = zoho.crm.updateRelatedRecord(\"Contacts\",4444945000010665056,\"Accounts\",4444945000010661090,{\"Phone\":\"12345678\"});\ninfo resp;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRelatedRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-10-11 08:28:35.0",
        "workflow": "resp = zoho.crm.updateRelatedRecord(\"Contacts\",4444945000010665056,\"Accounts\",4444945000010661090,{\"Phone\":\"12345678\"});\ninfo resp;\nreturn \"\";"
    },
    {
        "api_name": "whatsappforzohocrm__webhookapi",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "webhookapi",
        "id": "512029000000889003",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-09-17T16:08:12+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/whatsappforzohocrm__webhookapi/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/whatsappforzohocrm__webhookapi/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "alertRejection",
        "id": "512029000000755001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1629988501000,
        "name": "alertRejection",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.alertRejection()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-08-26 07:35:01.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function23",
        "id": "512029000000864001",
        "modified_by": null,
        "modified_on": 1631094418000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "display_name": "test",
        "id": "512029000000998001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1638530630000,
        "name": "test2",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test2()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-12-03 03:23:50.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "relatedlist",
        "config": false,
        "display_name": "Test",
        "id": "512029000001261001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1656675369000,
        "name": "Test",
        "nameSpace": "related_list",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string related_list.Test()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2022-07-01 04:36:09.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function6",
        "id": "512029000000891001",
        "modified_by": null,
        "modified_on": 1631887694000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "TestDenis1",
        "id": "512029000000879001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1631261592000,
        "name": "TestDenis1",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.TestDenis1()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-09-10 01:13:12.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "crmfundamentals",
        "config": false,
        "description": null,
        "display_name": "test2",
        "id": "512029000001195015",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-05-24T12:51:38+02:00",
        "name": "test2",
        "nameSpace": "validation_rule",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "MAP",
        "script": "map validation_rule.test2(String crmAPIRequest)\n{\n/* The snippet below shows you how to get a list of fields, their values from a MAP object. The fields’ values can be obtained from the same MAP object.                                                  */\nentityMap = crmAPIRequest.toMap().get(\"record\");\n/* The example below demonstrates how a field’s value (email) can be obtained from a MAP object. Here, entityMap - Map Object, Email - Field's API name\nSample entityMap= {'Email': 'xxx@xxx.com', 'Last_Name': 'xxx'};                                   */\ndate1 = null;\ndate2 = null;\nkeys = entityMap.keys();\nif(entityMap.get(\"Date_1\") != null)\n{\n\tdate1 = entityMap.get(\"Date_1\");\n}\nif(entityMap.get(\"Date_2\") != null)\n{\n\tdate2 = entityMap.get(\"Date_2\");\n}\nresponse = Map();\n/* ---------------------------------------------------------------------------------------------- */\n/* Start writing your code here to perform the necessary field validation                         */\n/* ---------------------------------------------------------------------------------------------- */\n/* If the code identifies a validation error, set the status and alert message as shown below:    */\n//response.put('status','error');\n//response.put('message', '<your message(100 characters)>');\n/* If there are no errors found during validation, set the status as shown below:                 */\nif(date1 != '' && date2 != '')\n{\n\tif(date1.toDate() > date2.toDate())\n\t{\n\t\tresponse.put('status','error');\n\t\tresponse.put('message','The end date can not be earlier than start date.');\n\t}\n\telse\n\t{\n\t\tresponse.put('status','success');\n\t}\n}\nelse\n{\n\tresponse.put('status','success');\n}\n/* ---------------------------------------------------------------------------------------------- */\nreturn response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false,
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-05-24 03:51:38.0",
        "workflow": "/* The snippet below shows you how to get a list of fields, their values from a MAP object. The fields’ values can be obtained from the same MAP object.                                                  */\nentityMap = crmAPIRequest.toMap().get(\"record\");\n/* The example below demonstrates how a field’s value (email) can be obtained from a MAP object. Here, entityMap - Map Object, Email - Field's API name\nSample entityMap= {'Email': 'xxx@xxx.com', 'Last_Name': 'xxx'};                                   */\ndate1 = null;\ndate2 = null;\nkeys = entityMap.keys();\nif(entityMap.get(\"Date_1\") != null)\n{\n\tdate1 = entityMap.get(\"Date_1\");\n}\nif(entityMap.get(\"Date_2\") != null)\n{\n\tdate2 = entityMap.get(\"Date_2\");\n}\nresponse = Map();\n/* ---------------------------------------------------------------------------------------------- */\n/* Start writing your code here to perform the necessary field validation                         */\n/* ---------------------------------------------------------------------------------------------- */\n/* If the code identifies a validation error, set the status and alert message as shown below:    */\n//response.put('status','error');\n//response.put('message', '<your message(100 characters)>');\n/* If there are no errors found during validation, set the status as shown below:                 */\nif(date1 != '' && date2 != '')\n{\n\tif(date1.toDate() > date2.toDate())\n\t{\n\t\tresponse.put('status','error');\n\t\tresponse.put('message','The end date can not be earlier than start date.');\n\t}\n\telse\n\t{\n\t\tresponse.put('status','success');\n\t}\n}\nelse\n{\n\tresponse.put('status','success');\n}\n/* ---------------------------------------------------------------------------------------------- */\nreturn response;"
    },
    {
        "api_name": "whatsappforzohocrm__sendwhatsapp",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "sendwhatsapp",
        "id": "512029000000894001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-09-17T16:08:12+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/whatsappforzohocrm__sendwhatsapp/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/whatsappforzohocrm__sendwhatsapp/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "whatsappforzohocrm__whatcetra_notifications",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "whatcetra_notifications",
        "id": "512029000000889010",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-09-17T16:08:12+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/whatsappforzohocrm__whatcetra_notifications/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/whatsappforzohocrm__whatcetra_notifications/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000000955001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1634052519000,
        "name": "test1",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test1()\n{\na = zoho.crm.getRecordById(\"Sales_Orders\",4444945000010675001);\ninfo a;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-10-12 08:28:39.0",
        "workflow": "a = zoho.crm.getRecordById(\"Sales_Orders\",4444945000010675001);\ninfo a;\nreturn \"\";"
    },
    {
        "api_name": "ftestfromforms",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "fTestFromForms",
        "id": "512029000001082001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-02-08T11:37:57+01:00",
        "name": "fTestFromForms",
        "nameSpace": "automation",
        "params": [
            {
                "name": "name",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/ftestfromforms/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/ftestfromforms/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.fTestFromForms(String name)\n{\ninsertMap = Map();\ninsertMap.put(\"Deal_Name\",name);\ninsertMap.put(\"Account_Name\",\"4444945000013492028\");\ninsertMap.put(\"Vendor\",\"4444945000009265003\");\ninsertMap.put(\"Stage\",\"New Deal\");\ninsertMap.put(\"Pipeline\",\"Elate\");\ninsertMap.put(\"Closing_Date\",now.toDate());\nzoho.crm.createRecord(\"Deals\",insertMap);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "name"
            ]
        },
        "updatedTime": "2022-02-08 02:37:57.0",
        "workflow": "insertMap = Map();\ninsertMap.put(\"Deal_Name\",name);\ninsertMap.put(\"Account_Name\",\"4444945000013492028\");\ninsertMap.put(\"Vendor\",\"4444945000009265003\");\ninsertMap.put(\"Stage\",\"New Deal\");\ninsertMap.put(\"Pipeline\",\"Elate\");\ninsertMap.put(\"Closing_Date\",now.toDate());\nzoho.crm.createRecord(\"Deals\",insertMap);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "test",
        "id": "512029000000951001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1633939865000,
        "name": "test7",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test7()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-10-11 01:11:05.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "crmfundamentals",
        "config": false,
        "description": null,
        "display_name": "alertRejection",
        "id": "512029000000756001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-08-26T17:09:56+02:00",
        "name": "alertRejection",
        "nameSpace": "validation_rule",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "MAP",
        "script": "map validation_rule.alertRejection(string crmAPIRequest)\n{\n/* The snippet below shows you how to get a list of fields, their values from a MAP object. The fields’ values can be obtained from the same MAP object.                                                  */\nentityMap = crmAPIRequest.toMap().get(\"record\");\n/* The example below demonstrates how a field’s value (email) can be obtained from a MAP object. Here, entityMap - Map Object, Email - Field's API name\nSample entityMap= {'Email': 'xxx@xxx.com', 'Last_Name': 'xxx'};                                   */\nemail = entityMap.get(\"Email\");\nresponse = Map();\n/* ---------------------------------------------------------------------------------------------- */\n/* Start writing your code here to perform the necessary field validation                         */\n/* ---------------------------------------------------------------------------------------------- */\n/* If the code identifies a validation error, set the status and alert message as shown below:    */\n//response.put('status','error');\n//response.put('message', '<your message(100 characters)>');\n/* If there are no errors found during validation, set the status as shown below:                 */\nresponse.put('status','success');\n/* ---------------------------------------------------------------------------------------------- */\nreturn response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false,
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2021-08-26 08:09:50.0",
        "workflow": "/* The snippet below shows you how to get a list of fields, their values from a MAP object. The fields’ values can be obtained from the same MAP object.                                                  */\nentityMap = crmAPIRequest.toMap().get(\"record\");\n/* The example below demonstrates how a field’s value (email) can be obtained from a MAP object. Here, entityMap - Map Object, Email - Field's API name\nSample entityMap= {'Email': 'xxx@xxx.com', 'Last_Name': 'xxx'};                                   */\nemail = entityMap.get(\"Email\");\nresponse = Map();\n/* ---------------------------------------------------------------------------------------------- */\n/* Start writing your code here to perform the necessary field validation                         */\n/* ---------------------------------------------------------------------------------------------- */\n/* If the code identifies a validation error, set the status and alert message as shown below:    */\n//response.put('status','error');\n//response.put('message', '<your message(100 characters)>');\n/* If there are no errors found during validation, set the status as shown below:                 */\nresponse.put('status','success');\n/* ---------------------------------------------------------------------------------------------- */\nreturn response;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test3",
        "id": "512029000000888001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1631871860000,
        "name": "test3",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test3()\n{\nresponseMap = Map();\nreserved = {\"Template 1\",\"Template 2\",\"Template 3\"};\nbaseUrl = \"https://rest.clicksend.com/v3\";\napikey = '84A6C2F3-E307-DB03-84E2-43DBF5C26B32';\nlogin = 'jcortes';\nresp = getUrl(baseUrl + \"/sms/templates\",{\"Content-Type\":\"application/json\",\"Authorization\":\"Basic \" + zoho.encryption.base64Encode(login + \":\" + apikey)});\ncurrentPage = 1;\nlastPage = resp.getJSON(\"data\").getJSON(\"last_page\").toLong();\ntemplates = resp.getJSON(\"data\").getJSON(\"data\").toJSONList();\nresponseMap.put(\"page1\",templates);\niterations = lastPage;\niterationString = \"\".leftPad(iterations).replaceAll(\" \",\",\").toList().subList(0,iterations);\nfor each  el in iterationString\n{\n\t// Do Something\n\tcurrentPage = currentPage + 1;\n\tresp = getUrl(baseUrl + \"/sms/templates?page=\" + currentPage,{\"Content-Type\":\"application/json\",\"Authorization\":\"Basic \" + zoho.encryption.base64Encode(login + \":\" + apikey)});\n\ttemplates = resp.getJSON(\"data\").getJSON(\"data\").toJSONList();\n\tresponseMap.put(\"page\" + currentPage,templates);\n\tinfo currentPage;\n}\nfor each  templatePage in responseMap\n{\n\tfor each  template in templatePage\n\t{\n\t\t// info template.getJSON(\"template_name\");\n\t\tif(reserved.contains(template.getJSON(\"template_name\")))\n\t\t{\n\t\t\treserved.removeElement(template.getJSON(\"template_name\"));\n\t\t}\n\t}\n}\ninfo reserved;\n//info responseList;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2021-09-17 02:44:20.0",
        "workflow": "responseMap = Map();\nreserved = {\"Template 1\",\"Template 2\",\"Template 3\"};\nbaseUrl = \"https://rest.clicksend.com/v3\";\napikey = '84A6C2F3-E307-DB03-84E2-43DBF5C26B32';\nlogin = 'jcortes';\nresp = getUrl(baseUrl + \"/sms/templates\",{\"Content-Type\":\"application/json\",\"Authorization\":\"Basic \" + zoho.encryption.base64Encode(login + \":\" + apikey)});\ncurrentPage = 1;\nlastPage = resp.getJSON(\"data\").getJSON(\"last_page\").toLong();\ntemplates = resp.getJSON(\"data\").getJSON(\"data\").toJSONList();\nresponseMap.put(\"page1\",templates);\niterations = lastPage;\niterationString = \"\".leftPad(iterations).replaceAll(\" \",\",\").toList().subList(0,iterations);\nfor each  el in iterationString\n{\n\t// Do Something\n\tcurrentPage = currentPage + 1;\n\tresp = getUrl(baseUrl + \"/sms/templates?page=\" + currentPage,{\"Content-Type\":\"application/json\",\"Authorization\":\"Basic \" + zoho.encryption.base64Encode(login + \":\" + apikey)});\n\ttemplates = resp.getJSON(\"data\").getJSON(\"data\").toJSONList();\n\tresponseMap.put(\"page\" + currentPage,templates);\n\tinfo currentPage;\n}\nfor each  templatePage in responseMap\n{\n\tfor each  template in templatePage\n\t{\n\t\t// info template.getJSON(\"template_name\");\n\t\tif(reserved.contains(template.getJSON(\"template_name\")))\n\t\t{\n\t\t\treserved.removeElement(template.getJSON(\"template_name\"));\n\t\t}\n\t}\n}\ninfo reserved;\n//info responseList;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000000837001",
                "connectionLinkName": "zoho_projects",
                "connectionName": "Zoho Projects",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoPC.files.ALL",
                    "ZohoProjects.activities.ALL",
                    "ZohoProjects.bugs.UPDATE",
                    "ZohoProjects.chats.ALL",
                    "ZohoProjects.clients.CREATE",
                    "ZohoProjects.clients.READ",
                    "ZohoProjects.documents.ALL",
                    "ZohoProjects.events.ALL",
                    "ZohoProjects.forums.ALL",
                    "ZohoProjects.milestones.ALL",
                    "ZohoProjects.milestones.CREATE",
                    "ZohoProjects.milestones.READ",
                    "ZohoProjects.milestones.UPDATE",
                    "ZohoProjects.portals.ALL",
                    "ZohoProjects.portals.READ",
                    "ZohoProjects.projects.ALL",
                    "ZohoProjects.projects.CREATE",
                    "ZohoProjects.projects.READ",
                    "ZohoProjects.projects.UPDATE",
                    "ZohoProjects.search.READ",
                    "ZohoProjects.status.ALL",
                    "ZohoProjects.tags.ALL",
                    "ZohoProjects.tags.READ",
                    "ZohoProjects.tasklists.ALL",
                    "ZohoProjects.tasklists.CREATE",
                    "ZohoProjects.tasklists.READ",
                    "ZohoProjects.tasklists.UPDATE",
                    "ZohoProjects.tasks.ALL",
                    "ZohoProjects.tasks.CREATE",
                    "ZohoProjects.tasks.DELETE",
                    "ZohoProjects.tasks.READ",
                    "ZohoProjects.tasks.UPDATE",
                    "ZohoProjects.timesheets.ALL",
                    "ZohoProjects.timesheets.CREATE",
                    "ZohoProjects.timesheets.UPDATE",
                    "ZohoProjects.users.ALL",
                    "ZohoProjects.users.CREATE",
                    "ZohoProjects.users.READ"
                ],
                "serviceName": "zoho_projects",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "TestIgor",
        "id": "512029000000750001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1631015772000,
        "name": "TestIgor",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.TestIgor()\n{\n/* Получаем все проекты */\nresponse = invokeurl\n[\n\turl :\"https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/\"\n\ttype :GET\n\tparameters:\"\"\n\tconnection:\"zoho_projects\"\n];\n/* ----------- */\n/* Получаем проекты в СРМ */\nCRM_Project = zoho.crm.getRecords(\"Project\");\nCRM_ProjectList = List();\nfor each  itemProject in CRM_Project\n{\n\tCRM_ProjectList.add(itemProject.get(\"Name\"));\n}\n/* ----------- */\nprojectName = \"Task Document Review 2\";\ntoProject = 1590562000001764043;\nprojectList = List();\n/* Перебираем полученные данные проектов */\nfor each  item in response.get(\"projects\")\n{\n\t//projectList.add(item.get(\"name\"));\n\t/* Создаем проекты в СРМ в разделе Project */\n\tif(CRM_ProjectList.notContains(item.get(\"name\")))\n\t{\n\t\t//info item.get(\"name\");\n\t\tprojectinfo = {\"Name\":item.get(\"name\")};\n\t\tinfo zoho.crm.createRecord(\"Project\",projectinfo);\n\t}\n}\n/* Добавляем проект. Если уже есть проект с подобным названием, то проект не создастся. */\n/* if(projectList.notContains(projectName))\n{\n\tvalues_map = Map();\n\tvalues_map.put(\"name\",projectName);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/\"\n\t\ttype :POST\n\t\tparameters:values_map\n\t\tconnection:\"zoho_projects\"\n\t];\n} */\n/* Добавляем задачу в определенный проект */\n/* if(projectList.notContains(projectName))\n{\n\tvalues_map = Map();\n\tvalues_map.put(\"name\",projectName);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/\" + toProject + \"/tasks/\"\n\t\ttype :POST\n\t\tparameters:values_map\n\t\tconnection:\"zoho_projects\"\n\t];\n}\ninfo projectList; */\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecords",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "zoho_projects",
                    "method": "get",
                    "url": "https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/"
                }
            ]
        },
        "updatedTime": "2021-09-07 04:56:12.0",
        "workflow": "/* Получаем все проекты */\nresponse = invokeurl\n[\n\turl :\"https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/\"\n\ttype :GET\n\tparameters:\"\"\n\tconnection:\"zoho_projects\"\n];\n/* ----------- */\n/* Получаем проекты в СРМ */\nCRM_Project = zoho.crm.getRecords(\"Project\");\nCRM_ProjectList = List();\nfor each  itemProject in CRM_Project\n{\n\tCRM_ProjectList.add(itemProject.get(\"Name\"));\n}\n/* ----------- */\nprojectName = \"Task Document Review 2\";\ntoProject = 1590562000001764043;\nprojectList = List();\n/* Перебираем полученные данные проектов */\nfor each  item in response.get(\"projects\")\n{\n\t//projectList.add(item.get(\"name\"));\n\t/* Создаем проекты в СРМ в разделе Project */\n\tif(CRM_ProjectList.notContains(item.get(\"name\")))\n\t{\n\t\t//info item.get(\"name\");\n\t\tprojectinfo = {\"Name\":item.get(\"name\")};\n\t\tinfo zoho.crm.createRecord(\"Project\",projectinfo);\n\t}\n}\n/* Добавляем проект. Если уже есть проект с подобным названием, то проект не создастся. */\n/* if(projectList.notContains(projectName))\n{\n\tvalues_map = Map();\n\tvalues_map.put(\"name\",projectName);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/\"\n\t\ttype :POST\n\t\tparameters:values_map\n\t\tconnection:\"zoho_projects\"\n\t];\n} */\n/* Добавляем задачу в определенный проект */\n/* if(projectList.notContains(projectName))\n{\n\tvalues_map = Map();\n\tvalues_map.put(\"name\",projectName);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/\" + toProject + \"/tasks/\"\n\t\ttype :POST\n\t\tparameters:values_map\n\t\tconnection:\"zoho_projects\"\n\t];\n}\ninfo projectList; */"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function16",
        "id": "512029000000856010",
        "modified_by": null,
        "modified_on": 1631094418000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "Calculate Order Route Distance",
        "id": "512029000000894008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2021-09-21T02:25:05+02:00",
        "name": "CalculateOrderRouteDistance",
        "nameSpace": "button",
        "params": [
            {
                "name": "OrderId",
                "type": "STRING"
            },
            {
                "name": "ModuleName",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "STRING",
        "script": "string button.CalculateOrderRouteDistance(String OrderId, String ModuleName)\n{\nrecord = zoho.crm.getRecordById(ModuleName,OrderId);\n//fetch google map api_key\norgVariable = zoho.crm.getOrgVariable('google_map_api_keys');\napi_key = orgVariable.getJSON(\"API_Key\");\n//fetch order route\nroute = record.get(\"OrderRoute\").toList();\nif(route.size() < 1)\n{\n\treturn 0;\n}\n//prepare data for request\nwaypoints = Collection();\nfor each  point in route\n{\n\tif(point.get(\"Latitude\") != null && point.get(\"Longitude\") != null)\n\t{\n\t\twaypoints.insert(point.get(\"Latitude\") + \",\" + point.get(\"Longitude\"));\n\t}\n\telse if(point.get(\"Country\") || point.get(\"State_Region\") || point.get(\"City\"))\n\t{\n\t\taddress = \"\";\n\t\tif(point.get(\"Building\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"Building\") + \",\";\n\t\t}\n\t\tif(point.get(\"Street\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"Street\") + \",\";\n\t\t}\n\t\tif(point.get(\"City\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"City\") + \",\";\n\t\t}\n\t\tif(point.get(\"State_Region\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"State_Region\") + \",\";\n\t\t}\n\t\tif(point.get(\"Country\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"Country\") + \",\";\n\t\t}\n\t\twaypoints.insert(removeLastOccurence(address,\",\"));\n\t}\n}\norigin = \"\";\ndestination = \"\";\nif(waypoints.size() > 0)\n{\n\torigin = waypoints.get(0);\n\twaypoints.remove(0);\n}\nif(waypoints.size() > 0)\n{\n\tdestination = waypoints.get(waypoints.size() - 1);\n\twaypoints.remove(waypoints.size() - 1);\n}\nif(waypoints.size() > 0)\n{\n\twaypoints = waypoints.toString();\n}\n//fetch route distance info\nurl = 'https://maps.googleapis.com/maps/api/directions/json?' + 'origin=' + origin + '&destination=' + destination + '&waypoints=' + waypoints + '&key=' + api_key;\nresp = getUrl(url);\nif(!resp)\n{\n\treturn \"fail\";\n}\n//calculate route distance\ntotalDistance = 0;\nlegs = resp.getJSON(\"routes\").get(0).getJSON(\"legs\");\nfor each  leg in legs\n{\n\ttotalDistance = totalDistance + leg.getJSON(\"distance\").getJSON(\"value\");\n}\n//update distance field\nresp = zoho.crm.updateRecord(ModuleName,OrderId,{\"RouteDistance\":toString(totalDistance / 1000) + \"km\"});\nif(resp.getJSON(\"Modified_Time\") == \"\")\n{\n\treturn \"fail\";\n}\nreturn \"success\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getOrgVariable",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "ModuleName",
                "OrderId"
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2021-09-20 17:25:05.0",
        "workflow": "record = zoho.crm.getRecordById(ModuleName,OrderId);\n//fetch google map api_key\norgVariable = zoho.crm.getOrgVariable('google_map_api_keys');\napi_key = orgVariable.getJSON(\"API_Key\");\n//fetch order route\nroute = record.get(\"OrderRoute\").toList();\nif(route.size() < 1)\n{\n\treturn 0;\n}\n//prepare data for request\nwaypoints = Collection();\nfor each  point in route\n{\n\tif(point.get(\"Latitude\") != null && point.get(\"Longitude\") != null)\n\t{\n\t\twaypoints.insert(point.get(\"Latitude\") + \",\" + point.get(\"Longitude\"));\n\t}\n\telse if(point.get(\"Country\") || point.get(\"State_Region\") || point.get(\"City\"))\n\t{\n\t\taddress = \"\";\n\t\tif(point.get(\"Building\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"Building\") + \",\";\n\t\t}\n\t\tif(point.get(\"Street\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"Street\") + \",\";\n\t\t}\n\t\tif(point.get(\"City\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"City\") + \",\";\n\t\t}\n\t\tif(point.get(\"State_Region\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"State_Region\") + \",\";\n\t\t}\n\t\tif(point.get(\"Country\") != null)\n\t\t{\n\t\t\taddress = address + point.get(\"Country\") + \",\";\n\t\t}\n\t\twaypoints.insert(removeLastOccurence(address,\",\"));\n\t}\n}\norigin = \"\";\ndestination = \"\";\nif(waypoints.size() > 0)\n{\n\torigin = waypoints.get(0);\n\twaypoints.remove(0);\n}\nif(waypoints.size() > 0)\n{\n\tdestination = waypoints.get(waypoints.size() - 1);\n\twaypoints.remove(waypoints.size() - 1);\n}\nif(waypoints.size() > 0)\n{\n\twaypoints = waypoints.toString();\n}\n//fetch route distance info\nurl = 'https://maps.googleapis.com/maps/api/directions/json?' + 'origin=' + origin + '&destination=' + destination + '&waypoints=' + waypoints + '&key=' + api_key;\nresp = getUrl(url);\nif(!resp)\n{\n\treturn \"fail\";\n}\n//calculate route distance\ntotalDistance = 0;\nlegs = resp.getJSON(\"routes\").get(0).getJSON(\"legs\");\nfor each  leg in legs\n{\n\ttotalDistance = totalDistance + leg.getJSON(\"distance\").getJSON(\"value\");\n}\n//update distance field\nresp = zoho.crm.updateRecord(ModuleName,OrderId,{\"RouteDistance\":toString(totalDistance / 1000) + \"km\"});\nif(resp.getJSON(\"Modified_Time\") == \"\")\n{\n\treturn \"fail\";\n}\nreturn \"success\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "testSO",
        "id": "512029000001000001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1681907924000,
        "name": "testSO",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.testSO()\n{\n/*itemsList = List();\nsoMap = Map();\nsoMap.put(\"Subject\",\"Test Create\");\nsoMap.put(\"Account_Name\",\"4444945000012341021\");\nproductMap = Map();\nproductMap.put(\"product\",{\"id\":\"4444945000010412290\"});\nproductMap.put(\"quantity\",1);\nproductMap.put(\"list_price\",100);\nitemsList.add(productMap);\nsoMap.put(\"Product_Details\",itemsList);\nresp = zoho.crm.createRecord(\"Sales_Orders\",soMap);\ninfo resp;*/\ninfo now.addYear(1).toString(\"YYYY-MM-d\");\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-04-19 05:38:44.0",
        "workflow": "/*itemsList = List();\nsoMap = Map();\nsoMap.put(\"Subject\",\"Test Create\");\nsoMap.put(\"Account_Name\",\"4444945000012341021\");\nproductMap = Map();\nproductMap.put(\"product\",{\"id\":\"4444945000010412290\"});\nproductMap.put(\"quantity\",1);\nproductMap.put(\"list_price\",100);\nitemsList.add(productMap);\nsoMap.put(\"Product_Details\",itemsList);\nresp = zoho.crm.createRecord(\"Sales_Orders\",soMap);\ninfo resp;*/\ninfo now.addYear(1).toString(\"YYYY-MM-d\");\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": "Test11111",
        "display_name": "Test11111",
        "id": "512029000000890001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1631885889000,
        "name": "Test11111",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.Test11111()\n{\narr = \"[4,1,3]\".toList();\ninfo arr;\ninfo arr.get(0);\ninfo arr.get(1);\ninfo arr.get(2);\ninfo arr.contains(\"4\");\ninfo arr.contains(4);\ninfo arr.contains(arr.get(0));\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-09-17 06:38:09.0",
        "workflow": "arr = \"[4,1,3]\".toList();\ninfo arr;\ninfo arr.get(0);\ninfo arr.get(1);\ninfo arr.get(2);\ninfo arr.contains(\"4\");\ninfo arr.contains(4);\ninfo arr.contains(arr.get(0));"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000000954001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1686907542000,
        "name": "test",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test()\n{\ncurDate = now;\na = curDate.getMonth();\ndueMonthNumberZero = if(a < 10,\"0\" + a,a);\nstrFormat = curDate.toString(\"YYYY-MM-d\") + \"T\" + curDate.toString(\"HH-mm-ss\");\ninfo strFormat;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-06-16 02:25:42.0",
        "workflow": "curDate = now;\na = curDate.getMonth();\ndueMonthNumberZero = if(a < 10,\"0\" + a,a);\nstrFormat = curDate.toString(\"YYYY-MM-d\") + \"T\" + curDate.toString(\"HH-mm-ss\");\ninfo strFormat;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "scheduler",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000001049001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1674657700000,
        "name": "test2",
        "nameSpace": "schedule",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void schedule.test2()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-01-25 06:41:40.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "Test23123",
        "id": "512029000001056001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1642414313000,
        "name": "Test23123",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.Test23123()\n{\n//( TEXT module , NUMBER id , ? KEY-VALUE optionalDataMap , ? TEXT connections )\ntest = zoho.crm.getRecordById(\"Deals\",\"4444945000013335050\");\ninfo test;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2022-01-17 02:11:53.0",
        "workflow": "//( TEXT module , NUMBER id , ? KEY-VALUE optionalDataMap , ? TEXT connections )\ntest = zoho.crm.getRecordById(\"Deals\",\"4444945000013335050\");\ninfo test;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "TestZapiKey",
        "id": "512029000000927001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1632868095000,
        "name": "TestZapiKey",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.TestZapiKey()\n{\nm = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\napikeyresp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\nzapikey = apikeyresp.get(\"response\");\ninfo zapikey;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2021-09-28 15:28:15.0",
        "workflow": "m = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\napikeyresp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\nzapikey = apikeyresp.get(\"response\");\ninfo zapikey;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "crmfundamentals",
        "config": false,
        "description": null,
        "display_name": "test1",
        "id": "512029000001201001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-05-24T12:52:12+02:00",
        "name": "test1",
        "nameSpace": "validation_rule",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": null,
        "return_type": "MAP",
        "script": "map validation_rule.test1(String crmAPIRequest)\n{\n/* The snippet below shows you how to get a list of fields, their values from a MAP object. The fields’ values can be obtained from the same MAP object.                                                  */\nentityMap = crmAPIRequest.toMap().get(\"record\");\n/* The example below demonstrates how a field’s value (email) can be obtained from a MAP object. Here, entityMap - Map Object, Email - Field's API name\nSample entityMap= {'Email': 'xxx@xxx.com', 'Last_Name': 'xxx'};                                   */\ndate1 = null;\ndate2 = null;\ndate1 = entityMap.get(\"Date_1\");\ndate2 = entityMap.get(\"Date_2\");\nresponse = Map();\n/* ---------------------------------------------------------------------------------------------- */\n/* Start writing your code here to perform the necessary field validation                         */\n/* ---------------------------------------------------------------------------------------------- */\n/* If the code identifies a validation error, set the status and alert message as shown below:    */\n//response.put('status','error');\n//response.put('message', '<your message(100 characters)>');\n/* If there are no errors found during validation, set the status as shown below:                 */\nif(date1 != '' && date2 != '')\n{\n\tif(date1.toDate() > date2.toDate())\n\t{\n\t\tresponse.put('status','error');\n\t\tresponse.put('message','The end date can not be earlier than start date.');\n\t}\n\telse\n\t{\n\t\tresponse.put('status','success');\n\t}\n}\nelse\n{\n\tresponse.put('status','success');\n}\n/* ---------------------------------------------------------------------------------------------- */\nreturn response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false,
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-05-24 03:52:12.0",
        "workflow": "/* The snippet below shows you how to get a list of fields, their values from a MAP object. The fields’ values can be obtained from the same MAP object.                                                  */\nentityMap = crmAPIRequest.toMap().get(\"record\");\n/* The example below demonstrates how a field’s value (email) can be obtained from a MAP object. Here, entityMap - Map Object, Email - Field's API name\nSample entityMap= {'Email': 'xxx@xxx.com', 'Last_Name': 'xxx'};                                   */\ndate1 = null;\ndate2 = null;\ndate1 = entityMap.get(\"Date_1\");\ndate2 = entityMap.get(\"Date_2\");\nresponse = Map();\n/* ---------------------------------------------------------------------------------------------- */\n/* Start writing your code here to perform the necessary field validation                         */\n/* ---------------------------------------------------------------------------------------------- */\n/* If the code identifies a validation error, set the status and alert message as shown below:    */\n//response.put('status','error');\n//response.put('message', '<your message(100 characters)>');\n/* If there are no errors found during validation, set the status as shown below:                 */\nif(date1 != '' && date2 != '')\n{\n\tif(date1.toDate() > date2.toDate())\n\t{\n\t\tresponse.put('status','error');\n\t\tresponse.put('message','The end date can not be earlier than start date.');\n\t}\n\telse\n\t{\n\t\tresponse.put('status','success');\n\t}\n}\nelse\n{\n\tresponse.put('status','success');\n}\n/* ---------------------------------------------------------------------------------------------- */\nreturn response;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "tt",
        "id": "512029000000958001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1634735022000,
        "name": "tt",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.tt()\n{\ntaskUpdatedTime = '10-10-2021 11:00:18 AM';\nnowDate = now;\ndaysBetweenDates = taskUpdatedTime.workdayslist(nowDate,List());\ninfo daysBetweenDates;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2021-10-20 06:03:42.0",
        "workflow": "taskUpdatedTime = '10-10-2021 11:00:18 AM';\nnowDate = now;\ndaysBetweenDates = taskUpdatedTime.workdayslist(nowDate,List());\ninfo daysBetweenDates;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": "Automatically update changes in shipping and billing address of a parent account in all the child contacts.\n\nHere are the step by step instructions to configure the custom function:\n1. Select Accounts as your module.\n2. Map the field \"AccountId\" of Account module to the argument name \"accId\".\n3. Save the configuration.\n\nHow to make it work?\nAssociate this custom function under appropriate workflow rule to automate the changes to appear in all related contacts when there is a change in shipping and billing address of a parent account.",
        "display_name": "Mass update of Child Contacts",
        "id": "512029000000753001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1629987408000,
        "name": "Mass_update_of_Child_Contacts",
        "nameSpace": "automation",
        "params": [
            {
                "name": "accId",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.Mass_update_of_Child_Contacts(int accId)\n{\nrec = zoho.crm.getRecordById(\"Accounts\",accId);\nresp = zoho.crm.getRelatedRecords(\"Contacts\",\"Accounts\",accId,1);\nfor each  ele in resp\n{\n\tmp = Map();\n\tmp.put(\"Mailing_Street\",ifnull(rec.get(\"Billing_Street\"),\"\"));\n\tmp.put(\"Mailing_City\",ifnull(rec.get(\"Billing_City\"),\"\"));\n\tmp.put(\"Mailing_State\",ifnull(rec.get(\"Billing_State\"),\"\"));\n\tmp.put(\"Mailing_Zip\",ifnull(rec.get(\"Billing_Code\"),\"\"));\n\tmp.put(\"Mailing_Country\",ifnull(rec.get(\"Billing_Country\"),\"\"));\n\tmp.put(\"Other_Street\",ifnull(rec.get(\"Shipping_Street\"),\"\"));\n\tmp.put(\"Other_City\",ifnull(rec.get(\"Shipping_City\"),\"\"));\n\tmp.put(\"Other_State\",ifnull(rec.get(\"Shipping_State\"),\"\"));\n\tmp.put(\"Other_Zip\",ifnull(rec.get(\"Shipping_Code\"),\"\"));\n\tmp.put(\"Other_Country\",ifnull(rec.get(\"Shipping_Country\"),\"\"));\n\tupdateResp = zoho.crm.updateRecord(\"Contacts\",ele.get(\"id\"),mp);\n\tinfo updateResp;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRelatedRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "accId"
            ]
        },
        "updatedTime": "2021-08-26 07:16:48.0",
        "workflow": "rec = zoho.crm.getRecordById(\"Accounts\",accId);\nresp = zoho.crm.getRelatedRecords(\"Contacts\",\"Accounts\",accId,1);\nfor each  ele in resp\n{\n\tmp = Map();\n\tmp.put(\"Mailing_Street\",ifnull(rec.get(\"Billing_Street\"),\"\"));\n\tmp.put(\"Mailing_City\",ifnull(rec.get(\"Billing_City\"),\"\"));\n\tmp.put(\"Mailing_State\",ifnull(rec.get(\"Billing_State\"),\"\"));\n\tmp.put(\"Mailing_Zip\",ifnull(rec.get(\"Billing_Code\"),\"\"));\n\tmp.put(\"Mailing_Country\",ifnull(rec.get(\"Billing_Country\"),\"\"));\n\tmp.put(\"Other_Street\",ifnull(rec.get(\"Shipping_Street\"),\"\"));\n\tmp.put(\"Other_City\",ifnull(rec.get(\"Shipping_City\"),\"\"));\n\tmp.put(\"Other_State\",ifnull(rec.get(\"Shipping_State\"),\"\"));\n\tmp.put(\"Other_Zip\",ifnull(rec.get(\"Shipping_Code\"),\"\"));\n\tmp.put(\"Other_Country\",ifnull(rec.get(\"Shipping_Country\"),\"\"));\n\tupdateResp = zoho.crm.updateRecord(\"Contacts\",ele.get(\"id\"),mp);\n\tinfo updateResp;\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "display_name": "test333",
        "id": "512029000001253001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1656403879000,
        "name": "test333",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test333()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2022-06-28 01:11:19.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_account_$KEY$Accounts.ID",
                        "value": "Accounts.Account Id"
                    },
                    {
                        "name": "$map_account_$KEY$zohoworkdriveforcrm__Workdrive_Folder_ID",
                        "value": "Accounts.Workdrive Folder ID"
                    },
                    {
                        "name": "$map_account_$KEY$Account_Name",
                        "value": "Accounts.Account Name"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Accounts",
                "name": "Change_Workdrive_Folder_Name",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Change_Workdrive_Folder_Name",
        "id": "512029000001271010",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:14+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_deal_$KEY$Deals.ID",
                        "value": "Deals.Deals - Campaigns Id"
                    },
                    {
                        "name": "$map_deal_$KEY$Contact_Name",
                        "value": "Deals.Contact Name"
                    },
                    {
                        "name": "$map_deal_$KEY$Deal_Name",
                        "value": "Deals.Deals - Campaigns Name"
                    },
                    {
                        "name": "$map_deal_$KEY$Account_Name",
                        "value": "Deals.Account Name"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Deals",
                "name": "Create_Deal_Workdrive_Folder",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Create_Deal_Workdrive_Folder",
        "id": "512029000001277010",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:15+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function14",
        "id": "512029000001318003",
        "modified_by": null,
        "modified_on": 1658220403000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function144",
        "id": "512029000001561001",
        "modified_by": null,
        "modified_on": 1663856405000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function1",
        "id": "512029000001320001",
        "modified_by": null,
        "modified_on": 1658220403000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "dv_deals_import_test",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "DV_deals_import_test",
        "id": "512029000001452003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-08-26T13:36:31+02:00",
        "name": "DV_deals_import_test",
        "nameSpace": "automation",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/dv_deals_import_test/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/dv_deals_import_test/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.DV_deals_import_test(string crmAPIRequest)\n{\nrequestData = crmAPIRequest.get(\"body\");\ndealsData = requestData.toJSONList();\nresult = zoho.crm.bulkCreate(\"Deals\",dealsData);\ninfo result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkCreate",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-08-26 04:36:18.0",
        "workflow": "requestData = crmAPIRequest.get(\"body\");\ndealsData = requestData.toJSONList();\nresult = zoho.crm.bulkCreate(\"Deals\",dealsData);\ninfo result;"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_lead_$KEY$Leads.ID",
                        "value": "Leads.Lead Id"
                    },
                    {
                        "name": "$map_lead_$KEY$First_Name",
                        "value": "Leads.First Name"
                    },
                    {
                        "name": "$map_lead_$KEY$Last_Name",
                        "value": "Leads.Last Name"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "Create_Lead_Workdrive_Folder",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Create_Lead_Workdrive_Folder",
        "id": "512029000001282001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:15+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "testcreateorder",
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "testcreateorder",
        "id": "512029000001494009",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-09-08T14:44:24+02:00",
        "name": "testcreateorder",
        "nameSpace": "button",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testcreateorder/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testcreateorder/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.testcreateorder(String crmAPIRequest)\n{\n// return crmAPIRequest;\ndata = crmAPIRequest.get(\"body\").toMap();\nstatus = \"success\";\nids = Map();\nmodules = data.get(\"modules\");\ndynamic_map = Map();\nresponse = zoho.crm.invokeConnector(\"bigcommerceforzohocrm.crmsettings.crm_get_tax\",dynamic_map);\nresponse = response.get(\"response\").toMap();\ninfo response;\ncrmTaxes = Map();\nfor each  tax in response.get(\"taxes\")\n{\n\tcrmTaxes.put(tax.get(\"name\") + \"_\" + tax.get(\"value\"),tax);\n}\nif(!modules.get(\"order\").isNull())\n{\n\tcreateTaxes = Map();\n\tproducts = modules.get(\"product\").get(\"items\");\n\tfor each  product in products\n\t{\n\t\tif(!product.get(\"Tax\").isNull())\n\t\t{\n\t\t\tfor each  tax in product.get(\"Tax\")\n\t\t\t{\n\t\t\t\tcrmTax = crmTaxes.get(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"));\n\t\t\t\tif(crmTax.isNull())\n\t\t\t\t{\n\t\t\t\t\tcreateTaxes.put(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"),{\"name\":tax.get(\"name\"),\"value\":tax.get(\"percentage\")});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinfo crmTaxes;\n\tinfo createTaxes;\n\tif(createTaxes.size() > 0)\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"taxes\",createTaxes.values());\n\t\tresponse = zoho.crm.invokeConnector(\"bigcommerceforzohocrm.crmsettings.crm_insert_tax\",dynamic_map);\n\t\tresponse = response.get(\"response\").toMap();\n\t\tinfo response;\n\t\tfor each  tax in response.get(\"taxes\")\n\t\t{\n\t\t\tcrmTaxes.put(tax.get(\"details\").get(\"name\") + \"_\" + tax.get(\"details\").get(\"value\"),tax.get(\"details\"));\n\t\t}\n\t}\n\tfor each  product in products\n\t{\n\t\tif(!product.get(\"Tax\").isNull())\n\t\t{\n\t\t\tfor each  tax in product.get(\"Tax\")\n\t\t\t{\n\t\t\t\tcrmTax = crmTaxes.get(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"));\n\t\t\t\ttax.put(\"id\",crmTax.get(\"id\"));\n\t\t\t}\n\t\t}\n\t}\n\tinfo products;\n}\nfor each  type in modules.keys()\n{\n\tupdateOnly = modules.get(type).get(\"update\");\n\tmodule = modules.get(type).get(\"module\");\n\ttrigger = modules.get(type).get(\"trigger\");\n\titems = modules.get(type).get(\"items\");\n\tlookups = modules.get(type).get(\"lookups\");\n\tsubform = modules.get(type).get(\"subform\");\n\tsearch = modules.get(type).get(\"search\");\n\ttypeIds = Map();\n\tif(!search.get(\"condition\").isNull())\n\t{\n\t\tsearchRecords = list();\n\t\tfor each  searchStr in search.get(\"condition\")\n\t\t{\n\t\t\tinfo searchStr;\n\t\t\tsearchResult = zoho.crm.searchRecords(module,searchStr);\n\t\t\tsearchRecords.addAll(searchResult);\n\t\t}\n\t\tfor each  record in searchRecords\n\t\t{\n\t\t\ttypeIds.put(record.get(search.get(\"field\")),{\"id\":record.get(\"id\")});\n\t\t}\n\t}\n\tcreate = list();\n\tupdate = list();\n\tinfo type + \" items: \" + items.size();\n\tfor each  item in items\n\t{\n\t\tif(!lookups.isNull())\n\t\t{\n\t\t\tfor each  lookup in lookups\n\t\t\t{\n\t\t\t\tval = ids.get(lookup.get(\"module\")).get(item.get(lookup.get(\"field\"))).get(\"id\");\n\t\t\t\titem.put(lookup.get(\"field\"),val);\n\t\t\t}\n\t\t}\n\t\tif(!subform.isNull() && subform.containKey(\"lookups\"))\n\t\t{\n\t\t\tfor each  lookup in subform.get(\"lookups\")\n\t\t\t{\n\t\t\t\tfor each  row in item.get(subform.get(\"module\"))\n\t\t\t\t{\n\t\t\t\t\tval = ids.get(lookup.get(\"module\")).get(row.get(lookup.get(\"field\"))).get(\"id\");\n\t\t\t\t\trow.put(lookup.get(\"field\"),val);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(typeIds.containKey(item.get(search.get(\"field\"))))\n\t\t{\n\t\t\titem.put(\"id\",typeIds.get(item.get(search.get(\"field\"))).get(\"id\"));\n\t\t\tupdate.add(item);\n\t\t}\n\t\telse if(type == \"order\" && typeIds.size() == 1 && items.size() > 1)\n\t\t{\n\t\t\titem.put(\"id\",typeIds.get(typeIds.keys().get(0)).get(\"id\"));\n\t\t\ttypeIds.clear();\n\t\t\tupdate.add(item);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcreate.add(item);\n\t\t}\n\t}\n\tinfo \"Create: \" + create.size();\n\tinfo create;\n\tif(create.size() > 0 && updateOnly.isNull())\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"module\",module);\n\t\tdynamic_map.put(\"data\",create);\n\t\tdynamic_map.put(\"trigger\",trigger);\n\t\tresp = zoho.crm.invokeConnector(\"bigcommerceforzohocrm.crmsettings.crm_insert\",dynamic_map);\n\t\tresp = resp.get(\"response\").toMap();\n\t\tinfo resp;\n\t\tl = list(resp.get(\"data\"));\n\t\tfor each index i in l\n\t\t{\n\t\t\tid = Map();\n\t\t\tid.put('id',resp.get(\"data\").get(i).get(\"details\").get(\"id\"));\n\t\t\tid.put('action','create');\n\t\t\tid.put('status',resp.get(\"data\").get(i).get(\"status\"));\n\t\t\ttypeIds.put(create.get(i).get(search.get(\"field\")),id);\n\t\t\tif(id.get(\"status\") != \"success\")\n\t\t\t{\n\t\t\t\tstatus = \"error\";\n\t\t\t}\n\t\t}\n\t}\n\tinfo \"Update: \" + update.size();\n\tinfo update;\n\tif(update.size() > 0)\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"module\",module);\n\t\tdynamic_map.put(\"data\",update);\n\t\tdynamic_map.put(\"trigger\",trigger);\n\t\tresp = zoho.crm.invokeConnector(\"bigcommerceforzohocrm.crmsettings.crm_update\",dynamic_map);\n\t\tresp = resp.get(\"response\").toMap();\n\t\tl = list(resp.get(\"data\"));\n\t\tfor each index i in l\n\t\t{\n\t\t\tid = Map();\n\t\t\tid.put('id',resp.get(\"data\").get(i).get(\"details\").get(\"id\"));\n\t\t\tid.put('action','update');\n\t\t\tid.put('status',resp.get(\"data\").get(i).get(\"status\"));\n\t\t\ttypeIds.put(update.get(i).get(search.get(\"field\")),id);\n\t\t\tif(id.get(\"status\") != \"success\")\n\t\t\t{\n\t\t\t\tstatus = \"error\";\n\t\t\t}\n\t\t}\n\t\tinfo resp;\n\t}\n\tids.put(type,typeIds);\n}\nresult = Map();\nresult.put(\"ids\",ids);\nresult.put(\"status\",status);\nreturn result.toString();\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-09-08 05:44:24.0",
        "workflow": "// return crmAPIRequest;\ndata = crmAPIRequest.get(\"body\").toMap();\nstatus = \"success\";\nids = Map();\nmodules = data.get(\"modules\");\ndynamic_map = Map();\nresponse = zoho.crm.invokeConnector(\"bigcommerceforzohocrm.crmsettings.crm_get_tax\",dynamic_map);\nresponse = response.get(\"response\").toMap();\ninfo response;\ncrmTaxes = Map();\nfor each  tax in response.get(\"taxes\")\n{\n\tcrmTaxes.put(tax.get(\"name\") + \"_\" + tax.get(\"value\"),tax);\n}\nif(!modules.get(\"order\").isNull())\n{\n\tcreateTaxes = Map();\n\tproducts = modules.get(\"product\").get(\"items\");\n\tfor each  product in products\n\t{\n\t\tif(!product.get(\"Tax\").isNull())\n\t\t{\n\t\t\tfor each  tax in product.get(\"Tax\")\n\t\t\t{\n\t\t\t\tcrmTax = crmTaxes.get(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"));\n\t\t\t\tif(crmTax.isNull())\n\t\t\t\t{\n\t\t\t\t\tcreateTaxes.put(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"),{\"name\":tax.get(\"name\"),\"value\":tax.get(\"percentage\")});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinfo crmTaxes;\n\tinfo createTaxes;\n\tif(createTaxes.size() > 0)\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"taxes\",createTaxes.values());\n\t\tresponse = zoho.crm.invokeConnector(\"bigcommerceforzohocrm.crmsettings.crm_insert_tax\",dynamic_map);\n\t\tresponse = response.get(\"response\").toMap();\n\t\tinfo response;\n\t\tfor each  tax in response.get(\"taxes\")\n\t\t{\n\t\t\tcrmTaxes.put(tax.get(\"details\").get(\"name\") + \"_\" + tax.get(\"details\").get(\"value\"),tax.get(\"details\"));\n\t\t}\n\t}\n\tfor each  product in products\n\t{\n\t\tif(!product.get(\"Tax\").isNull())\n\t\t{\n\t\t\tfor each  tax in product.get(\"Tax\")\n\t\t\t{\n\t\t\t\tcrmTax = crmTaxes.get(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"));\n\t\t\t\ttax.put(\"id\",crmTax.get(\"id\"));\n\t\t\t}\n\t\t}\n\t}\n\tinfo products;\n}\nfor each  type in modules.keys()\n{\n\tupdateOnly = modules.get(type).get(\"update\");\n\tmodule = modules.get(type).get(\"module\");\n\ttrigger = modules.get(type).get(\"trigger\");\n\titems = modules.get(type).get(\"items\");\n\tlookups = modules.get(type).get(\"lookups\");\n\tsubform = modules.get(type).get(\"subform\");\n\tsearch = modules.get(type).get(\"search\");\n\ttypeIds = Map();\n\tif(!search.get(\"condition\").isNull())\n\t{\n\t\tsearchRecords = list();\n\t\tfor each  searchStr in search.get(\"condition\")\n\t\t{\n\t\t\tinfo searchStr;\n\t\t\tsearchResult = zoho.crm.searchRecords(module,searchStr);\n\t\t\tsearchRecords.addAll(searchResult);\n\t\t}\n\t\tfor each  record in searchRecords\n\t\t{\n\t\t\ttypeIds.put(record.get(search.get(\"field\")),{\"id\":record.get(\"id\")});\n\t\t}\n\t}\n\tcreate = list();\n\tupdate = list();\n\tinfo type + \" items: \" + items.size();\n\tfor each  item in items\n\t{\n\t\tif(!lookups.isNull())\n\t\t{\n\t\t\tfor each  lookup in lookups\n\t\t\t{\n\t\t\t\tval = ids.get(lookup.get(\"module\")).get(item.get(lookup.get(\"field\"))).get(\"id\");\n\t\t\t\titem.put(lookup.get(\"field\"),val);\n\t\t\t}\n\t\t}\n\t\tif(!subform.isNull() && subform.containKey(\"lookups\"))\n\t\t{\n\t\t\tfor each  lookup in subform.get(\"lookups\")\n\t\t\t{\n\t\t\t\tfor each  row in item.get(subform.get(\"module\"))\n\t\t\t\t{\n\t\t\t\t\tval = ids.get(lookup.get(\"module\")).get(row.get(lookup.get(\"field\"))).get(\"id\");\n\t\t\t\t\trow.put(lookup.get(\"field\"),val);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(typeIds.containKey(item.get(search.get(\"field\"))))\n\t\t{\n\t\t\titem.put(\"id\",typeIds.get(item.get(search.get(\"field\"))).get(\"id\"));\n\t\t\tupdate.add(item);\n\t\t}\n\t\telse if(type == \"order\" && typeIds.size() == 1 && items.size() > 1)\n\t\t{\n\t\t\titem.put(\"id\",typeIds.get(typeIds.keys().get(0)).get(\"id\"));\n\t\t\ttypeIds.clear();\n\t\t\tupdate.add(item);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcreate.add(item);\n\t\t}\n\t}\n\tinfo \"Create: \" + create.size();\n\tinfo create;\n\tif(create.size() > 0 && updateOnly.isNull())\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"module\",module);\n\t\tdynamic_map.put(\"data\",create);\n\t\tdynamic_map.put(\"trigger\",trigger);\n\t\tresp = zoho.crm.invokeConnector(\"bigcommerceforzohocrm.crmsettings.crm_insert\",dynamic_map);\n\t\tresp = resp.get(\"response\").toMap();\n\t\tinfo resp;\n\t\tl = list(resp.get(\"data\"));\n\t\tfor each index i in l\n\t\t{\n\t\t\tid = Map();\n\t\t\tid.put('id',resp.get(\"data\").get(i).get(\"details\").get(\"id\"));\n\t\t\tid.put('action','create');\n\t\t\tid.put('status',resp.get(\"data\").get(i).get(\"status\"));\n\t\t\ttypeIds.put(create.get(i).get(search.get(\"field\")),id);\n\t\t\tif(id.get(\"status\") != \"success\")\n\t\t\t{\n\t\t\t\tstatus = \"error\";\n\t\t\t}\n\t\t}\n\t}\n\tinfo \"Update: \" + update.size();\n\tinfo update;\n\tif(update.size() > 0)\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"module\",module);\n\t\tdynamic_map.put(\"data\",update);\n\t\tdynamic_map.put(\"trigger\",trigger);\n\t\tresp = zoho.crm.invokeConnector(\"bigcommerceforzohocrm.crmsettings.crm_update\",dynamic_map);\n\t\tresp = resp.get(\"response\").toMap();\n\t\tl = list(resp.get(\"data\"));\n\t\tfor each index i in l\n\t\t{\n\t\t\tid = Map();\n\t\t\tid.put('id',resp.get(\"data\").get(i).get(\"details\").get(\"id\"));\n\t\t\tid.put('action','update');\n\t\t\tid.put('status',resp.get(\"data\").get(i).get(\"status\"));\n\t\t\ttypeIds.put(update.get(i).get(search.get(\"field\")),id);\n\t\t\tif(id.get(\"status\") != \"success\")\n\t\t\t{\n\t\t\t\tstatus = \"error\";\n\t\t\t}\n\t\t}\n\t\tinfo resp;\n\t}\n\tids.put(type,typeIds);\n}\nresult = Map();\nresult.put(\"ids\",ids);\nresult.put(\"status\",status);\nreturn result.toString();"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function142",
        "id": "512029000001558001",
        "modified_by": null,
        "modified_on": 1663837225000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_contact_$KEY$Contacts.ID",
                        "value": "Contacts.Contact Id"
                    },
                    {
                        "name": "$map_contact_$KEY$zohoworkdriveforcrm__Workdrive_Folder_ID",
                        "value": "Contacts.Workdrive Folder ID"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "Move_Leads_Folder_To_Contacts_On_Convert",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Move_Leads_Folder_To_Contacts",
        "id": "512029000001277003",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:14+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function143",
        "id": "512029000001556005",
        "modified_by": null,
        "modified_on": 1663855985000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_account_$KEY$Accounts.ID",
                        "value": "Accounts.Account Id"
                    },
                    {
                        "name": "$map_account_$KEY$Account_Name",
                        "value": "Accounts.Account Name"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Accounts",
                "name": "Create_Account_Workdrive_Folder",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Create_Account_Workdrive_Folder",
        "id": "512029000001283008",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:15+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "student_name_update",
        "id": "512029000001535009",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-09-21T11:13:17+02:00",
        "name": "student_name_update",
        "nameSpace": "automation",
        "params": [
            {
                "name": "ID",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.student_name_update(Int ID)\n{\nscholarship = zoho.crm.getRecordById(\"Scholarships\",ID);\nstudent = zoho.crm.getRecordById(\"Students\",scholarship.get(\"Related_Student\").get(\"id\"));\ndata = Map();\ndata.put(\"Students_Name\",student.get(\"Contact\").get(\"name\"));\nzoho.crm.updateRecord(\"Scholarships\",ID,data);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "ID"
            ]
        },
        "updatedTime": "2022-09-21 02:13:18.0",
        "workflow": "scholarship = zoho.crm.getRecordById(\"Scholarships\",ID);\nstudent = zoho.crm.getRecordById(\"Students\",scholarship.get(\"Related_Student\").get(\"id\"));\ndata = Map();\ndata.put(\"Students_Name\",student.get(\"Contact\").get(\"name\"));\nzoho.crm.updateRecord(\"Scholarships\",ID,data);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function10",
        "id": "512029000001648008",
        "modified_by": null,
        "modified_on": 1667570488000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "dv_products_import_test",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "DV_products_import_test",
        "id": "512029000001453001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-08-26T12:30:38+02:00",
        "name": "DV_products_import_test",
        "nameSpace": "automation",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/dv_products_import_test/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/dv_products_import_test/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.DV_products_import_test(String crmAPIRequest)\n{\nrequestData = crmAPIRequest.get(\"body\");\nproductsData = requestData.toJSONList();\nresult = zoho.crm.bulkCreate(\"Products\",productsData);\ninfo result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkCreate",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-08-26 03:30:38.0",
        "workflow": "requestData = crmAPIRequest.get(\"body\");\nproductsData = requestData.toJSONList();\nresult = zoho.crm.bulkCreate(\"Products\",productsData);\ninfo result;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function146",
        "id": "512029000001632001",
        "modified_by": null,
        "modified_on": 1666945818000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_contact_$KEY$Contacts.ID",
                        "value": "Contacts.Contact Id"
                    },
                    {
                        "name": "$map_contact_$KEY$First_Name",
                        "value": "Contacts.First Name"
                    },
                    {
                        "name": "$map_contact_$KEY$Last_Name",
                        "value": "Contacts.Last Name"
                    },
                    {
                        "name": "$map_contact_$KEY$Account_Name",
                        "value": "Contacts.Account Name"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "Create_Contact_Workdrive_Folder",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Create_Contact_Workdrive_Folder",
        "id": "512029000001283001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:15+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "calendlyforzohocrm__addeventandcontactfromcalendly",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "addEventAndContactFromCalendly",
        "id": "512029000001302003",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-08T13:43:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/calendlyforzohocrm__addeventandcontactfromcalendly/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/calendlyforzohocrm__addeventandcontactfromcalendly/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function33",
        "id": "512029000001301001",
        "modified_by": null,
        "modified_on": 1657280617000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "test acrp",
        "id": "512029000001520001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1663244195000,
        "name": "test_acrp",
        "nameSpace": "button",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string button.test_acrp()\n{\ndata = {\"orgId\":\"4444945000000258088\",\"sync_leads\":1,\"sync_contacts\":1,\"lead_fields\":{\"Mobile\",\"Mobile\"},\"contact_fields\":{\"Mobile\",\"Mobile\"},\"create_call\":\"1\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"calls\":{{\"phone\":\"+919814011760\",\"filename\":\"919814011760__Outgoing__48576_15_09_2022_14_31_41_222020.m4a\",\"note\":\"\",\"duration\":\"0:48\",\"direction\":\"1\",\"date\":\"2022-09-15T14:30:04+03:00\"}}};\ntoken = zoho.crm.getOrgVariable(\"acrphonecrm__ext_token\");\nresponse = Map();\nfor each  call in data.get(\"calls\")\n{\n\trecord = false;\n\t//Search in Contacts\n\tif(!record && data.get(\"sync_contacts\"))\n\t{\n\t\tselect = \"\";\n\t\tfields = data.get(\"contact_fields\").distinct();\n\t\tfor each  field in fields\n\t\t{\n\t\t\tselect = select + \" or (\" + field + \":equals:\" + call.get(\"phone\") + \") or (\" + field + \":equals:\" + call.get(\"phone\").replaceFirst(\"\\+\",\"\") + \")\";\n\t\t}\n\t\trecords = zoho.crm.searchRecords(\"Contacts\",select.subString(4));\n\t\tif(!records.isEmpty())\n\t\t{\n\t\t\tcontact = records.get(0);\n\t\t\trecord = Map();\n\t\t\trecord.put(\"module\",\"Contacts\");\n\t\t\trecord.put(\"id\",contact.get(\"id\"));\n\t\t\trecord.put(\"Owner\",contact.get(\"Owner\").get(\"id\"));\n\t\t\tif(contact.containKey(\"Account_Name\") && !contact.get(\"Account_Name\").isEmpty())\n\t\t\t{\n\t\t\t\trecord.put(\"Account\",contact.get(\"Account_Name\").get(\"id\"));\n\t\t\t}\n\t\t}\n\t}\n\t//Search in Leads\n\tif(!record && data.get(\"sync_leads\"))\n\t{\n\t\tselect = \"\";\n\t\tfields = data.get(\"lead_fields\").distinct();\n\t\tfor each  field in fields\n\t\t{\n\t\t\tselect = select + \" or (\" + field + \":equals:\" + call.get(\"phone\") + \") or (\" + field + \":equals:\" + call.get(\"phone\").replaceFirst(\"\\+\",\"\") + \")\";\n\t\t}\n\t\trecords = zoho.crm.searchRecords(\"Leads\",select.subString(4));\n\t\tif(!records.isEmpty())\n\t\t{\n\t\t\trecord = Map();\n\t\t\trecord.put(\"module\",\"Leads\");\n\t\t\trecord.put(\"id\",records.get(0).get(\"id\"));\n\t\t\trecord.put(\"Owner\",records.get(0).get(\"Owner\").get(\"id\"));\n\t\t}\n\t}\n\t//Create Lead\n\tinfo record;\n\tif(!record)\n\t{\n\t\tleadMap = Map();\n\t\tleadMap.put(\"Last_Name\",\"Lead from call \" + call.get(\"phone\"));\n\t\tleadMap.put(data.get(\"lead_fields\").get(0),call.get(\"phone\"));\n\t\tinfo leadMap;\n\t\tlead = zoho.crm.createRecord(\"Leads\",leadMap,{\"trigger\":data.get(\"trigger\")});\n\t\trecord = Map();\n\t\trecord.put(\"module\",\"Leads\");\n\t\tinfo lead;\n\t\tif(lead.get(\"code\") == \"DUPLICATE_DATA\")\n\t\t{\n\t\t\trecord.put(\"id\",lead.get(\"details\").get(\"id\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\trecord.put(\"id\",lead.get(\"id\"));\n\t\t}\n\t}\n\tfileResp = Map();\n\tif(record)\n\t{\n\t\t//Attach record\n\t\tfileResp.put('record',record);\n\t\turl = \"https://acrp.crmoz.com/get-file\";\n\t\turl = url + \"?orgId=\" + data.get(\"orgId\");\n\t\turl = url + \"&token=\" + token;\n\t\turl = url + \"&filename=\" + call.get(\"filename\");\n\t\tinfo url;\n\t\tfile_object = invokeurl\n\t\t[\n\t\t\turl :url\n\t\t\ttype :GET\n\t\t];\n\t\tinfo file_object;\n\t\tattachFileResponse = zoho.crm.attachFile(record.get(\"module\"),record.get(\"id\"),file_object);\n\t\tinfo attachFileResponse;\n\t\tfileResp.put('status',attachFileResponse.get(\"code\"));\n\t\t//Create Call\n\t\tif(data.get(\"create_call\"))\n\t\t{\n\t\t\tupdate = Map();\n\t\t\tupdate.put(\"Subject\",\"Call from \" + call.get(\"phone\"));\n\t\t\tupdate.put(\"Call_Type\",\"Inbound\");\n\t\t\tif(call.get(\"direction\") == 1)\n\t\t\t{\n\t\t\t\tupdate.put(\"Subject\",\"Call to \" + call.get(\"phone\"));\n\t\t\t\tupdate.put(\"Call_Type\",\"Outbound\");\n\t\t\t}\n\t\t\tupdate.put(\"Call_Duration\",call.get(\"duration\"));\n\t\t\tupdate.put(\"Call_Start_Time\",call.get(\"date\"));\n\t\t\tupdate.put(\"$which_call\",\"CompletedCall\");\n\t\t\tif(record.get(\"module\") == \"Contacts\")\n\t\t\t{\n\t\t\t\tupdate.put(\"Who_Id\",record.get(\"id\"));\n\t\t\t\tif(record.containKey(\"Account\"))\n\t\t\t\t{\n\t\t\t\t\tupdate.put(\"$se_module\",\"Accounts\");\n\t\t\t\t\tupdate.put(\"What_Id\",record.get(\"Account\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tupdate.put(\"$se_module\",\"Leads\");\n\t\t\t\tupdate.put(\"What_Id\",record.get(\"id\"));\n\t\t\t}\n\t\t\tif(record.containKey(\"Owner\"))\n\t\t\t{\n\t\t\t\tupdate.put(\"Owner\",record.get(\"Owner\"));\n\t\t\t}\n\t\t\tinfo zoho.crm.createRecord(\"Calls\",update,{\"trigger\":data.get(\"trigger\")});\n\t\t}\n\t}\n\tresponse.put(call.get(\"filename\"),fileResp);\n}\nreturn response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getOrgVariable",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.attachFile",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2022-09-15 05:16:35.0",
        "workflow": "data = {\"orgId\":\"4444945000000258088\",\"sync_leads\":1,\"sync_contacts\":1,\"lead_fields\":{\"Mobile\",\"Mobile\"},\"contact_fields\":{\"Mobile\",\"Mobile\"},\"create_call\":\"1\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"calls\":{{\"phone\":\"+919814011760\",\"filename\":\"919814011760__Outgoing__48576_15_09_2022_14_31_41_222020.m4a\",\"note\":\"\",\"duration\":\"0:48\",\"direction\":\"1\",\"date\":\"2022-09-15T14:30:04+03:00\"}}};\ntoken = zoho.crm.getOrgVariable(\"acrphonecrm__ext_token\");\nresponse = Map();\nfor each  call in data.get(\"calls\")\n{\n\trecord = false;\n\t//Search in Contacts\n\tif(!record && data.get(\"sync_contacts\"))\n\t{\n\t\tselect = \"\";\n\t\tfields = data.get(\"contact_fields\").distinct();\n\t\tfor each  field in fields\n\t\t{\n\t\t\tselect = select + \" or (\" + field + \":equals:\" + call.get(\"phone\") + \") or (\" + field + \":equals:\" + call.get(\"phone\").replaceFirst(\"\\+\",\"\") + \")\";\n\t\t}\n\t\trecords = zoho.crm.searchRecords(\"Contacts\",select.subString(4));\n\t\tif(!records.isEmpty())\n\t\t{\n\t\t\tcontact = records.get(0);\n\t\t\trecord = Map();\n\t\t\trecord.put(\"module\",\"Contacts\");\n\t\t\trecord.put(\"id\",contact.get(\"id\"));\n\t\t\trecord.put(\"Owner\",contact.get(\"Owner\").get(\"id\"));\n\t\t\tif(contact.containKey(\"Account_Name\") && !contact.get(\"Account_Name\").isEmpty())\n\t\t\t{\n\t\t\t\trecord.put(\"Account\",contact.get(\"Account_Name\").get(\"id\"));\n\t\t\t}\n\t\t}\n\t}\n\t//Search in Leads\n\tif(!record && data.get(\"sync_leads\"))\n\t{\n\t\tselect = \"\";\n\t\tfields = data.get(\"lead_fields\").distinct();\n\t\tfor each  field in fields\n\t\t{\n\t\t\tselect = select + \" or (\" + field + \":equals:\" + call.get(\"phone\") + \") or (\" + field + \":equals:\" + call.get(\"phone\").replaceFirst(\"\\+\",\"\") + \")\";\n\t\t}\n\t\trecords = zoho.crm.searchRecords(\"Leads\",select.subString(4));\n\t\tif(!records.isEmpty())\n\t\t{\n\t\t\trecord = Map();\n\t\t\trecord.put(\"module\",\"Leads\");\n\t\t\trecord.put(\"id\",records.get(0).get(\"id\"));\n\t\t\trecord.put(\"Owner\",records.get(0).get(\"Owner\").get(\"id\"));\n\t\t}\n\t}\n\t//Create Lead\n\tinfo record;\n\tif(!record)\n\t{\n\t\tleadMap = Map();\n\t\tleadMap.put(\"Last_Name\",\"Lead from call \" + call.get(\"phone\"));\n\t\tleadMap.put(data.get(\"lead_fields\").get(0),call.get(\"phone\"));\n\t\tinfo leadMap;\n\t\tlead = zoho.crm.createRecord(\"Leads\",leadMap,{\"trigger\":data.get(\"trigger\")});\n\t\trecord = Map();\n\t\trecord.put(\"module\",\"Leads\");\n\t\tinfo lead;\n\t\tif(lead.get(\"code\") == \"DUPLICATE_DATA\")\n\t\t{\n\t\t\trecord.put(\"id\",lead.get(\"details\").get(\"id\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\trecord.put(\"id\",lead.get(\"id\"));\n\t\t}\n\t}\n\tfileResp = Map();\n\tif(record)\n\t{\n\t\t//Attach record\n\t\tfileResp.put('record',record);\n\t\turl = \"https://acrp.crmoz.com/get-file\";\n\t\turl = url + \"?orgId=\" + data.get(\"orgId\");\n\t\turl = url + \"&token=\" + token;\n\t\turl = url + \"&filename=\" + call.get(\"filename\");\n\t\tinfo url;\n\t\tfile_object = invokeurl\n\t\t[\n\t\t\turl :url\n\t\t\ttype :GET\n\t\t];\n\t\tinfo file_object;\n\t\tattachFileResponse = zoho.crm.attachFile(record.get(\"module\"),record.get(\"id\"),file_object);\n\t\tinfo attachFileResponse;\n\t\tfileResp.put('status',attachFileResponse.get(\"code\"));\n\t\t//Create Call\n\t\tif(data.get(\"create_call\"))\n\t\t{\n\t\t\tupdate = Map();\n\t\t\tupdate.put(\"Subject\",\"Call from \" + call.get(\"phone\"));\n\t\t\tupdate.put(\"Call_Type\",\"Inbound\");\n\t\t\tif(call.get(\"direction\") == 1)\n\t\t\t{\n\t\t\t\tupdate.put(\"Subject\",\"Call to \" + call.get(\"phone\"));\n\t\t\t\tupdate.put(\"Call_Type\",\"Outbound\");\n\t\t\t}\n\t\t\tupdate.put(\"Call_Duration\",call.get(\"duration\"));\n\t\t\tupdate.put(\"Call_Start_Time\",call.get(\"date\"));\n\t\t\tupdate.put(\"$which_call\",\"CompletedCall\");\n\t\t\tif(record.get(\"module\") == \"Contacts\")\n\t\t\t{\n\t\t\t\tupdate.put(\"Who_Id\",record.get(\"id\"));\n\t\t\t\tif(record.containKey(\"Account\"))\n\t\t\t\t{\n\t\t\t\t\tupdate.put(\"$se_module\",\"Accounts\");\n\t\t\t\t\tupdate.put(\"What_Id\",record.get(\"Account\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tupdate.put(\"$se_module\",\"Leads\");\n\t\t\t\tupdate.put(\"What_Id\",record.get(\"id\"));\n\t\t\t}\n\t\t\tif(record.containKey(\"Owner\"))\n\t\t\t{\n\t\t\t\tupdate.put(\"Owner\",record.get(\"Owner\"));\n\t\t\t}\n\t\t\tinfo zoho.crm.createRecord(\"Calls\",update,{\"trigger\":data.get(\"trigger\")});\n\t\t}\n\t}\n\tresponse.put(call.get(\"filename\"),fileResp);\n}\nreturn response;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000001565001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-09-23T16:35:02+02:00",
        "name": "test9",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test9()\n{\ninfo \"dsffs\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2022-09-23 07:35:02.0",
        "workflow": "info \"dsffs\";"
    },
    {
        "api_name": "xerotozohocrm__createrecords",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "createRecords",
        "id": "512029000001647005",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-11-04T15:01:26+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/xerotozohocrm__createrecords/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/xerotozohocrm__createrecords/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_contact_$KEY$Contacts.ID",
                        "value": "Contacts.Contact Id"
                    },
                    {
                        "name": "$map_contact_$KEY$First_Name",
                        "value": "Contacts.First Name"
                    },
                    {
                        "name": "$map_contact_$KEY$zohoworkdriveforcrm__Workdrive_Folder_ID",
                        "value": "Contacts.Workdrive Folder ID"
                    },
                    {
                        "name": "$map_contact_$KEY$Last_Name",
                        "value": "Contacts.Last Name"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "Change_Workdrive_Folder_Name",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Change_Contact_Workdrive_Folder_Name",
        "id": "512029000001276003",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:14+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function42",
        "id": "512029000001280001",
        "modified_by": null,
        "modified_on": 1657116617000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "wptest",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": "Veremko WP sync test",
        "display_name": "WP_test",
        "id": "512029000001360001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-10-28T15:52:58+02:00",
        "name": "wpTest",
        "nameSpace": "automation",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/wptest/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/wptest/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.wpTest(String crmAPIRequest)\n{\nrequestData = crmAPIRequest.get(\"body\");\nformData = requestData.toMap();\nresult = zoho.crm.createRecord(\"TestModule1\",formData,{\"trigger\":{\"workflow\"}});\ninfo result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-10-28 06:52:58.0",
        "workflow": "requestData = crmAPIRequest.get(\"body\");\nformData = requestData.toMap();\nresult = zoho.crm.createRecord(\"TestModule1\",formData,{\"trigger\":{\"workflow\"}});\ninfo result;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "TEst",
        "id": "512029000001599001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1666007910000,
        "name": "Test1",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.Test1()\n{\nsendmail\n[\n\tfrom :zoho.loginuserid\n\tto :\"denis.dikiy@gmail.com\"\n\tsubject :\"Test\"\n\tmessage :\"test\"\n]\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "sendmail": [
                {
                    "to": [
                        "denis.dikiy@gmail.com"
                    ]
                }
            ]
        },
        "updatedTime": "2022-10-17 04:58:30.0",
        "workflow": "sendmail\n[\n\tfrom :zoho.loginuserid\n\tto :\"denis.dikiy@gmail.com\"\n\tsubject :\"Test\"\n\tmessage :\"test\"\n]"
    },
    {
        "api_name": "testcustmodule",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "DV_test Custom module",
        "id": "512029000001397001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-08-25T10:29:06+02:00",
        "name": "testCustModule",
        "nameSpace": "automation",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testcustmodule/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testcustmodule/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testCustModule(String crmAPIRequest)\n{\nrequestData = crmAPIRequest.get(\"body\");\nformData = requestData.toMap();\nif(formData.containKey(\"Tags_which_describe_your_content\"))\n{\n\tformData.put(\"Tags_which_describe_your_content\",formData.get(\"Tags_which_describe_your_content\").toJSONList());\n}\n// test = zoho.crm.getRecords(\"TestModule1\");\nresult = zoho.crm.createRecord(\"Creators_Bambass_test\",formData,{\"trigger\":{\"workflow\"}});\ninfo result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-08-25 01:29:07.0",
        "workflow": "requestData = crmAPIRequest.get(\"body\");\nformData = requestData.toMap();\nif(formData.containKey(\"Tags_which_describe_your_content\"))\n{\n\tformData.put(\"Tags_which_describe_your_content\",formData.get(\"Tags_which_describe_your_content\").toJSONList());\n}\n// test = zoho.crm.getRecords(\"TestModule1\");\nresult = zoho.crm.createRecord(\"Creators_Bambass_test\",formData,{\"trigger\":{\"workflow\"}});\ninfo result;"
    },
    {
        "api_name": "test_create_folder",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": null,
                "id": 4444945000026318000,
                "isOldDataNeeded": false,
                "module": "Sales Orders",
                "name": "Create work Drive folder for SO",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "test create folder",
        "id": "512029000001288001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-08T09:40:21+02:00",
        "name": "test_create_folder",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_create_folder/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_create_folder/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test_create_folder()\n{\ntoken = zoho.crm.getOrgVariable(\"callsappforzohocrm__ext_token\");\nm = Map();\norg = zoho.crm.invokeConnector(\"crm.getorg\",m);\norgId = org.getJSON(\"response\").get(\"org\").get(0).get(\"id\");\ninfo orgId;\nresponse = zoho.crm.getRecords(\"users\",1,200,{\"type\":\"AdminUsers\"});\nusers = response.get(\"users\");\nzuid = null;\nfor each  user in response.get(\"users\")\n{\n\tcurrentId = user.get(\"zuid\").toLong();\n\tif(zuid.isNull() || zuid > currentId)\n\t{\n\t\tzuid = currentId;\n\t}\n}\ninfo zuid;\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\ndynamic_map = Map();\ndynamic_map.put(\"zuid\",zuid);\nresponse = zoho.crm.invokeConnector(\"callsappforzohocrm.zohoworkdrive.get_user_teams\",dynamic_map);\ninfo response;\nteamId = response.getJSON(\"response\").get(\"data\").get(0).get(\"id\");\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"name\",\"CallsApp Records\");\natt_param1.put(\"parent_id\",teamId);\natt_param1.put(\"is_public_within_team\",\"true\");\natt_param1.put(\"description\",\"Contains call record files\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"teamfolders\");\ndynamic_map = Map();\ndynamic_map.put(\"data\",data_param1);\nresponse = zoho.crm.invokeConnector(\"callsappforzohocrm.zohoworkdrive.create_teamfolder\",dynamic_map);\ninfo response.getJSON(\"response\");\n// workdrive_id = response.get(\"data\").get(\"id\");\n// url = \"https://callsapp.crmoz.com/settings/set-workdrive\";\n// url = url + \"?orgId=\" + orgId;\n// url = url + \"&workdrive_id=\" + workdrive_id;\n// url = url + \"&token=\" + token;\n// info geturl(url);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getOrgVariable",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-06-08 00:40:21.0",
        "workflow": "token = zoho.crm.getOrgVariable(\"callsappforzohocrm__ext_token\");\nm = Map();\norg = zoho.crm.invokeConnector(\"crm.getorg\",m);\norgId = org.getJSON(\"response\").get(\"org\").get(0).get(\"id\");\ninfo orgId;\nresponse = zoho.crm.getRecords(\"users\",1,200,{\"type\":\"AdminUsers\"});\nusers = response.get(\"users\");\nzuid = null;\nfor each  user in response.get(\"users\")\n{\n\tcurrentId = user.get(\"zuid\").toLong();\n\tif(zuid.isNull() || zuid > currentId)\n\t{\n\t\tzuid = currentId;\n\t}\n}\ninfo zuid;\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\ndynamic_map = Map();\ndynamic_map.put(\"zuid\",zuid);\nresponse = zoho.crm.invokeConnector(\"callsappforzohocrm.zohoworkdrive.get_user_teams\",dynamic_map);\ninfo response;\nteamId = response.getJSON(\"response\").get(\"data\").get(0).get(\"id\");\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"name\",\"CallsApp Records\");\natt_param1.put(\"parent_id\",teamId);\natt_param1.put(\"is_public_within_team\",\"true\");\natt_param1.put(\"description\",\"Contains call record files\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"teamfolders\");\ndynamic_map = Map();\ndynamic_map.put(\"data\",data_param1);\nresponse = zoho.crm.invokeConnector(\"callsappforzohocrm.zohoworkdrive.create_teamfolder\",dynamic_map);\ninfo response.getJSON(\"response\");\n// workdrive_id = response.get(\"data\").get(\"id\");\n// url = \"https://callsapp.crmoz.com/settings/set-workdrive\";\n// url = url + \"?orgId=\" + orgId;\n// url = url + \"&workdrive_id=\" + workdrive_id;\n// url = url + \"&token=\" + token;\n// info geturl(url);"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_campaign_$KEY$Campaigns.ID",
                        "value": "Campaigns.Campaign Id"
                    },
                    {
                        "name": "$map_campaign_$KEY$Campaign_Name",
                        "value": "Campaigns.Campaign Name"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Campaigns",
                "name": "Create_Campaign_Workdrive_Folder",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Create_Campaign_Workdrive_Folder",
        "id": "512029000001284001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:15+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "leadID",
                        "value": "Leads.Lead Id"
                    }
                ],
                "id": 4444945000019404000,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "DV_address_test",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "DV_address_test",
        "id": "512029000001411001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-08-15T10:49:23+02:00",
        "name": "copyAddressData",
        "nameSpace": "automation",
        "params": [
            {
                "name": "leadID",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.copyAddressData(Int leadID)\n{\nleadData = zoho.crm.getRecordById(\"Leads\",leadID);\nmaimAddressFields = Map();\nmaimAddressFields.put(\"City\",leadData.get(\"City\"));\nmaimAddressFields.put(\"Street\",leadData.get(\"Street\"));\nmaimAddressFields.put(\"State\",leadData.get(\"State\"));\nmaimAddressFields.put(\"Zip_Code\",leadData.get(\"Zip_Code\"));\nmainFieldsMap = Map();\nmainFieldsMap.put(\"City\",\"City\");\nmainFieldsMap.put(\"Street\",\"Street\");\nmainFieldsMap.put(\"State\",\"State\");\nmainFieldsMap.put(\"Zip_Code\",\"Zip_Code\");\ncreditAddressFields = Map();\ncreditAddressFields.put(\"City\",leadData.get(\"City1\"));\ncreditAddressFields.put(\"Street\",leadData.get(\"Address\"));\ncreditAddressFields.put(\"State\",leadData.get(\"State1\"));\ncreditAddressFields.put(\"Zip_Code\",leadData.get(\"Zip_code1\"));\ncreditFieldsMap = Map();\ncreditFieldsMap.put(\"City\",\"City1\");\ncreditFieldsMap.put(\"Street\",\"Address\");\ncreditFieldsMap.put(\"State\",\"State1\");\ncreditFieldsMap.put(\"Zip_Code\",\"Zip_code1\");\nreferenceAddressFields = Map();\nreferenceAddressFields.put(\"City\",leadData.get(\"City_billing_contact\"));\nreferenceAddressFields.put(\"Street\",leadData.get(\"Street_address\"));\nreferenceAddressFields.put(\"State\",leadData.get(\"State_billing_contact\"));\nreferenceAddressFields.put(\"Zip_Code\",leadData.get(\"Zip_Code_billing_contact\"));\nreferenceFieldsMap = Map();\nreferenceFieldsMap.put(\"City\",\"City_billing_contact\");\nreferenceFieldsMap.put(\"Street\",\"Street_address\");\nreferenceFieldsMap.put(\"State\",\"State_billing_contact\");\nreferenceFieldsMap.put(\"Zip_Code\",\"Zip_Code_billing_contact\");\ndataForUpdate = Map();\nkeys = maimAddressFields.keys();\nfor each  key in keys\n{\n\tif(!isNull(maimAddressFields.get(key)))\n\t{\n\t\tif(isNull(creditAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(creditFieldsMap.get(key),maimAddressFields.get(key));\n\t\t\tcreditAddressFields.put(key,maimAddressFields.get(key));\n\t\t}\n\t\tif(isNull(referenceAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(referenceFieldsMap.get(key),maimAddressFields.get(key));\n\t\t\treferenceAddressFields.put(key,maimAddressFields.get(key));\n\t\t}\n\t}\n\tif(!isNull(creditAddressFields.get(key)))\n\t{\n\t\tif(isNull(maimAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(mainFieldsMap.get(key),creditAddressFields.get(key));\n\t\t\tmaimAddressFields.put(key,creditAddressFields.get(key));\n\t\t}\n\t\tif(isNull(referenceAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(referenceFieldsMap.get(key),creditAddressFields.get(key));\n\t\t\treferenceAddressFields.put(key,creditAddressFields.get(key));\n\t\t}\n\t}\n\tif(!isNull(referenceAddressFields.get(key)))\n\t{\n\t\tif(isNull(maimAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(mainFieldsMap.get(key),referenceAddressFields.get(key));\n\t\t\tmaimAddressFields.put(key,referenceAddressFields.get(key));\n\t\t}\n\t\tif(isNull(creditAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(creditFieldsMap.get(key),referenceAddressFields.get(key));\n\t\t\tcreditAddressFields.put(key,referenceAddressFields.get(key));\n\t\t}\n\t}\n}\nif(!dataForUpdate.isEmpty())\n{\n\tdataForUpdate.put(\"trigger\",\"\");\n\tresult = zoho.crm.updateRecord(\"Leads\",leadID,dataForUpdate);\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "leadID"
            ]
        },
        "updatedTime": "2022-08-15 01:49:23.0",
        "workflow": "leadData = zoho.crm.getRecordById(\"Leads\",leadID);\nmaimAddressFields = Map();\nmaimAddressFields.put(\"City\",leadData.get(\"City\"));\nmaimAddressFields.put(\"Street\",leadData.get(\"Street\"));\nmaimAddressFields.put(\"State\",leadData.get(\"State\"));\nmaimAddressFields.put(\"Zip_Code\",leadData.get(\"Zip_Code\"));\nmainFieldsMap = Map();\nmainFieldsMap.put(\"City\",\"City\");\nmainFieldsMap.put(\"Street\",\"Street\");\nmainFieldsMap.put(\"State\",\"State\");\nmainFieldsMap.put(\"Zip_Code\",\"Zip_Code\");\ncreditAddressFields = Map();\ncreditAddressFields.put(\"City\",leadData.get(\"City1\"));\ncreditAddressFields.put(\"Street\",leadData.get(\"Address\"));\ncreditAddressFields.put(\"State\",leadData.get(\"State1\"));\ncreditAddressFields.put(\"Zip_Code\",leadData.get(\"Zip_code1\"));\ncreditFieldsMap = Map();\ncreditFieldsMap.put(\"City\",\"City1\");\ncreditFieldsMap.put(\"Street\",\"Address\");\ncreditFieldsMap.put(\"State\",\"State1\");\ncreditFieldsMap.put(\"Zip_Code\",\"Zip_code1\");\nreferenceAddressFields = Map();\nreferenceAddressFields.put(\"City\",leadData.get(\"City_billing_contact\"));\nreferenceAddressFields.put(\"Street\",leadData.get(\"Street_address\"));\nreferenceAddressFields.put(\"State\",leadData.get(\"State_billing_contact\"));\nreferenceAddressFields.put(\"Zip_Code\",leadData.get(\"Zip_Code_billing_contact\"));\nreferenceFieldsMap = Map();\nreferenceFieldsMap.put(\"City\",\"City_billing_contact\");\nreferenceFieldsMap.put(\"Street\",\"Street_address\");\nreferenceFieldsMap.put(\"State\",\"State_billing_contact\");\nreferenceFieldsMap.put(\"Zip_Code\",\"Zip_Code_billing_contact\");\ndataForUpdate = Map();\nkeys = maimAddressFields.keys();\nfor each  key in keys\n{\n\tif(!isNull(maimAddressFields.get(key)))\n\t{\n\t\tif(isNull(creditAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(creditFieldsMap.get(key),maimAddressFields.get(key));\n\t\t\tcreditAddressFields.put(key,maimAddressFields.get(key));\n\t\t}\n\t\tif(isNull(referenceAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(referenceFieldsMap.get(key),maimAddressFields.get(key));\n\t\t\treferenceAddressFields.put(key,maimAddressFields.get(key));\n\t\t}\n\t}\n\tif(!isNull(creditAddressFields.get(key)))\n\t{\n\t\tif(isNull(maimAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(mainFieldsMap.get(key),creditAddressFields.get(key));\n\t\t\tmaimAddressFields.put(key,creditAddressFields.get(key));\n\t\t}\n\t\tif(isNull(referenceAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(referenceFieldsMap.get(key),creditAddressFields.get(key));\n\t\t\treferenceAddressFields.put(key,creditAddressFields.get(key));\n\t\t}\n\t}\n\tif(!isNull(referenceAddressFields.get(key)))\n\t{\n\t\tif(isNull(maimAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(mainFieldsMap.get(key),referenceAddressFields.get(key));\n\t\t\tmaimAddressFields.put(key,referenceAddressFields.get(key));\n\t\t}\n\t\tif(isNull(creditAddressFields.get(key)))\n\t\t{\n\t\t\tdataForUpdate.put(creditFieldsMap.get(key),referenceAddressFields.get(key));\n\t\t\tcreditAddressFields.put(key,referenceAddressFields.get(key));\n\t\t}\n\t}\n}\nif(!dataForUpdate.isEmpty())\n{\n\tdataForUpdate.put(\"trigger\",\"\");\n\tresult = zoho.crm.updateRecord(\"Leads\",leadID,dataForUpdate);\n}"
    },
    {
        "api_name": "dv_creators_import_test",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "DV_creators_import_test",
        "id": "512029000001460003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-08-28T13:59:59+02:00",
        "name": "DV_creators_import_test",
        "nameSpace": "automation",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/dv_creators_import_test/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/dv_creators_import_test/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.DV_creators_import_test(String crmAPIRequest)\n{\nrequestData = crmAPIRequest.get(\"body\");\nproductsData = requestData.toJSONList();\nfor each  productElem in productsData\n{\n\tif(productElem.containKey(\"Tags_which_describe_your_content\"))\n\t{\n\t\tproductElem.put(\"Tags_which_describe_your_content\",productElem.get(\"Tags_which_describe_your_content\").toJSONList());\n\t}\n}\nresult = zoho.crm.bulkCreate(\"Creators_Bambass_test\",productsData);\ninfo result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkCreate",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-08-28 05:00:00.0",
        "workflow": "requestData = crmAPIRequest.get(\"body\");\nproductsData = requestData.toJSONList();\nfor each  productElem in productsData\n{\n\tif(productElem.containKey(\"Tags_which_describe_your_content\"))\n\t{\n\t\tproductElem.put(\"Tags_which_describe_your_content\",productElem.get(\"Tags_which_describe_your_content\").toJSONList());\n\t}\n}\nresult = zoho.crm.bulkCreate(\"Creators_Bambass_test\",productsData);\ninfo result;"
    },
    {
        "api_name": "test_zoho_sign",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001484001",
                "connectionLinkName": "zsign",
                "connectionName": "zsign",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoSign.account.ALL",
                    "ZohoSign.documents.ALL",
                    "ZohoSign.documents.UPDATE",
                    "ZohoSign.templates.ALL"
                ],
                "serviceName": "zoho_sign",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test_zoho_sign",
        "id": "512029000001483001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-09-03T08:24:46+02:00",
        "name": "test_zoho_sign",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_zoho_sign/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_zoho_sign/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test_zoho_sign()\n{\n// templateDetails = zoho.sign.getTemplateById(\"175983000000121001\",\"zsign\");\n// info templateDetails ;\n/*\n*\tAdd Fields\n*/\ndefaultData = Map();\ndefaultData.put(\"test_field\",\"TEST VALUE\");\n/*\n*\tSend for sign\n*/\ntemplate = Map();\ntemplate.put(\"default_fields\",defaultData);\nactionsList = List();\nrecipient = Map();\nrecipient.put(\"recipient_name\",\"DAVID\");\nrecipient.put(\"recipient_email\",\"mp@crmoz.com\");\nrecipient.put(\"action_type\",\"SIGN\");\nrecipient.put(\"action_id\",\"175983000000121022\");\nrecipient.put(\"role\",\"Provider\");\nrecipient.put(\"verify_recipient\",\"false\");\nrecipient.put(\"is_embedded\",true);\nactionsList.add(recipient);\nrecipient = Map();\nrecipient.put(\"recipient_name\",\"DAVID\");\nrecipient.put(\"recipient_email\",\"mikhailpopov0585@gmail.com\");\nrecipient.put(\"action_type\",\"SIGN\");\nrecipient.put(\"action_id\",\"175983000000121024\");\nrecipient.put(\"role\",\"Client\");\nrecipient.put(\"verify_recipient\",\"false\");\nrecipient.put(\"is_embedded\",true);\nactionsList.add(recipient);\ntemplate.put(\"actions\",actionsList);\nsubmitMap = Map();\nsubmitMap.put(\"templates\",template);\nparameters = Map();\nparameters.put(\"is_quicksend\",\"true\");\nparameters.put(\"data\",submitMap);\ninfo parameters;\nresp = zoho.sign.createUsingTemplate(\"175983000000121001\",parameters,\"zsign\");\ninfo resp;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "zsign",
                    "display_name": "Zoho Sign",
                    "function": "zoho.sign.createUsingTemplate",
                    "service": "ZohoSign"
                }
            ]
        },
        "updatedTime": "2024-09-02 23:24:53.0",
        "workflow": "// templateDetails = zoho.sign.getTemplateById(\"175983000000121001\",\"zsign\");\n// info templateDetails ;\n/*\n*\tAdd Fields\n*/\ndefaultData = Map();\ndefaultData.put(\"test_field\",\"TEST VALUE\");\n/*\n*\tSend for sign\n*/\ntemplate = Map();\ntemplate.put(\"default_fields\",defaultData);\nactionsList = List();\nrecipient = Map();\nrecipient.put(\"recipient_name\",\"DAVID\");\nrecipient.put(\"recipient_email\",\"mp@crmoz.com\");\nrecipient.put(\"action_type\",\"SIGN\");\nrecipient.put(\"action_id\",\"175983000000121022\");\nrecipient.put(\"role\",\"Provider\");\nrecipient.put(\"verify_recipient\",\"false\");\nrecipient.put(\"is_embedded\",true);\nactionsList.add(recipient);\nrecipient = Map();\nrecipient.put(\"recipient_name\",\"DAVID\");\nrecipient.put(\"recipient_email\",\"mikhailpopov0585@gmail.com\");\nrecipient.put(\"action_type\",\"SIGN\");\nrecipient.put(\"action_id\",\"175983000000121024\");\nrecipient.put(\"role\",\"Client\");\nrecipient.put(\"verify_recipient\",\"false\");\nrecipient.put(\"is_embedded\",true);\nactionsList.add(recipient);\ntemplate.put(\"actions\",actionsList);\nsubmitMap = Map();\nsubmitMap.put(\"templates\",template);\nparameters = Map();\nparameters.put(\"is_quicksend\",\"true\");\nparameters.put(\"data\",submitMap);\ninfo parameters;\nresp = zoho.sign.createUsingTemplate(\"175983000000121001\",parameters,\"zsign\");\ninfo resp;"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_lead_$KEY$Leads.ID",
                        "value": "Leads.Lead Id"
                    },
                    {
                        "name": "$map_lead_$KEY$First_Name",
                        "value": "Leads.First Name"
                    },
                    {
                        "name": "$map_lead_$KEY$Last_Name",
                        "value": "Leads.Last Name"
                    },
                    {
                        "name": "$map_lead_$KEY$zohoworkdriveforcrm__Workdrive_Folder_ID",
                        "value": "Leads.Workdrive Folder ID"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "Change_Lead_Workdrive_Folder_Name",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Change_Lead_Workdrive_Folder_Name",
        "id": "512029000001280008",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:14+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function2",
        "id": "512029000001643010",
        "modified_by": null,
        "modified_on": 1667570488000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_campaign_$KEY$Campaigns.ID",
                        "value": "Campaigns.Campaign Id"
                    },
                    {
                        "name": "$map_campaign_$KEY$Campaign_Name",
                        "value": "Campaigns.Campaign Name"
                    },
                    {
                        "name": "$map_campaign_$KEY$zohoworkdriveforcrm__Workdrive_Folder_ID",
                        "value": "Campaigns.Workdrive Folder ID"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Campaigns",
                "name": "Change_Campaign_Workdrive_Folder_Name",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Change_Campaign_Workdrive_Folder_Name",
        "id": "512029000001276010",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:14+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function12",
        "id": "512029000001298003",
        "modified_by": null,
        "modified_on": 1657280617000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_deal_$KEY$Deals.ID",
                        "value": "Deals.Deals - Campaigns Id"
                    },
                    {
                        "name": "$map_deal_$KEY$Deal_Name",
                        "value": "Deals.Deals - Campaigns Name"
                    },
                    {
                        "name": "$map_deal_$KEY$zohoworkdriveforcrm__Workdrive_Folder_ID",
                        "value": "Deals.Workdrive Folder ID"
                    }
                ],
                "id": 4444945000017465300,
                "isOldDataNeeded": false,
                "module": "Deals",
                "name": "Change_Workdrive_Folder_Name",
                "status": false
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "Change_Deal_Workdrive_Folder_Name",
        "id": "512029000001281001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-07-06T16:10:14+02:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test da",
        "id": "512029000001313001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1677770528000,
        "name": "test_da",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test_da()\n{\n// response = invokeurl\n// [\n// \turl :\"https://people.zoho.com/people/api/attendance?empId=001&checkOut=\" + zoho.encryption.urlEncode(\"27/01/2023 12:00:16\") + \"&dateFormat=\" + zoho.encryption.urlEncode(\"dd/MM/yyyy HH:mm:ss\")\n// \ttype :POST\n// \tconnection:\"zoho_people\"\n// ];\n// info response;\nm = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\ninfo resp;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-03-02 07:22:08.0",
        "workflow": "// response = invokeurl\n// [\n// \turl :\"https://people.zoho.com/people/api/attendance?empId=001&checkOut=\" + zoho.encryption.urlEncode(\"27/01/2023 12:00:16\") + \"&dateFormat=\" + zoho.encryption.urlEncode(\"dd/MM/yyyy HH:mm:ss\")\n// \ttype :POST\n// \tconnection:\"zoho_people\"\n// ];\n// info response;\nm = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\ninfo resp;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function",
        "id": "512029000001321001",
        "modified_by": null,
        "modified_on": 1658220404000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "WP Test ",
        "id": "512029000001359001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1659525600000,
        "name": "testWP",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.testWP()\n{\ninfo 'test';\n// response = invokeUrl [\n// \turl: <url>\n// \ttype: GET/POST/PUT/DELETE\n// \tparameters: <paramMap/string>\n// \tconnection: \"zoho_crm\"\n// ];\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2022-08-03 04:20:00.0",
        "workflow": "info 'test';\n// response = invokeUrl [\n// \turl: <url>\n// \ttype: GET/POST/PUT/DELETE\n// \tparameters: <paramMap/string>\n// \tconnection: \"zoho_crm\"\n// ];"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function13",
        "id": "512029000001289001",
        "modified_by": null,
        "modified_on": 1657188954000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function13",
        "id": "512029000001300001",
        "modified_by": null,
        "modified_on": 1657280617000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": null,
                "id": "4444945000021071002",
                "isOldDataNeeded": false,
                "module": "Deals",
                "name": "test"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "test",
        "id": "512029000001564001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-09-23T10:43:41+02:00",
        "name": "test8",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.test8()\n{\ninfo \"fdsdf\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2022-09-23 01:43:42.0",
        "workflow": "info \"fdsdf\";"
    },
    {
        "api_name": "test_xero",
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "test xero",
        "id": "512029000001525001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-10-04T14:21:17+02:00",
        "name": "test_xero",
        "nameSpace": "button",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_xero/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_xero/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.test_xero(String crmAPIRequest)\n{\n// data = crmAPIRequest.get(\"body\").toMap();\ndata = {\"modules\":{\"contacts\":{\"items\":{{\"create\":false,\"data\":{\"xerotozohocrm__Xero_ID\":\"f5cf9df2-d872-4ae6-9752-3aaece9ab726\"}}},\"module\":\"Accounts\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"search\":{\"field\":{\"xerotozohocrm__Xero_ID\",\"Phone\"},\"condition\":{\"(xerotozohocrm__Xero_ID:equals:f5cf9df2-d872-4ae6-9752-3aaece9ab726)\"}}},\"products\":{\"items\":{{\"create\":true,\"data\":{\"xerotozohocrm__Xero_ID\":\"ec1577f8-741f-4e85-b530-c9753df21e98\",\"Product_Name\":\"test prod 2\",\"Product_Code\":\"Test 2\",\"Unit_Price\":46,\"Description\":\"test prod 2\"}},{\"create\":false,\"data\":{\"Product_Code\":\"Test\"}},{\"create\":false,\"data\":{\"Product_Code\":\"xero_empty\"}}},\"module\":\"Products\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"search\":{\"field\":{\"Product_Code\"},\"condition\":{\"(((Product_Code:equals:Test 2) or (Product_Code:equals:Test)) or (Product_Code:equals:xero_empty))\"}}},\"invoices\":{\"items\":{{\"create\":true,\"data\":{\"xerotozohocrm__Xero_ID\":\"57b2b51e-d3c8-46e6-8dbe-73ea8861a032\",\"Subject\":\"Xero INV-0002\",\"Status\":\"DRAFT\",\"Discount\":23,\"Adjustment\":9.6,\"Account_Name\":\"f5cf9df2-d872-4ae6-9752-3aaece9ab726\",\"Invoiced_Items\":{{\"Description\":\"Test Product\",\"List_Price\":32,\"Quantity\":3,\"Product_Name\":\"Test\"},{\"Description\":\"test prod 2\",\"List_Price\":46,\"Quantity\":5,\"Product_Name\":\"Test 2\"}}}}},\"module\":\"Invoices\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"search\":{\"field\":{\"xerotozohocrm__Xero_ID\"},\"condition\":{\"(xerotozohocrm__Xero_ID:equals:57b2b51e-d3c8-46e6-8dbe-73ea8861a032)\"}},\"lookups\":{{\"module\":\"contacts\",\"field\":\"Account_Name\",\"value\":\"Contact.ContactID\",\"search\":\"xerotozohocrm__Xero_ID\"}},\"subform\":{\"module\":\"Invoiced_Items\",\"lookups\":{{\"field\":\"Product_Name\",\"value\":\"ItemCode\",\"module\":\"products\",\"search\":\"Product_Code\"}}}},\"quotes\":{\"items\":{{\"create\":true,\"data\":{\"xerotozohocrm__Xero_ID\":\"0afbd13f-0018-49eb-9356-aaf592157bf8\",\"Subject\":\"Xero QU-0001\",\"Status\":\"DRAFT\",\"Account_Name\":\"f5cf9df2-d872-4ae6-9752-3aaece9ab726\",\"Quoted_Items\":{{\"Description\":\"Test Product\",\"List_Price\":32,\"Quantity\":1,\"Product_Name\":\"Test\"},{\"Description\":\"BLabhahbahbab\",\"List_Price\":68,\"Quantity\":4,\"Product_Name\":\"xero_empty\"}}}}},\"module\":\"Quotes\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"search\":{\"field\":{\"xerotozohocrm__Xero_ID\"},\"condition\":{\"(xerotozohocrm__Xero_ID:equals:0afbd13f-0018-49eb-9356-aaf592157bf8)\"}},\"lookups\":{{\"field\":\"Account_Name\",\"value\":\"Contact.ContactID\",\"module\":\"contacts\",\"search\":\"xerotozohocrm__Xero_ID\"}},\"subform\":{\"module\":\"Quoted_Items\",\"lookups\":{{\"field\":\"Product_Name\",\"value\":\"ItemCode\",\"module\":\"products\",\"search\":\"Product_Code\"}}}}}};\nstatus = \"success\";\nids = Map();\nmodules = data.get(\"modules\");\nif(!data.get(\"isTaxable\").isNull() && data.get(\"isTaxable\"))\n{\n\tdynamic_map = Map();\n\tresponse = zoho.crm.invokeConnector(\"xerotozohocrm.crmsettings.crm_get_tax\",dynamic_map);\n\tresponse = response.get(\"response\").toMap();\n\tinfo response;\n\tcrmTaxes = Map();\n\tfor each  tax in response.get(\"taxes\")\n\t{\n\t\tcrmTaxes.put(tax.get(\"name\") + \"_\" + tax.get(\"value\"),tax);\n\t}\n\tcreateTaxes = Map();\n\tproducts = modules.get(\"product\").get(\"items\");\n\tfor each  product in products\n\t{\n\t\tif(!product.get(\"Tax\").isNull())\n\t\t{\n\t\t\tfor each  tax in product.get(\"Tax\")\n\t\t\t{\n\t\t\t\tcrmTax = crmTaxes.get(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"));\n\t\t\t\tif(crmTax.isNull())\n\t\t\t\t{\n\t\t\t\t\tcreateTaxes.put(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"),{\"name\":tax.get(\"name\"),\"value\":tax.get(\"percentage\")});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinfo crmTaxes;\n\tinfo createTaxes;\n\tif(createTaxes.size() > 0)\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"taxes\",createTaxes.values());\n\t\tresponse = zoho.crm.invokeConnector(\"xerotozohocrm.crmsettings.crm_insert_tax\",dynamic_map);\n\t\tresponse = response.get(\"response\").toMap();\n\t\tinfo response;\n\t\tfor each  tax in response.get(\"taxes\")\n\t\t{\n\t\t\tcrmTaxes.put(tax.get(\"details\").get(\"name\") + \"_\" + tax.get(\"details\").get(\"value\"),tax.get(\"details\"));\n\t\t}\n\t}\n\tfor each  product in products\n\t{\n\t\tif(!product.get(\"Tax\").isNull())\n\t\t{\n\t\t\tfor each  tax in product.get(\"Tax\")\n\t\t\t{\n\t\t\t\tcrmTax = crmTaxes.get(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"));\n\t\t\t\ttax.put(\"id\",crmTax.get(\"id\"));\n\t\t\t}\n\t\t}\n\t}\n}\nfor each  type in modules.keys()\n{\n\tupdateOnly = modules.get(type).get(\"update\");\n\tmodule = modules.get(type).get(\"module\");\n\ttrigger = modules.get(type).get(\"trigger\");\n\titems = modules.get(type).get(\"items\");\n\tlookups = modules.get(type).get(\"lookups\");\n\tsubform = modules.get(type).get(\"subform\");\n\tsearch = modules.get(type).get(\"search\");\n\tinfo type + \":\";\n\tif(!search.get(\"condition\").isNull())\n\t{\n\t\tsearchRecords = list();\n\t\tinfo \"Condition:\";\n\t\tinfo search.get(\"condition\");\n\t\tfor each  searchStr in search.get(\"condition\")\n\t\t{\n\t\t\tsearchResult = zoho.crm.searchRecords(module,searchStr);\n\t\t\tfor each  item in searchResult\n\t\t\t{\n\t\t\t\tsearchRecords.add(item);\n\t\t\t}\n\t\t}\n\t\tinfo searchRecords;\n\t\tfor each  record in searchRecords\n\t\t{\n\t\t\tfor each  item in items\n\t\t\t{\n\t\t\t\titemData = item.get(\"data\");\n\t\t\t\tfor each  fieldName in search.get(\"field\")\n\t\t\t\t{\n\t\t\t\t\tif(itemData.get(fieldName) == record.get(fieldName))\n\t\t\t\t\t{\n\t\t\t\t\t\titemData.put(\"id\",record.get(\"id\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinfo items;\n\tcreate = list();\n\tupdate = list();\n\tinfo type + \" items: \" + items.size();\n\tfor each  item in items\n\t{\n\t\tif(!item.get(\"create\").isNull() && !item.get(\"create\"))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\titemData = item.get(\"data\");\n\t\tif(!lookups.isNull())\n\t\t{\n\t\t\tinfo \"Lookups:\";\n\t\t\tfor each  lookup in lookups\n\t\t\t{\n\t\t\t\tval = null;\n\t\t\t\tlookupModule = modules.get(lookup.get(\"module\"));\n\t\t\t\tlookupSearchField = lookupModule.get(\"search\").get(\"field\").get(0);\n\t\t\t\tfor each  rec in lookupModule.get(\"items\")\n\t\t\t\t{\n\t\t\t\t\trecData = rec.get(\"data\");\n\t\t\t\t\tif(recData.get(lookupSearchField) == itemData.get(lookup.get(\"field\")))\n\t\t\t\t\t{\n\t\t\t\t\t\tval = recData.get(\"id\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titemData.put(lookup.get(\"field\"),val);\n\t\t\t}\n\t\t}\n\t\tif(!subform.isNull() && subform.containKey(\"lookups\"))\n\t\t{\n\t\t\tinfo \"Subform:\";\n\t\t\tfor each  lookup in subform.get(\"lookups\")\n\t\t\t{\n\t\t\t\tinfo lookup.get(\"field\");\n\t\t\t\tfor each  row in itemData.get(subform.get(\"module\"))\n\t\t\t\t{\n\t\t\t\t\tlookupModule = modules.get(lookup.get(\"module\"));\n\t\t\t\t\tlookupSearchField = lookupModule.get(\"search\").get(\"field\").get(0);\n\t\t\t\t\tval = null;\n\t\t\t\t\tfor each  rec in lookupModule.get(\"items\")\n\t\t\t\t\t{\n\t\t\t\t\t\trecData = rec.get(\"data\");\n\t\t\t\t\t\tif(recData.get(lookupSearchField) == row.get(lookup.get(\"field\")))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tval = recData.get(\"id\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trow.put(lookup.get(\"field\"),val);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(itemData.get(\"id\").isNull())\n\t\t{\n\t\t\tcreate.add(itemData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate.add(itemData);\n\t\t}\n\t}\n\tupsertIds = Map();\n\tinfo \"Create: \" + create.size();\n\tinfo create;\n\tif(create.size() > 0 && updateOnly.isNull())\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"module\",module);\n\t\tdynamic_map.put(\"data\",create);\n\t\tdynamic_map.put(\"trigger\",trigger);\n\t\tresp = zoho.crm.invokeConnector(\"xerotozohocrm.crmsettings.crm_insert\",dynamic_map);\n\t\tresp = resp.get(\"response\").toMap();\n\t\tinfo resp;\n\t\tl = list(resp.get(\"data\"));\n\t\tfor each index i in l\n\t\t{\n\t\t\tcreateItem = create.get(i);\n\t\t\trespItem = resp.get(\"data\").get(i);\n\t\t\tid = Map();\n\t\t\tid.put('id',respItem.get(\"details\").get(\"id\"));\n\t\t\tid.put('status',respItem.get(\"status\"));\n\t\t\tid.put('action','create');\n\t\t\tcreateItem.put(\"id\",id.get(\"id\"));\n\t\t\tfieldName = search.get(\"field\").get(0);\n\t\t\tupsertIds.put(createItem.get(fieldName),id);\n\t\t\tif(id.get(\"status\") != \"success\")\n\t\t\t{\n\t\t\t\tstatus = \"error\";\n\t\t\t}\n\t\t}\n\t}\n\tinfo \"Update: \" + update.size();\n\tinfo update;\n\tif(update.size() > 0)\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"module\",module);\n\t\tdynamic_map.put(\"data\",update);\n\t\tdynamic_map.put(\"trigger\",trigger);\n\t\tresp = zoho.crm.invokeConnector(\"xerotozohocrm.crmsettings.crm_update\",dynamic_map);\n\t\tresp = resp.get(\"response\").toMap();\n\t\tl = list(resp.get(\"data\"));\n\t\tfor each index i in l\n\t\t{\n\t\t\tupdateItem = update.get(i);\n\t\t\trespItem = resp.get(\"data\").get(i);\n\t\t\tid = Map();\n\t\t\tid.put('id',respItem.get(\"details\").get(\"id\"));\n\t\t\tid.put('action','update');\n\t\t\tid.put('status',respItem.get(\"status\"));\n\t\t\tfieldName = search.get(\"field\").get(0);\n\t\t\tupsertIds.put(updateItem.get(fieldName),id);\n\t\t\tif(id.get(\"status\") != \"success\")\n\t\t\t{\n\t\t\t\tstatus = \"error\";\n\t\t\t}\n\t\t}\n\t\tinfo resp;\n\t}\n\tids.put(type,upsertIds);\n}\nresult = Map();\nresult.put(\"ids\",ids);\nresult.put(\"status\",status);\nreturn result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2022-10-04 05:21:20.0",
        "workflow": "// data = crmAPIRequest.get(\"body\").toMap();\ndata = {\"modules\":{\"contacts\":{\"items\":{{\"create\":false,\"data\":{\"xerotozohocrm__Xero_ID\":\"f5cf9df2-d872-4ae6-9752-3aaece9ab726\"}}},\"module\":\"Accounts\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"search\":{\"field\":{\"xerotozohocrm__Xero_ID\",\"Phone\"},\"condition\":{\"(xerotozohocrm__Xero_ID:equals:f5cf9df2-d872-4ae6-9752-3aaece9ab726)\"}}},\"products\":{\"items\":{{\"create\":true,\"data\":{\"xerotozohocrm__Xero_ID\":\"ec1577f8-741f-4e85-b530-c9753df21e98\",\"Product_Name\":\"test prod 2\",\"Product_Code\":\"Test 2\",\"Unit_Price\":46,\"Description\":\"test prod 2\"}},{\"create\":false,\"data\":{\"Product_Code\":\"Test\"}},{\"create\":false,\"data\":{\"Product_Code\":\"xero_empty\"}}},\"module\":\"Products\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"search\":{\"field\":{\"Product_Code\"},\"condition\":{\"(((Product_Code:equals:Test 2) or (Product_Code:equals:Test)) or (Product_Code:equals:xero_empty))\"}}},\"invoices\":{\"items\":{{\"create\":true,\"data\":{\"xerotozohocrm__Xero_ID\":\"57b2b51e-d3c8-46e6-8dbe-73ea8861a032\",\"Subject\":\"Xero INV-0002\",\"Status\":\"DRAFT\",\"Discount\":23,\"Adjustment\":9.6,\"Account_Name\":\"f5cf9df2-d872-4ae6-9752-3aaece9ab726\",\"Invoiced_Items\":{{\"Description\":\"Test Product\",\"List_Price\":32,\"Quantity\":3,\"Product_Name\":\"Test\"},{\"Description\":\"test prod 2\",\"List_Price\":46,\"Quantity\":5,\"Product_Name\":\"Test 2\"}}}}},\"module\":\"Invoices\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"search\":{\"field\":{\"xerotozohocrm__Xero_ID\"},\"condition\":{\"(xerotozohocrm__Xero_ID:equals:57b2b51e-d3c8-46e6-8dbe-73ea8861a032)\"}},\"lookups\":{{\"module\":\"contacts\",\"field\":\"Account_Name\",\"value\":\"Contact.ContactID\",\"search\":\"xerotozohocrm__Xero_ID\"}},\"subform\":{\"module\":\"Invoiced_Items\",\"lookups\":{{\"field\":\"Product_Name\",\"value\":\"ItemCode\",\"module\":\"products\",\"search\":\"Product_Code\"}}}},\"quotes\":{\"items\":{{\"create\":true,\"data\":{\"xerotozohocrm__Xero_ID\":\"0afbd13f-0018-49eb-9356-aaf592157bf8\",\"Subject\":\"Xero QU-0001\",\"Status\":\"DRAFT\",\"Account_Name\":\"f5cf9df2-d872-4ae6-9752-3aaece9ab726\",\"Quoted_Items\":{{\"Description\":\"Test Product\",\"List_Price\":32,\"Quantity\":1,\"Product_Name\":\"Test\"},{\"Description\":\"BLabhahbahbab\",\"List_Price\":68,\"Quantity\":4,\"Product_Name\":\"xero_empty\"}}}}},\"module\":\"Quotes\",\"trigger\":{\"workflow\",\"blueprint\",\"approval\"},\"search\":{\"field\":{\"xerotozohocrm__Xero_ID\"},\"condition\":{\"(xerotozohocrm__Xero_ID:equals:0afbd13f-0018-49eb-9356-aaf592157bf8)\"}},\"lookups\":{{\"field\":\"Account_Name\",\"value\":\"Contact.ContactID\",\"module\":\"contacts\",\"search\":\"xerotozohocrm__Xero_ID\"}},\"subform\":{\"module\":\"Quoted_Items\",\"lookups\":{{\"field\":\"Product_Name\",\"value\":\"ItemCode\",\"module\":\"products\",\"search\":\"Product_Code\"}}}}}};\nstatus = \"success\";\nids = Map();\nmodules = data.get(\"modules\");\nif(!data.get(\"isTaxable\").isNull() && data.get(\"isTaxable\"))\n{\n\tdynamic_map = Map();\n\tresponse = zoho.crm.invokeConnector(\"xerotozohocrm.crmsettings.crm_get_tax\",dynamic_map);\n\tresponse = response.get(\"response\").toMap();\n\tinfo response;\n\tcrmTaxes = Map();\n\tfor each  tax in response.get(\"taxes\")\n\t{\n\t\tcrmTaxes.put(tax.get(\"name\") + \"_\" + tax.get(\"value\"),tax);\n\t}\n\tcreateTaxes = Map();\n\tproducts = modules.get(\"product\").get(\"items\");\n\tfor each  product in products\n\t{\n\t\tif(!product.get(\"Tax\").isNull())\n\t\t{\n\t\t\tfor each  tax in product.get(\"Tax\")\n\t\t\t{\n\t\t\t\tcrmTax = crmTaxes.get(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"));\n\t\t\t\tif(crmTax.isNull())\n\t\t\t\t{\n\t\t\t\t\tcreateTaxes.put(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"),{\"name\":tax.get(\"name\"),\"value\":tax.get(\"percentage\")});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinfo crmTaxes;\n\tinfo createTaxes;\n\tif(createTaxes.size() > 0)\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"taxes\",createTaxes.values());\n\t\tresponse = zoho.crm.invokeConnector(\"xerotozohocrm.crmsettings.crm_insert_tax\",dynamic_map);\n\t\tresponse = response.get(\"response\").toMap();\n\t\tinfo response;\n\t\tfor each  tax in response.get(\"taxes\")\n\t\t{\n\t\t\tcrmTaxes.put(tax.get(\"details\").get(\"name\") + \"_\" + tax.get(\"details\").get(\"value\"),tax.get(\"details\"));\n\t\t}\n\t}\n\tfor each  product in products\n\t{\n\t\tif(!product.get(\"Tax\").isNull())\n\t\t{\n\t\t\tfor each  tax in product.get(\"Tax\")\n\t\t\t{\n\t\t\t\tcrmTax = crmTaxes.get(tax.get(\"name\") + \"_\" + tax.get(\"percentage\"));\n\t\t\t\ttax.put(\"id\",crmTax.get(\"id\"));\n\t\t\t}\n\t\t}\n\t}\n}\nfor each  type in modules.keys()\n{\n\tupdateOnly = modules.get(type).get(\"update\");\n\tmodule = modules.get(type).get(\"module\");\n\ttrigger = modules.get(type).get(\"trigger\");\n\titems = modules.get(type).get(\"items\");\n\tlookups = modules.get(type).get(\"lookups\");\n\tsubform = modules.get(type).get(\"subform\");\n\tsearch = modules.get(type).get(\"search\");\n\tinfo type + \":\";\n\tif(!search.get(\"condition\").isNull())\n\t{\n\t\tsearchRecords = list();\n\t\tinfo \"Condition:\";\n\t\tinfo search.get(\"condition\");\n\t\tfor each  searchStr in search.get(\"condition\")\n\t\t{\n\t\t\tsearchResult = zoho.crm.searchRecords(module,searchStr);\n\t\t\tfor each  item in searchResult\n\t\t\t{\n\t\t\t\tsearchRecords.add(item);\n\t\t\t}\n\t\t}\n\t\tinfo searchRecords;\n\t\tfor each  record in searchRecords\n\t\t{\n\t\t\tfor each  item in items\n\t\t\t{\n\t\t\t\titemData = item.get(\"data\");\n\t\t\t\tfor each  fieldName in search.get(\"field\")\n\t\t\t\t{\n\t\t\t\t\tif(itemData.get(fieldName) == record.get(fieldName))\n\t\t\t\t\t{\n\t\t\t\t\t\titemData.put(\"id\",record.get(\"id\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinfo items;\n\tcreate = list();\n\tupdate = list();\n\tinfo type + \" items: \" + items.size();\n\tfor each  item in items\n\t{\n\t\tif(!item.get(\"create\").isNull() && !item.get(\"create\"))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\titemData = item.get(\"data\");\n\t\tif(!lookups.isNull())\n\t\t{\n\t\t\tinfo \"Lookups:\";\n\t\t\tfor each  lookup in lookups\n\t\t\t{\n\t\t\t\tval = null;\n\t\t\t\tlookupModule = modules.get(lookup.get(\"module\"));\n\t\t\t\tlookupSearchField = lookupModule.get(\"search\").get(\"field\").get(0);\n\t\t\t\tfor each  rec in lookupModule.get(\"items\")\n\t\t\t\t{\n\t\t\t\t\trecData = rec.get(\"data\");\n\t\t\t\t\tif(recData.get(lookupSearchField) == itemData.get(lookup.get(\"field\")))\n\t\t\t\t\t{\n\t\t\t\t\t\tval = recData.get(\"id\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\titemData.put(lookup.get(\"field\"),val);\n\t\t\t}\n\t\t}\n\t\tif(!subform.isNull() && subform.containKey(\"lookups\"))\n\t\t{\n\t\t\tinfo \"Subform:\";\n\t\t\tfor each  lookup in subform.get(\"lookups\")\n\t\t\t{\n\t\t\t\tinfo lookup.get(\"field\");\n\t\t\t\tfor each  row in itemData.get(subform.get(\"module\"))\n\t\t\t\t{\n\t\t\t\t\tlookupModule = modules.get(lookup.get(\"module\"));\n\t\t\t\t\tlookupSearchField = lookupModule.get(\"search\").get(\"field\").get(0);\n\t\t\t\t\tval = null;\n\t\t\t\t\tfor each  rec in lookupModule.get(\"items\")\n\t\t\t\t\t{\n\t\t\t\t\t\trecData = rec.get(\"data\");\n\t\t\t\t\t\tif(recData.get(lookupSearchField) == row.get(lookup.get(\"field\")))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tval = recData.get(\"id\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trow.put(lookup.get(\"field\"),val);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(itemData.get(\"id\").isNull())\n\t\t{\n\t\t\tcreate.add(itemData);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tupdate.add(itemData);\n\t\t}\n\t}\n\tupsertIds = Map();\n\tinfo \"Create: \" + create.size();\n\tinfo create;\n\tif(create.size() > 0 && updateOnly.isNull())\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"module\",module);\n\t\tdynamic_map.put(\"data\",create);\n\t\tdynamic_map.put(\"trigger\",trigger);\n\t\tresp = zoho.crm.invokeConnector(\"xerotozohocrm.crmsettings.crm_insert\",dynamic_map);\n\t\tresp = resp.get(\"response\").toMap();\n\t\tinfo resp;\n\t\tl = list(resp.get(\"data\"));\n\t\tfor each index i in l\n\t\t{\n\t\t\tcreateItem = create.get(i);\n\t\t\trespItem = resp.get(\"data\").get(i);\n\t\t\tid = Map();\n\t\t\tid.put('id',respItem.get(\"details\").get(\"id\"));\n\t\t\tid.put('status',respItem.get(\"status\"));\n\t\t\tid.put('action','create');\n\t\t\tcreateItem.put(\"id\",id.get(\"id\"));\n\t\t\tfieldName = search.get(\"field\").get(0);\n\t\t\tupsertIds.put(createItem.get(fieldName),id);\n\t\t\tif(id.get(\"status\") != \"success\")\n\t\t\t{\n\t\t\t\tstatus = \"error\";\n\t\t\t}\n\t\t}\n\t}\n\tinfo \"Update: \" + update.size();\n\tinfo update;\n\tif(update.size() > 0)\n\t{\n\t\tdynamic_map = Map();\n\t\tdynamic_map.put(\"module\",module);\n\t\tdynamic_map.put(\"data\",update);\n\t\tdynamic_map.put(\"trigger\",trigger);\n\t\tresp = zoho.crm.invokeConnector(\"xerotozohocrm.crmsettings.crm_update\",dynamic_map);\n\t\tresp = resp.get(\"response\").toMap();\n\t\tl = list(resp.get(\"data\"));\n\t\tfor each index i in l\n\t\t{\n\t\t\tupdateItem = update.get(i);\n\t\t\trespItem = resp.get(\"data\").get(i);\n\t\t\tid = Map();\n\t\t\tid.put('id',respItem.get(\"details\").get(\"id\"));\n\t\t\tid.put('action','update');\n\t\t\tid.put('status',respItem.get(\"status\"));\n\t\t\tfieldName = search.get(\"field\").get(0);\n\t\t\tupsertIds.put(updateItem.get(fieldName),id);\n\t\t\tif(id.get(\"status\") != \"success\")\n\t\t\t{\n\t\t\t\tstatus = \"error\";\n\t\t\t}\n\t\t}\n\t\tinfo resp;\n\t}\n\tids.put(type,upsertIds);\n}\nresult = Map();\nresult.put(\"ids\",ids);\nresult.put(\"status\",status);\nreturn result;"
    },
    {
        "api_name": "dv_leads_import_test",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "DV_leads_import_test",
        "id": "512029000001458001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-08-26T13:35:27+02:00",
        "name": "DV_leads_import_test",
        "nameSpace": "automation",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/dv_leads_import_test/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/dv_leads_import_test/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.DV_leads_import_test(String crmAPIRequest)\n{\nrequestData = crmAPIRequest.get(\"body\");\nleadsData = requestData.toJSONList();\nresult = zoho.crm.bulkCreate(\"Leads\",leadsData,{\"trigger\":{\"workflow\"}});\ninfo result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkCreate",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-08-26 04:35:28.0",
        "workflow": "requestData = crmAPIRequest.get(\"body\");\nleadsData = requestData.toJSONList();\nresult = zoho.crm.bulkCreate(\"Leads\",leadsData,{\"trigger\":{\"workflow\"}});\ninfo result;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "AI_Test",
        "id": "512029000001620001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1666823600000,
        "name": "AI_Test",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.AI_Test()\n{\nimage = invokeurl\n[\n\turl :\"https://ardmor.crmoz.com/1.pdf\"\n\ttype :GET\n];\n// To extract the text from the image file\nresponse = zoho.ai.recognizeText(image);\ninfo response;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho ML",
                    "function": "zoho.ai.recognizeText",
                    "service": "ZohoMl"
                }
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "https://ardmor.crmoz.com/1.pdf"
                }
            ]
        },
        "updatedTime": "2022-10-26 15:33:20.0",
        "workflow": "image = invokeurl\n[\n\turl :\"https://ardmor.crmoz.com/1.pdf\"\n\ttype :GET\n];\n// To extract the text from the image file\nresponse = zoho.ai.recognizeText(image);\ninfo response;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function145",
        "id": "512029000001574003",
        "modified_by": null,
        "modified_on": 1664885541000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Variable_Function4",
        "id": "512029000001299001",
        "modified_by": null,
        "modified_on": 1657280611000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function141",
        "id": "512029000001557001",
        "modified_by": null,
        "modified_on": 1663836654000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Untitled_Function131",
        "id": "512029000001291001",
        "modified_by": null,
        "modified_on": 1657189669000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "button",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000036766021",
                "connectionLinkName": "dmcliqcoonectoin",
                "connectionName": "DM-cliq-coonectoin",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCliq.Webhooks.CREATE"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "DM test",
        "id": "512029000001406003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1660236175000,
        "name": "DM_test",
        "nameSpace": "button",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string button.DM_test()\n{\nt = zoho.crm.getRecordById(\"Leads\",\"4444945000018972007\");\nmm = \"### Lead info<br>\";\nmm = mm + t.toString();\ny = {\"text\":mm};\nreq = zoho.cliq.postToChannel(\"dmtest\",\"!gggg</p>ggg\",\"dmcliqcoonectoin\");\nreturn req;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                },
                {
                    "connection": "dmcliqcoonectoin",
                    "display_name": "Zoho Cliq",
                    "function": "zoho.cliq.postToChannel",
                    "service": "ZohoChat"
                }
            ]
        },
        "updatedTime": "2022-08-11 09:42:55.0",
        "workflow": "t = zoho.crm.getRecordById(\"Leads\",\"4444945000018972007\");\nmm = \"### Lead info<br>\";\nmm = mm + t.toString();\ny = {\"text\":mm};\nreq = zoho.cliq.postToChannel(\"dmtest\",\"!gggg</p>ggg\",\"dmcliqcoonectoin\");\nreturn req;"
    },
    {
        "api_name": "acrphonecrm__setattachment",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "setAttachment",
        "id": "512029000001834008",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-03-23T16:39:25+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/acrphonecrm__setattachment/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/acrphonecrm__setattachment/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "part6_update_creators",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part6_update_creators",
        "id": "512029000001915017",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T01:57:54+02:00",
        "name": "part6_update_creators",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part6_update_creators/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part6_update_creators/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.part6_update_creators()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart6);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart5 + \":AJ\" + countPart5;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email == 'test@gmail.com')\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 16:57:55.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart6);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart5 + \":AJ\" + countPart5;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email == 'test@gmail.com')\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tprev = part;\n}"
    },
    {
        "api_name": "part2_update_creators",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part2_update_creators",
        "id": "512029000001905050",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T00:46:05+02:00",
        "name": "part2_update_creators",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part2_update_creators/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part2_update_creators/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.part2_update_creators()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart1 + \":AJ\" + countPart2;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:46:05.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart1 + \":AJ\" + countPart2;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": "part2_update",
        "associated_place": [
            {
                "_type": "schedules",
                "arguments": [],
                "id": "4444945000026528514",
                "name": "part_update2"
            }
        ],
        "category": "scheduler",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part2_update",
        "id": "512029000001909050",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T01:06:02+02:00",
        "name": "part2_update",
        "nameSpace": "schedule",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part2_update/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part2_update/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void schedule.part2_update()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart1 + \":AJ\" + countPart2;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:52:18.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart1 + \":AJ\" + countPart2;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": "deletelinkingrecord",
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "deleteLinkingRecord",
        "id": "512029000001882001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-05-22T13:21:54+02:00",
        "name": "deleteLinkingRecord",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/deletelinkingrecord/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/deletelinkingrecord/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.deleteLinkingRecord()\n{\ndeleteRecordMap = Map();\ndeleteRecordMap = {\"module\":\"Linkings\",\"id\":4444945000025851006};\ndeleteResp = zoho.crm.invokeConnector(\"crm.delete\",deleteRecordMap);\ninfo deleteResp;\nreturn deleteResp;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-05-22 04:21:55.0",
        "workflow": "deleteRecordMap = Map();\ndeleteRecordMap = {\"module\":\"Linkings\",\"id\":4444945000025851006};\ndeleteResp = zoho.crm.invokeConnector(\"crm.delete\",deleteRecordMap);\ninfo deleteResp;\nreturn deleteResp;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function5",
        "id": "512029000002011008",
        "modified_by": null,
        "modified_on": 1689774883000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "ctostr",
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": [
                    {
                        "name": "id",
                        "value": "Contacts.id"
                    }
                ],
                "id": "4444945000027164005",
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "ctostr"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "ctostr",
        "id": "512029000001995003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-07-13T16:42:25+02:00",
        "name": "ctostr",
        "nameSpace": "automation",
        "params": [
            {
                "name": "id",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/ctostr/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/ctostr/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.ctostr(String id)\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-07-13 07:42:25.0",
        "workflow": null
    },
    {
        "api_name": "dsds",
        "associated_place": null,
        "category": "button",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "ппп",
        "id": "512029000001919017",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-20T23:59:13+02:00",
        "name": "dsds",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/dsds/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/dsds/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.dsds()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + prev + \":AJ\" + part;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\tupdateItem = {\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\tzoho.crm.createRecord(\"Creators\",updateItem);\n\t\t\t}\n\t\t}\n\t}\n}\nprev = part;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 14:59:15.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + prev + \":AJ\" + part;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\tupdateItem = {\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\tzoho.crm.createRecord(\"Creators\",updateItem);\n\t\t\t}\n\t\t}\n\t}\n}\nprev = part;\nreturn \"\";"
    },
    {
        "api_name": "activate_code",
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "activate_code",
        "id": "512029000001991001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-07-12T10:30:58+02:00",
        "name": "activate_code",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/activate_code/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/activate_code/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.activate_code()\n{\ncode = \"\";\nsearchData = zoho.crm.searchRecords(\"Codes\",\"(Code_Number:equals:520638960565)\");\nif(isBlank(searchData))\n{\n\tinfo \"not found\";\n}\nelse\n{\n\tdata = searchData.toJsonList();\n\tid = data.getJson(\"id\");\n\tcode_status = \"Activated\";\n\tcontact = \"4444945000025884118\";\n\tproduct = \"4444945000024892022\";\n\tresponse = zoho.crm.updateRecord(\"Codes\",id,{\"Code_Status\":code_status,\"Contacts\":contact,\"Product_relation\":product});\n\tinfo response;\n}\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-07-12 01:30:59.0",
        "workflow": "code = \"\";\nsearchData = zoho.crm.searchRecords(\"Codes\",\"(Code_Number:equals:520638960565)\");\nif(isBlank(searchData))\n{\n\tinfo \"not found\";\n}\nelse\n{\n\tdata = searchData.toJsonList();\n\tid = data.getJson(\"id\");\n\tcode_status = \"Activated\";\n\tcontact = \"4444945000025884118\";\n\tproduct = \"4444945000024892022\";\n\tresponse = zoho.crm.updateRecord(\"Codes\",id,{\"Code_Status\":code_status,\"Contacts\":contact,\"Product_relation\":product});\n\tinfo response;\n}\nreturn \"\";"
    },
    {
        "api_name": "rollupandpopulate0__rollup",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "rollup",
        "id": "512029000001767001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-01-26T11:44:59+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/rollupandpopulate0__rollup/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/rollupandpopulate0__rollup/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "Test_function",
        "id": "512029000001820001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1677587285000,
        "name": "Testfunction",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.Testfunction()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-02-28 04:28:05.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function7",
        "id": "512029000001654001",
        "modified_by": null,
        "modified_on": 1667570488000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function21",
        "id": "512029000001844008",
        "modified_by": null,
        "modified_on": 1679585967000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function38",
        "id": "512029000001757001",
        "modified_by": null,
        "modified_on": 1674655161000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "testf",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testf",
        "id": "512029000001994001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-07-13T14:57:24+02:00",
        "name": "testf",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testf/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testf/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testf()\n{\nemail = \"zigarsasah@gmail.com\";\ncode = \"240073577394\";\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2/functions/ttesst/actions/execute?auth_type=apikey&zapikey=1003.4a2cbadc8bc1234c17e2053a52423e8e.cd9cd91aeb0ef372b5818e4d51f2ebbf\"\n\ttype :GET\n\tparameters:{\"email\":email,\"code\":code}\n];\ninfo resp.get(\"details\").get(\"output\");\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v2/functions/ttesst/actions/execute?auth_type=apikey&zapikey=1003.4a2cbadc8bc1234c17e2053a52423e8e.cd9cd91aeb0ef372b5818e4d51f2ebbf"
                }
            ]
        },
        "updatedTime": "2023-07-13 05:57:25.0",
        "workflow": "email = \"zigarsasah@gmail.com\";\ncode = \"240073577394\";\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2/functions/ttesst/actions/execute?auth_type=apikey&zapikey=1003.4a2cbadc8bc1234c17e2053a52423e8e.cd9cd91aeb0ef372b5818e4d51f2ebbf\"\n\ttype :GET\n\tparameters:{\"email\":email,\"code\":code}\n];\ninfo resp.get(\"details\").get(\"output\");"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function26",
        "id": "512029000001835022",
        "modified_by": null,
        "modified_on": 1679585967000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "part4_update_creators",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part4_update_creators",
        "id": "512029000001923005",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T00:47:31+02:00",
        "name": "part4_update_creators",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part4_update_creators/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part4_update_creators/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.part4_update_creators()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart3 + \":AJ\" + countPart4;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:47:31.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart3 + \":AJ\" + countPart4;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": "test1",
        "associated_place": null,
        "category": "button",
        "config": false,
        "display_name": "ttteesttt",
        "id": "512029000001904001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-07T11:44:34+02:00",
        "name": "test1",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.test1()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-06-07 02:44:35.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": "testbtn",
        "associated_place": null,
        "category": "button",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000036232048",
                "connectionLinkName": "zoho_crm",
                "connectionName": "zoho_crm",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.org.READ",
                    "ZohoCRM.coql.READ",
                    "ZohoCRM.signals.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testbtn",
        "id": "512029000001883001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-05-23T11:02:49+02:00",
        "name": "testbtn",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testbtn/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testbtn/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.testbtn()\n{\np = Map();\np.put(\"action\",\"openComposeWindow\");\np.put(\"entType\",\"Contacts\");\np.put(\"entityId\",\"4444945000025793034\");\nresp = invokeurl\n[\n\turl :\"https://crm.zoho.com/crm/org711301747/mailer/EntReply.do\"\n\ttype :POST\n\tparameters:p.toString()\n\tconnection:\"zoho_crm\"\n];\ninfo resp;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_crm",
                    "method": "post",
                    "url": "https://crm.zoho.com/crm/org711301747/mailer/EntReply.do"
                }
            ]
        },
        "updatedTime": "2023-05-23 02:02:51.0",
        "workflow": "p = Map();\np.put(\"action\",\"openComposeWindow\");\np.put(\"entType\",\"Contacts\");\np.put(\"entityId\",\"4444945000025793034\");\nresp = invokeurl\n[\n\turl :\"https://crm.zoho.com/crm/org711301747/mailer/EntReply.do\"\n\ttype :POST\n\tparameters:p.toString()\n\tconnection:\"zoho_crm\"\n];\ninfo resp;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function40",
        "id": "512029000001757008",
        "modified_by": null,
        "modified_on": 1674729900000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function39",
        "id": "512029000001766001",
        "modified_by": null,
        "modified_on": 1674729900000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000029636719",
                "connectionLinkName": "test_connect",
                "connectionName": "test connection",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.users.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.bulk.ALL",
                    "ZohoCRM.coql.READ"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "aaa_test_blueprint",
        "id": "512029000001696001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1669800467000,
        "name": "aaa_test_blueprint",
        "nameSpace": "automation",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.aaa_test_blueprint()\n{\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v3/TestModule1/4444945000022559207/actions/blueprint\"\n\ttype :GET\n\tconnection:\"test_connect\"\n];\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "test_connect",
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v3/TestModule1/4444945000022559207/actions/blueprint"
                }
            ]
        },
        "updatedTime": "2022-11-30 01:27:47.0",
        "workflow": "response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v3/TestModule1/4444945000022559207/actions/blueprint\"\n\ttype :GET\n\tconnection:\"test_connect\"\n];\ninfo response;"
    },
    {
        "api_name": "part1_update_creators_1",
        "associated_place": [
            {
                "_type": "schedules",
                "arguments": [],
                "id": "4444945000026528504",
                "name": "part_update"
            }
        ],
        "category": "scheduler",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part1_update_creators",
        "id": "512029000001923010",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-26T09:08:54+02:00",
        "name": "part1_update_creators",
        "nameSpace": "schedule",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part1_update_creators_1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part1_update_creators_1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void schedule.part1_update_creators()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + 554 + \":AJ\" + 554;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tif(vetted != null)\n\t\t\t{\n\t\t\t\tif(vetted.indexOf('Good') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Good');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('Average') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Average');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('Bad') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Bad');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('Exceptional') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Exceptional');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('Profile Unavailable') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Profile Unavailable');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('One of Us') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('One of Us');\n\t\t\t\t\tvetted = 'ONE OF US <3';\n\t\t\t\t}\n\t\t\t\tinfo vetted;\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-26 00:08:56.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + 554 + \":AJ\" + 554;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tif(vetted != null)\n\t\t\t{\n\t\t\t\tif(vetted.indexOf('Good') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Good');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('Average') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Average');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('Bad') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Bad');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('Exceptional') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Exceptional');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('Profile Unavailable') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('Profile Unavailable');\n\t\t\t\t\tvetted = vetted.subString(indexSub);\n\t\t\t\t}\n\t\t\t\tif(vetted.indexOf('One of Us') != -1)\n\t\t\t\t{\n\t\t\t\t\tindexSub = vetted.indexOf('One of Us');\n\t\t\t\t\tvetted = 'ONE OF US <3';\n\t\t\t\t}\n\t\t\t\tinfo vetted;\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function20",
        "id": "512029000001844001",
        "modified_by": null,
        "modified_on": 1679585967000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "createlinkingaccountscontacts",
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "createLinkingAccountsContacts",
        "id": "512029000001867022",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-05-22T13:25:54+02:00",
        "name": "createLinkingAccountsContacts",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/createlinkingaccountscontacts/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/createlinkingaccountscontacts/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.createLinkingAccountsContacts()\n{\nlinkingData = Map();\nlinkingData.put(\"Account_Name1\",4444945000025884333);\nlinkingData.put(\"Contact_Name\",4444945000025884118);\nlinkingData.put(\"Name\",\"ssass\");\nresponse = zoho.crm.createRecord(\"Linkings\",linkingData);\ninfo response;\nreturn response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-05-22 04:25:55.0",
        "workflow": "linkingData = Map();\nlinkingData.put(\"Account_Name1\",4444945000025884333);\nlinkingData.put(\"Contact_Name\",4444945000025884118);\nlinkingData.put(\"Name\",\"ssass\");\nresponse = zoho.crm.createRecord(\"Linkings\",linkingData);\ninfo response;\nreturn response;"
    },
    {
        "api_name": "creatortestss",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "s",
        "id": "512029000001905001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-20T22:35:37+02:00",
        "name": "creatortestss",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/creatortestss/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/creatortestss/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.creatortestss()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-06-20 13:35:38.0",
        "workflow": null
    },
    {
        "api_name": "part6_update",
        "associated_place": [
            {
                "_type": "schedules",
                "arguments": [],
                "id": "4444945000026528554",
                "name": "part6_update"
            }
        ],
        "category": "scheduler",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part6_update",
        "id": "512029000001907026",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T01:06:39+02:00",
        "name": "part6_update",
        "nameSpace": "schedule",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part6_update/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part6_update/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void schedule.part6_update()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart5 + \":AJ\" + countPart6;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:55:23.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart5 + \":AJ\" + countPart6;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": "part5_update_creators",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part5_update_creators",
        "id": "512029000001909045",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T00:48:32+02:00",
        "name": "part5_update_creators",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part5_update_creators/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part5_update_creators/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.part5_update_creators()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart4 + \":AJ\" + countPart5;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:48:33.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart4 + \":AJ\" + countPart5;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": "workdrivezip",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000042187201",
                "connectionLinkName": "wd2",
                "connectionName": "wd",
                "isUserDefinedService": "false",
                "scopes": [
                    "WorkDrive.team.ALL",
                    "WorkDrive.workspace.ALL",
                    "WorkDrive.files.ALL",
                    "ZohoFiles.files.ALL",
                    "WorkDrive.links.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "workdriveZip",
        "id": "512029000001964001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-30T16:38:45+02:00",
        "name": "workdriveZip",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/workdrivezip/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/workdrivezip/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.workdriveZip()\n{\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\n/*parameters = Map();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"resource_id\",\"ef0vz1e2e291a06a246c8af572dbf41be643e\");\natt_param1.put(\"selected_file_extraction\",\"false\");\natt_param1.put(\"merge\",\"no\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"unzip\");\nparameters.put(\"data\",data_param1);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/files/ef0vzc6d338085b90444e9f42457a0ee878d0/unzip\"\n\ttype :POST\n\tparameters:parameters.toString()\n\theaders:header\n\tconnection:\"wd2\"\n];\n//info response;\nfolderId = response.getJSON(\"data\").getJSON(\"attributes\").get(\"unzip_info\").get(\"id\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/files/\" + folderId + \"/files\"\n\ttype :GET\n\tparameters:parameters.toString()\n\theaders:header\n\tconnection:\"wd2\"\n];\n//info response;\nif(response.getJSON(\"data\").size() > 0)\n{\n\tfor each  file in response.getJSON(\"data\")\n\t{\n\t\tid = file.get(\"id\");\n\t\tfileName = file.get(\"attributes\").get(\"display_attr_name\");\n\t\tinfo id;\n\t\tdFile = invokeurl\n\t\t[\n\t\t\turl :\"https://download.zoho.com/v1/workdrive/download/\" + id\n\t\t\ttype :GET\n\t\t\theaders:header\n\t\t\tconnection:\"wd2\"\n\t\t];\n\t\t//info dFile;\n\t\tinfo zoho.crm.attachFile(\"Contacts\",\"4444945000025884118\",dFile.toFile(fileName));\n\t}\n}\ndata = Map();\nparams = List();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"status\",\"51\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"files\");\ndata_param1.put(\"id\",folderId);\nparams.add(data_param1);\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"status\",\"51\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"files\");\ndata_param1.put(\"id\",\"ef0vz1e2e291a06a246c8af572dbf41be643e\");\nparams.add(data_param1);\ndata.put(\"data\",params);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/files\"\n\ttype :PATCH\n\tparameters:data.toString()\n\theaders:header\n\tconnection:\"wd2\"\n];*/\ndFile = invokeurl\n[\n\turl :\"https://download.zoho.com/v1/workdrive/download/sqxsjc86bc783663c4e3c9f599dec1011b1b6\"\n\ttype :GET\n\theaders:header\n\tconnection:\"wd2\"\n];\nresponse = zoho.workdrive.uploadFile(dFile,\"ef0vzc6d338085b90444e9f42457a0ee878d0\",dFile.getFileName(),false,\"wd2\");\ninfo response;\n/*\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/users/\" + zuid + \"/teams\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\ninfo response;\nteamId = response.get(\"data\").get(0).get(\"id\");\nparameters = Map();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"name\",\"CallsApp Records\");\natt_param1.put(\"parent_id\",teamId);\natt_param1.put(\"is_public_within_team\",\"true\");\natt_param1.put(\"description\",\"Contains call record files\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"teamfolders\");\nparameters.put(\"data\",data_param1);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teamfolders\"\n\ttype :POST\n\tparameters:parameters.toString()\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\ninfo response;*/\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "wd2",
                    "display_name": "Zoho WorkDrive",
                    "function": "zoho.workdrive.uploadFile",
                    "service": "WorkDrive"
                }
            ],
            "webhooks": [
                {
                    "connection": "wd2",
                    "method": "get",
                    "url": "https://download.zoho.com/v1/workdrive/download/sqxsjc86bc783663c4e3c9f599dec1011b1b6"
                }
            ]
        },
        "updatedTime": "2023-06-30 07:38:45.0",
        "workflow": "header = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\n/*parameters = Map();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"resource_id\",\"ef0vz1e2e291a06a246c8af572dbf41be643e\");\natt_param1.put(\"selected_file_extraction\",\"false\");\natt_param1.put(\"merge\",\"no\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"unzip\");\nparameters.put(\"data\",data_param1);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/files/ef0vzc6d338085b90444e9f42457a0ee878d0/unzip\"\n\ttype :POST\n\tparameters:parameters.toString()\n\theaders:header\n\tconnection:\"wd2\"\n];\n//info response;\nfolderId = response.getJSON(\"data\").getJSON(\"attributes\").get(\"unzip_info\").get(\"id\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/files/\" + folderId + \"/files\"\n\ttype :GET\n\tparameters:parameters.toString()\n\theaders:header\n\tconnection:\"wd2\"\n];\n//info response;\nif(response.getJSON(\"data\").size() > 0)\n{\n\tfor each  file in response.getJSON(\"data\")\n\t{\n\t\tid = file.get(\"id\");\n\t\tfileName = file.get(\"attributes\").get(\"display_attr_name\");\n\t\tinfo id;\n\t\tdFile = invokeurl\n\t\t[\n\t\t\turl :\"https://download.zoho.com/v1/workdrive/download/\" + id\n\t\t\ttype :GET\n\t\t\theaders:header\n\t\t\tconnection:\"wd2\"\n\t\t];\n\t\t//info dFile;\n\t\tinfo zoho.crm.attachFile(\"Contacts\",\"4444945000025884118\",dFile.toFile(fileName));\n\t}\n}\ndata = Map();\nparams = List();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"status\",\"51\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"files\");\ndata_param1.put(\"id\",folderId);\nparams.add(data_param1);\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"status\",\"51\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"files\");\ndata_param1.put(\"id\",\"ef0vz1e2e291a06a246c8af572dbf41be643e\");\nparams.add(data_param1);\ndata.put(\"data\",params);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/files\"\n\ttype :PATCH\n\tparameters:data.toString()\n\theaders:header\n\tconnection:\"wd2\"\n];*/\ndFile = invokeurl\n[\n\turl :\"https://download.zoho.com/v1/workdrive/download/sqxsjc86bc783663c4e3c9f599dec1011b1b6\"\n\ttype :GET\n\theaders:header\n\tconnection:\"wd2\"\n];\nresponse = zoho.workdrive.uploadFile(dFile,\"ef0vzc6d338085b90444e9f42457a0ee878d0\",dFile.getFileName(),false,\"wd2\");\ninfo response;\n/*\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/users/\" + zuid + \"/teams\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\ninfo response;\nteamId = response.get(\"data\").get(0).get(\"id\");\nparameters = Map();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"name\",\"CallsApp Records\");\natt_param1.put(\"parent_id\",teamId);\natt_param1.put(\"is_public_within_team\",\"true\");\natt_param1.put(\"description\",\"Contains call record files\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"teamfolders\");\nparameters.put(\"data\",data_param1);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teamfolders\"\n\ttype :POST\n\tparameters:parameters.toString()\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\ninfo response;*/\nreturn \"\";"
    },
    {
        "api_name": "dedinside",
        "associated_place": null,
        "category": "button",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "d",
        "id": "512029000001926001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T00:43:39+02:00",
        "name": "dedinside",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/dedinside/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/dedinside/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.dedinside()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart6);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\ninfo countPart1;\ninfo countPart2;\ninfo countPart3;\ninfo countPart4;\ninfo countPart5;\ninfo countPart6;\ninfo count;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:43:41.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart6);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\ninfo countPart1;\ninfo countPart2;\ninfo countPart3;\ninfo countPart4;\ninfo countPart5;\ninfo countPart6;\ninfo count;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function11",
        "id": "512029000002013001",
        "modified_by": null,
        "modified_on": 1689774883000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "searchlinkingaccountcontacts",
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "editlinkingAccountContacts",
        "id": "512029000001880005",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-05-22T15:45:11+02:00",
        "name": "searchlinkingAccountContacts",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/searchlinkingaccountcontacts/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/searchlinkingaccountcontacts/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.searchlinkingAccountContacts()\n{\nlinkingInfo = zoho.crm.getRecordById(\"Linking\",4444945000025914309);\ninfo linkingInfo;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-05-22 06:45:12.0",
        "workflow": "linkingInfo = zoho.crm.getRecordById(\"Linking\",4444945000025914309);\ninfo linkingInfo;\nreturn \"\";"
    },
    {
        "api_name": "part4_update",
        "associated_place": [
            {
                "_type": "schedules",
                "arguments": [],
                "id": "4444945000026528534",
                "name": "part4_update"
            }
        ],
        "category": "scheduler",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part4_update",
        "id": "512029000001911035",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T01:06:19+02:00",
        "name": "part4_update",
        "nameSpace": "schedule",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part4_update/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part4_update/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void schedule.part4_update()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart3 + \":AJ\" + countPart4;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:54:09.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart3 + \":AJ\" + countPart4;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test_sb",
        "id": "512029000001851001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1681224141000,
        "name": "test_sb",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test_sb()\n{\ndetails = zoho.crm.getRecordById(\"Scholarships\",4444945000025113790);\nsb = details.get(\"Subform\");\nsub_forms = List();\nfor each  s in sb\n{\n\tsMap = Map();\n\tsMap.put(\"id\",s.get(\"id\"));\n\tsub_forms.add(sMap);\n\tif(s.get(\"number\") == \"1\")\n\t{\n\t\tsMap = Map();\n\t\tsMap.put(\"id\",s.get(\"id\"));\n\t\tsMap.put(\"Amount\",20);\n\t\tsub_forms.add(sMap);\n\t}\n}\ninfo zoho.crm.updateRecord(\"Scholarships\",4444945000025113790,{\"Subform\":sub_forms});\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-04-11 07:42:21.0",
        "workflow": "details = zoho.crm.getRecordById(\"Scholarships\",4444945000025113790);\nsb = details.get(\"Subform\");\nsub_forms = List();\nfor each  s in sb\n{\n\tsMap = Map();\n\tsMap.put(\"id\",s.get(\"id\"));\n\tsub_forms.add(sMap);\n\tif(s.get(\"number\") == \"1\")\n\t{\n\t\tsMap = Map();\n\t\tsMap.put(\"id\",s.get(\"id\"));\n\t\tsMap.put(\"Amount\",20);\n\t\tsub_forms.add(sMap);\n\t}\n}\ninfo zoho.crm.updateRecord(\"Scholarships\",4444945000025113790,{\"Subform\":sub_forms});\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": [
            {
                "_type": "related_list",
                "arguments": [
                    {
                        "name": "arg-ID",
                        "value": "id"
                    }
                ],
                "id": "4444945000022603057",
                "layoutId": "4444945000000091055",
                "listRelationId": "4444945000022603057",
                "module": "Leads",
                "name": "test project"
            }
        ],
        "category": "relatedlist",
        "config": true,
        "description": null,
        "display_name": "test projects",
        "id": "512029000001717003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-12-01T15:49:48+01:00",
        "name": "test_projects",
        "nameSpace": "related_list",
        "params": [
            {
                "name": "ID",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "STRING",
        "script": "string related_list.test_projects(Int ID)\n{\nlead = zoho.crm.getRecordById(\"Leads\",ID);\nurl = \"https://projects.zoho.com/portal/crmoztest#dashboard/\" + lead.get(\"Project_ID\");\nresponseXML = \"\";\nresponseXML = responseXML + \"<record>\";\nresponseXML = responseXML + \"<row no=\\\"0\\\">\";\nresponseXML = responseXML + \"<FL val=\\\"ZOHO Project\\\" link=\\\"true\\\" url=\\\"\" + url + \"\\\">Project</FL>\";\n//responseXML = responseXML + \"<FL val=\\\"Project\\\">test</FL>\";\nresponseXML = responseXML + \"</row>\";\nresponseXML = responseXML + \"</record>\";\nreturn responseXML;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "ID"
            ]
        },
        "updatedTime": "2022-12-01 06:49:48.0",
        "workflow": "lead = zoho.crm.getRecordById(\"Leads\",ID);\nurl = \"https://projects.zoho.com/portal/crmoztest#dashboard/\" + lead.get(\"Project_ID\");\nresponseXML = \"\";\nresponseXML = responseXML + \"<record>\";\nresponseXML = responseXML + \"<row no=\\\"0\\\">\";\nresponseXML = responseXML + \"<FL val=\\\"ZOHO Project\\\" link=\\\"true\\\" url=\\\"\" + url + \"\\\">Project</FL>\";\n//responseXML = responseXML + \"<FL val=\\\"Project\\\">test</FL>\";\nresponseXML = responseXML + \"</row>\";\nresponseXML = responseXML + \"</record>\";\nreturn responseXML;"
    },
    {
        "api_name": "rollupandpopulate0__populate",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "populate",
        "id": "512029000001766010",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-01-26T11:44:59+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/rollupandpopulate0__populate/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/rollupandpopulate0__populate/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "part5_update",
        "associated_place": [
            {
                "_type": "schedules",
                "arguments": [],
                "id": "4444945000026528544",
                "name": "part5_update"
            }
        ],
        "category": "scheduler",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part5_update",
        "id": "512029000001910021",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T02:05:22+02:00",
        "name": "part5_update",
        "nameSpace": "schedule",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part5_update/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part5_update/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void schedule.part5_update()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart6);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart5 + \":AJ\" + countPart5;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email == 'test@gmail.com')\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 17:05:22.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart6);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart5 + \":AJ\" + countPart5;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email == 'test@gmail.com')\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tprev = part;\n}"
    },
    {
        "api_name": "part3_update",
        "associated_place": [
            {
                "_type": "schedules",
                "arguments": [],
                "id": "4444945000026528524",
                "name": "part3_update"
            }
        ],
        "category": "scheduler",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part3_update",
        "id": "512029000001919030",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T01:06:12+02:00",
        "name": "part3_update",
        "nameSpace": "schedule",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part3_update/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part3_update/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void schedule.part3_update()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart2 + \":AJ\" + countPart3;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:53:09.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart2 + \":AJ\" + countPart3;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000000837001",
                "connectionLinkName": "zoho_projects",
                "connectionName": "Zoho Projects",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoPC.files.ALL",
                    "ZohoProjects.activities.ALL",
                    "ZohoProjects.bugs.UPDATE",
                    "ZohoProjects.chats.ALL",
                    "ZohoProjects.clients.CREATE",
                    "ZohoProjects.clients.READ",
                    "ZohoProjects.documents.ALL",
                    "ZohoProjects.events.ALL",
                    "ZohoProjects.forums.ALL",
                    "ZohoProjects.milestones.ALL",
                    "ZohoProjects.milestones.CREATE",
                    "ZohoProjects.milestones.READ",
                    "ZohoProjects.milestones.UPDATE",
                    "ZohoProjects.portals.ALL",
                    "ZohoProjects.portals.READ",
                    "ZohoProjects.projects.ALL",
                    "ZohoProjects.projects.CREATE",
                    "ZohoProjects.projects.READ",
                    "ZohoProjects.projects.UPDATE",
                    "ZohoProjects.search.READ",
                    "ZohoProjects.status.ALL",
                    "ZohoProjects.tags.ALL",
                    "ZohoProjects.tags.READ",
                    "ZohoProjects.tasklists.ALL",
                    "ZohoProjects.tasklists.CREATE",
                    "ZohoProjects.tasklists.READ",
                    "ZohoProjects.tasklists.UPDATE",
                    "ZohoProjects.tasks.ALL",
                    "ZohoProjects.tasks.CREATE",
                    "ZohoProjects.tasks.DELETE",
                    "ZohoProjects.tasks.READ",
                    "ZohoProjects.tasks.UPDATE",
                    "ZohoProjects.timesheets.ALL",
                    "ZohoProjects.timesheets.CREATE",
                    "ZohoProjects.timesheets.UPDATE",
                    "ZohoProjects.users.ALL",
                    "ZohoProjects.users.CREATE",
                    "ZohoProjects.users.READ"
                ],
                "serviceName": "zoho_projects",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test create project",
        "id": "512029000001703001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1669906190000,
        "name": "test_create_project",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "ID",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test_create_project(Int ID)\n{\n//4444945000020062010\ncampaign = zoho.crm.getRecordById(\"Leads\",ID);\ndata = Map();\ndata.put(\"name\",campaign.get(\"First_Name\"));\ndata.put(\"UDF_CHAR1\",\"https://crm.zoho.com/crm/org784672517/tab/Campaigns/\" + ID.toString());\nresp = zoho.projects.createProject(\"crmoztest\",data,\"zoho_projects\");\n//info resp;\nupd = Map();\nupd.put(\"Project_ID\",resp.get(\"projects\").get(0).get(\"id\").toString());\nresp2 = zoho.crm.updateRecord(\"Leads\",ID,upd);\ninfo resp2;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                },
                {
                    "connection": "zoho_projects",
                    "display_name": "Zoho Projects",
                    "function": "zoho.projects.createProject",
                    "service": "ZohoProjects"
                }
            ],
            "params": [
                "ID"
            ]
        },
        "updatedTime": "2022-12-01 06:49:50.0",
        "workflow": "//4444945000020062010\ncampaign = zoho.crm.getRecordById(\"Leads\",ID);\ndata = Map();\ndata.put(\"name\",campaign.get(\"First_Name\"));\ndata.put(\"UDF_CHAR1\",\"https://crm.zoho.com/crm/org784672517/tab/Campaigns/\" + ID.toString());\nresp = zoho.projects.createProject(\"crmoztest\",data,\"zoho_projects\");\n//info resp;\nupd = Map();\nupd.put(\"Project_ID\",resp.get(\"projects\").get(0).get(\"id\").toString());\nresp2 = zoho.crm.updateRecord(\"Leads\",ID,upd);\ninfo resp2;\nreturn \"\";"
    },
    {
        "api_name": "part1_update_creators",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part1_update_creators",
        "id": "512029000001920033",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T00:45:00+02:00",
        "name": "part1_update_creators",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part1_update_creators/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part1_update_creators/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.part1_update_creators()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + prev + \":AJ\" + part;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:45:01.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + prev + \":AJ\" + part;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test333",
        "id": "512029000001682001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1669026092000,
        "name": "test3331",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.test3331()\n{\ninfo \"2022-05-04\".toDate().getMonth();\ninfo now.toDate().getMonth();\nendDate = now.eomonth(0);\nstartDate = now.toStartOfMonth();\ninfo endDate;\ninfo startDate;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2022-11-21 02:21:32.0",
        "workflow": "info \"2022-05-04\".toDate().getMonth();\ninfo now.toDate().getMonth();\nendDate = now.eomonth(0);\nstartDate = now.toStartOfMonth();\ninfo endDate;\ninfo startDate;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "description": null,
        "display_name": "Install_Function4",
        "id": "512029000002012001",
        "modified_by": null,
        "modified_on": 1689774882000,
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "serchlinkingaccountcontacts",
        "associated_place": null,
        "category": "button",
        "config": false,
        "description": null,
        "display_name": "serchLinkingAccountContacts",
        "id": "512029000001881001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-05-22T13:28:55+02:00",
        "name": "serchLinkingAccountContacts",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/serchlinkingaccountcontacts/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/serchlinkingaccountcontacts/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.serchLinkingAccountContacts()\n{\nresponse = zoho.crm.searchRecords(\"Linkings\",\"(Name:equals:ssass)\");\nreturn response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-05-22 04:28:56.0",
        "workflow": "response = zoho.crm.searchRecords(\"Linkings\",\"(Name:equals:ssass)\");\nreturn response;"
    },
    {
        "api_name": "aaadvbulksearchupdate",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "aaaDVbulkSearchupdate",
        "id": "512029000001659001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2022-11-11T10:27:33+01:00",
        "name": "aaaDVbulkSearchupdate",
        "nameSpace": "automation",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/aaadvbulksearchupdate/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/aaadvbulksearchupdate/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.aaaDVbulkSearchupdate(String crmAPIRequest)\n{\nrequestData = crmAPIRequest.get(\"body\");\ncreatorsData = requestData.toJSONList();\nbulkUpdateData = List();\ninfo \"Get items: \" + creatorsData.size();\nfor each  creator in creatorsData\n{\n\tif(creator.getJSON(\"Email\") != \"\" && creator.getJSON(\"Email\") != NULL)\n\t{\n\t\trecord = zoho.crm.searchRecords(\"TestModule1\",\"(Email:equals:\" + creator.getJSON(\"Email\") + \")\");\n\t\tif(record.size() == 0)\n\t\t{\n\t\t\tinfo \"Not found records by this Email: \" + creator.getJSON(\"Email\");\n\t\t}\n\t\tif(record.size() == 1)\n\t\t{\n\t\t\tfor each  recordData in record\n\t\t\t{\n\t\t\t\trecordID = recordData.get(\"id\");\n\t\t\t\tupdateRecordData = Map();\n\t\t\t\tupdateRecordData.put(\"id\",recordID);\n\t\t\t\tupdateRecordData.put(\"Vetted\",creator.getJSON(\"Vetted\"));\n\t\t\t\tupdateRecordData.put(\"Vetted_By\",creator.getJSON(\"Vetted By\"));\n\t\t\t\tbulkUpdateData.add(updateRecordData);\n\t\t\t\tinfo \"Record with Email: \" + creator.getJSON(\"Email\") + \" pushing to update. Record ID: \" + recordID;\n\t\t\t}\n\t\t}\n\t\tif(record.size() > 1)\n\t\t{\n\t\t\t// \t\t\tinfo \"Finde \" + record.size() + \" records for this Email: \" + creator.getJSON(\"Email\");\n\t\t\trun = true;\n\t\t\tfor each  recordData in record\n\t\t\t{\n\t\t\t\tif(run)\n\t\t\t\t{\n\t\t\t\t\trecordID = recordData.get(\"id\");\n\t\t\t\t\tupdateRecordData = Map();\n\t\t\t\t\tupdateRecordData.put(\"id\",recordID);\n\t\t\t\t\tupdateRecordData.put(\"Vetted\",creator.getJSON(\"Vetted\"));\n\t\t\t\t\tupdateRecordData.put(\"Vetted_By\",creator.getJSON(\"Vetted By\"));\n\t\t\t\t\tbulkUpdateData.add(updateRecordData);\n\t\t\t\t\tinfo \"Record with Email: \" + creator.getJSON(\"Email\") + \" pushing to update. Record ID: \" + recordID;\n\t\t\t\t\trun = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\ninfo \"Items pushing to update: \" + bulkUpdateData.size();\nresult = zoho.crm.bulkUpdate(\"TestModule1\",bulkUpdateData);\ninfo \"Update result: \" + result;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2022-11-11 01:27:33.0",
        "workflow": "requestData = crmAPIRequest.get(\"body\");\ncreatorsData = requestData.toJSONList();\nbulkUpdateData = List();\ninfo \"Get items: \" + creatorsData.size();\nfor each  creator in creatorsData\n{\n\tif(creator.getJSON(\"Email\") != \"\" && creator.getJSON(\"Email\") != NULL)\n\t{\n\t\trecord = zoho.crm.searchRecords(\"TestModule1\",\"(Email:equals:\" + creator.getJSON(\"Email\") + \")\");\n\t\tif(record.size() == 0)\n\t\t{\n\t\t\tinfo \"Not found records by this Email: \" + creator.getJSON(\"Email\");\n\t\t}\n\t\tif(record.size() == 1)\n\t\t{\n\t\t\tfor each  recordData in record\n\t\t\t{\n\t\t\t\trecordID = recordData.get(\"id\");\n\t\t\t\tupdateRecordData = Map();\n\t\t\t\tupdateRecordData.put(\"id\",recordID);\n\t\t\t\tupdateRecordData.put(\"Vetted\",creator.getJSON(\"Vetted\"));\n\t\t\t\tupdateRecordData.put(\"Vetted_By\",creator.getJSON(\"Vetted By\"));\n\t\t\t\tbulkUpdateData.add(updateRecordData);\n\t\t\t\tinfo \"Record with Email: \" + creator.getJSON(\"Email\") + \" pushing to update. Record ID: \" + recordID;\n\t\t\t}\n\t\t}\n\t\tif(record.size() > 1)\n\t\t{\n\t\t\t// \t\t\tinfo \"Finde \" + record.size() + \" records for this Email: \" + creator.getJSON(\"Email\");\n\t\t\trun = true;\n\t\t\tfor each  recordData in record\n\t\t\t{\n\t\t\t\tif(run)\n\t\t\t\t{\n\t\t\t\t\trecordID = recordData.get(\"id\");\n\t\t\t\t\tupdateRecordData = Map();\n\t\t\t\t\tupdateRecordData.put(\"id\",recordID);\n\t\t\t\t\tupdateRecordData.put(\"Vetted\",creator.getJSON(\"Vetted\"));\n\t\t\t\t\tupdateRecordData.put(\"Vetted_By\",creator.getJSON(\"Vetted By\"));\n\t\t\t\t\tbulkUpdateData.add(updateRecordData);\n\t\t\t\t\tinfo \"Record with Email: \" + creator.getJSON(\"Email\") + \" pushing to update. Record ID: \" + recordID;\n\t\t\t\t\trun = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\ninfo \"Items pushing to update: \" + bulkUpdateData.size();\nresult = zoho.crm.bulkUpdate(\"TestModule1\",bulkUpdateData);\ninfo \"Update result: \" + result;"
    },
    {
        "api_name": "part3_update_creators",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part3_update_creators",
        "id": "512029000001925013",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-21T00:46:42+02:00",
        "name": "part3_update_creators",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part3_update_creators/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part3_update_creators/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.part3_update_creators()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart2 + \":AJ\" + countPart3;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 15:46:43.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart2 + \":AJ\" + countPart3;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "getMessage",
        "id": "512029000001758003",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-01-25T14:59:20+01:00",
        "rest_api": null,
        "source": "extension"
    },
    {
        "api_name": "edit_subforms",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "Edit subform",
        "id": "512029000001870005",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-05-22T10:27:55+02:00",
        "name": "edit_subforms",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/edit_subforms/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/edit_subforms/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.edit_subforms()\n{\nparent_record_id = 4444945000022579103;\nparent = zoho.crm.getRecordById(\"Contacts\",parent_record_id);\nsubform = parent.get(\"stest\");\nif(subform != null && subform.size() > 0)\n{\n\tfor each  row in subform\n\t{\n\t\tinfo row;\n\t}\n}\nresponse = zoho.crm.updateRecord(\"Contacts\",parent_record_id,parent);\nreturn '';\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-05-22 01:27:55.0",
        "workflow": "parent_record_id = 4444945000022579103;\nparent = zoho.crm.getRecordById(\"Contacts\",parent_record_id);\nsubform = parent.get(\"stest\");\nif(subform != null && subform.size() > 0)\n{\n\tfor each  row in subform\n\t{\n\t\tinfo row;\n\t}\n}\nresponse = zoho.crm.updateRecord(\"Contacts\",parent_record_id,parent);\nreturn '';"
    },
    {
        "api_name": "testupdatecode",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "id",
                        "value": "Codes.Codes Id"
                    }
                ],
                "id": 4444945000027164000,
                "isOldDataNeeded": false,
                "module": "Codes",
                "name": "test code update from",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "testupdatecode",
        "id": "512029000001997001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-07-13T18:08:42+02:00",
        "name": "testupdatecode",
        "nameSpace": "automation",
        "params": [
            {
                "name": "id",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testupdatecode/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testupdatecode/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testupdatecode(String id)\n{\nids = id;\nresp = zoho.crm.updateRecord(\"Codes\",id,{\"Code_Status\":\"Activated\"});\ninfo resp;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "id"
            ]
        },
        "updatedTime": "2023-07-13 09:08:42.0",
        "workflow": "ids = id;\nresp = zoho.crm.updateRecord(\"Codes\",id,{\"Code_Status\":\"Activated\"});\ninfo resp;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000036232048",
                "connectionLinkName": "zoho_crm",
                "connectionName": "zoho_crm",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.org.READ",
                    "ZohoCRM.coql.READ",
                    "ZohoCRM.signals.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testOS",
        "id": "512029000001775001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": 1682433193000,
        "name": "testOS",
        "nameSpace": "standalone",
        "rest_api": null,
        "return_type": "STRING",
        "script": "string standalone.testOS()\n{\n/*\nfullCountryList = {\"Afghanistan\",\"Albania\",\"Algeria\",\"American Samoa\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antarctica\",\"Antigua and Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia\",\"Bosnia and Herzegovina\",\"Botswana\",\"Brazil\",\"British Indian Ocean Territory\",\"British Virgin Islands\",\"Brunei\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Cape Verde\",\"Cayman Islands\",\"Central African Republic\",\"Chad\",\"Chile\",\"China\",\"Christmas Island\",\"Cocos Islands\",\"Colombia\",\"Comoros\",\"Cook Islands\",\"Costa Rica\",\"Croatia\",\"Cuba\",\"Curacao\",\"Cyprus\",\"Czech Republic\",\"Democratic Republic of the Congo\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"East Timor\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Eritrea\",\"Estonia\",\"Ethiopia\",\"Falkland Islands\",\"Faroe Islands\",\"Fiji\",\"Finland\",\"France\",\"French Polynesia\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guam\",\"Guatemala\",\"Guernsey\",\"Guinea\",\"Guinea-Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Ivory Coast\",\"Jamaica\",\"Japan\",\"Jersey\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kiribati\",\"Kosovo\",\"Kuwait\",\"Kyrgyzstan\",\"Laos\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macau\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Marshall Islands\",\"Mauritania\",\"Mauritius\",\"Mayotte\",\"Mexico\",\"Micronesia\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Myanmar\",\"Namibia\",\"Nauru\",\"Nepal\",\"Netherlands\",\"Netherlands Antilles\",\"New Caledonia\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"Niue\",\"North Korea\",\"Northern Mariana Islands\",\"Norway\",\"Oman\",\"Pakistan\",\"Palau\",\"Palestine\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Pitcairn\",\"Poland\",\"Portugal\",\"Puerto Rico\",\"Qatar\",\"Republic of the Congo\",\"Reunion\",\"Romania\",\"Russia\",\"Rwanda\",\"Saint Barthelemy\",\"Saint Helena\",\"Saint Kitts and Nevis\",\"Saint Lucia\",\"Saint Martin\",\"Saint Pierre and Miquelon\",\"Saint Vincent and the Grenadines\",\"Samoa\",\"San Marino\",\"Sao Tome and Principe\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Sint Maarten\",\"Slovakia\",\"Slovenia\",\"Solomon Islands\",\"Somalia\",\"South Africa\",\"South Korea\",\"South Sudan\",\"Spain\",\"Sri Lanka\",\"Sudan\",\"Suriname\",\"Svalbard and Jan Mayen\",\"Swaziland\",\"Sweden\",\"Switzerland\",\"Syria\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Togo\",\"Tokelau\",\"Tonga\",\"Trinidad and Tobago\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Turks and Caicos Islands\",\"Tuvalu\",\"U.S. Virgin Islands\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"U.A.E\",\"United Kingdom\",\"United States\",\"U.S.A\",\"Uruguay\",\"Uzbekistan\",\"Vanuatu\",\"Vatican\",\"Venezuela\",\"Vietnam\",\"Wallis and Futuna\",\"Western Sahara\",\"Yemen\",\"Zambia\",\"Zimbabwe\"};\ncountryCodesList = {\"AF\",\"AL\",\"DZ\",\"AS\",\"AD\",\"AO\",\"AI\",\"AQ\",\"AG\",\"AR\",\"AM\",\"AW\",\"AU\",\"AT\",\"AZ\",\"BS\",\"BH\",\"BD\",\"BB\",\"BY\",\"BE\",\"BZ\",\"BJ\",\"BM\",\"BT\",\"BO\",\"BA\",\"BW\",\"BR\",\"IO\",\"VG\",\"BN\",\"BG\",\"BF\",\"BI\",\"KH\",\"CM\",\"CA\",\"CV\",\"KY\",\"CF\",\"TD\",\"CL\",\"CN\",\"CX\",\"CC\",\"CO\",\"KM\",\"CK\",\"CR\",\"HR\",\"CU\",\"CW\",\"CY\",\"CZ\",\"CD\",\"DK\",\"DJ\",\"DM\",\"DO\",\"TL\",\"EC\",\"EG\",\"SV\",\"GQ\",\"ER\",\"EE\",\"ET\",\"FK\",\"FO\",\"FJ\",\"FI\",\"FR\",\"PF\",\"GA\",\"GM\",\"GE\",\"DE\",\"GH\",\"GI\",\"GR\",\"GL\",\"GD\",\"GU\",\"GT\",\"GG\",\"GN\",\"GW\",\"GY\",\"HT\",\"HN\",\"HK\",\"HU\",\"IS\",\"IN\",\"ID\",\"IR\",\"IQ\",\"IE\",\"IM\",\"IL\",\"IT\",\"CI\",\"JM\",\"JP\",\"JE\",\"JO\",\"KZ\",\"KE\",\"KI\",\"XK\",\"KW\",\"KG\",\"LA\",\"LV\",\"LB\",\"LS\",\"LR\",\"LY\",\"LI\",\"LT\",\"LU\",\"MO\",\"MK\",\"MG\",\"MW\",\"MY\",\"MV\",\"ML\",\"MT\",\"MH\",\"MR\",\"MU\",\"YT\",\"MX\",\"FM\",\"MD\",\"MC\",\"MN\",\"ME\",\"MS\",\"MA\",\"MZ\",\"MM\",\"NA\",\"NR\",\"NP\",\"NL\",\"AN\",\"NC\",\"NZ\",\"NI\",\"NE\",\"NG\",\"NU\",\"KP\",\"MP\",\"NO\",\"OM\",\"PK\",\"PW\",\"PS\",\"PA\",\"PG\",\"PY\",\"PE\",\"PH\",\"PN\",\"PL\",\"PT\",\"PR\",\"QA\",\"CG\",\"RE\",\"RO\",\"RU\",\"RW\",\"BL\",\"SH\",\"KN\",\"LC\",\"MF\",\"PM\",\"VC\",\"WS\",\"SM\",\"ST\",\"SA\",\"SN\",\"RS\",\"SC\",\"SL\",\"SG\",\"SX\",\"SK\",\"SI\",\"SB\",\"SO\",\"ZA\",\"KR\",\"SS\",\"ES\",\"LK\",\"SD\",\"SR\",\"SJ\",\"SZ\",\"SE\",\"CH\",\"SY\",\"TW\",\"TJ\",\"TZ\",\"TH\",\"TG\",\"TK\",\"TO\",\"TT\",\"TN\",\"TR\",\"TM\",\"TC\",\"TV\",\"VI\",\"UG\",\"UA\",\"AE\",\"AE\",\"GB\",\"US\",\"US\",\"UY\",\"UZ\",\"VU\",\"VA\",\"VE\",\"VN\",\"WF\",\"EH\",\"YE\",\"ZM\",\"ZW\"};\nindex = fullCountryList.indexOf(\"Albania\");\ninfo countryCodesList.get(index);*/\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2/Deals/4444945000018179030\"\n\ttype :GET\n\tconnection:\"zoho_crm\"\n];\ninfo resp;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_crm",
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v2/Deals/4444945000018179030"
                }
            ]
        },
        "updatedTime": "2023-04-25 07:33:13.0",
        "workflow": "/*\nfullCountryList = {\"Afghanistan\",\"Albania\",\"Algeria\",\"American Samoa\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antarctica\",\"Antigua and Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia\",\"Bosnia and Herzegovina\",\"Botswana\",\"Brazil\",\"British Indian Ocean Territory\",\"British Virgin Islands\",\"Brunei\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Cape Verde\",\"Cayman Islands\",\"Central African Republic\",\"Chad\",\"Chile\",\"China\",\"Christmas Island\",\"Cocos Islands\",\"Colombia\",\"Comoros\",\"Cook Islands\",\"Costa Rica\",\"Croatia\",\"Cuba\",\"Curacao\",\"Cyprus\",\"Czech Republic\",\"Democratic Republic of the Congo\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"East Timor\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Eritrea\",\"Estonia\",\"Ethiopia\",\"Falkland Islands\",\"Faroe Islands\",\"Fiji\",\"Finland\",\"France\",\"French Polynesia\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guam\",\"Guatemala\",\"Guernsey\",\"Guinea\",\"Guinea-Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Ivory Coast\",\"Jamaica\",\"Japan\",\"Jersey\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kiribati\",\"Kosovo\",\"Kuwait\",\"Kyrgyzstan\",\"Laos\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macau\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Marshall Islands\",\"Mauritania\",\"Mauritius\",\"Mayotte\",\"Mexico\",\"Micronesia\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Myanmar\",\"Namibia\",\"Nauru\",\"Nepal\",\"Netherlands\",\"Netherlands Antilles\",\"New Caledonia\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"Niue\",\"North Korea\",\"Northern Mariana Islands\",\"Norway\",\"Oman\",\"Pakistan\",\"Palau\",\"Palestine\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Pitcairn\",\"Poland\",\"Portugal\",\"Puerto Rico\",\"Qatar\",\"Republic of the Congo\",\"Reunion\",\"Romania\",\"Russia\",\"Rwanda\",\"Saint Barthelemy\",\"Saint Helena\",\"Saint Kitts and Nevis\",\"Saint Lucia\",\"Saint Martin\",\"Saint Pierre and Miquelon\",\"Saint Vincent and the Grenadines\",\"Samoa\",\"San Marino\",\"Sao Tome and Principe\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Sint Maarten\",\"Slovakia\",\"Slovenia\",\"Solomon Islands\",\"Somalia\",\"South Africa\",\"South Korea\",\"South Sudan\",\"Spain\",\"Sri Lanka\",\"Sudan\",\"Suriname\",\"Svalbard and Jan Mayen\",\"Swaziland\",\"Sweden\",\"Switzerland\",\"Syria\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Togo\",\"Tokelau\",\"Tonga\",\"Trinidad and Tobago\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Turks and Caicos Islands\",\"Tuvalu\",\"U.S. Virgin Islands\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"U.A.E\",\"United Kingdom\",\"United States\",\"U.S.A\",\"Uruguay\",\"Uzbekistan\",\"Vanuatu\",\"Vatican\",\"Venezuela\",\"Vietnam\",\"Wallis and Futuna\",\"Western Sahara\",\"Yemen\",\"Zambia\",\"Zimbabwe\"};\ncountryCodesList = {\"AF\",\"AL\",\"DZ\",\"AS\",\"AD\",\"AO\",\"AI\",\"AQ\",\"AG\",\"AR\",\"AM\",\"AW\",\"AU\",\"AT\",\"AZ\",\"BS\",\"BH\",\"BD\",\"BB\",\"BY\",\"BE\",\"BZ\",\"BJ\",\"BM\",\"BT\",\"BO\",\"BA\",\"BW\",\"BR\",\"IO\",\"VG\",\"BN\",\"BG\",\"BF\",\"BI\",\"KH\",\"CM\",\"CA\",\"CV\",\"KY\",\"CF\",\"TD\",\"CL\",\"CN\",\"CX\",\"CC\",\"CO\",\"KM\",\"CK\",\"CR\",\"HR\",\"CU\",\"CW\",\"CY\",\"CZ\",\"CD\",\"DK\",\"DJ\",\"DM\",\"DO\",\"TL\",\"EC\",\"EG\",\"SV\",\"GQ\",\"ER\",\"EE\",\"ET\",\"FK\",\"FO\",\"FJ\",\"FI\",\"FR\",\"PF\",\"GA\",\"GM\",\"GE\",\"DE\",\"GH\",\"GI\",\"GR\",\"GL\",\"GD\",\"GU\",\"GT\",\"GG\",\"GN\",\"GW\",\"GY\",\"HT\",\"HN\",\"HK\",\"HU\",\"IS\",\"IN\",\"ID\",\"IR\",\"IQ\",\"IE\",\"IM\",\"IL\",\"IT\",\"CI\",\"JM\",\"JP\",\"JE\",\"JO\",\"KZ\",\"KE\",\"KI\",\"XK\",\"KW\",\"KG\",\"LA\",\"LV\",\"LB\",\"LS\",\"LR\",\"LY\",\"LI\",\"LT\",\"LU\",\"MO\",\"MK\",\"MG\",\"MW\",\"MY\",\"MV\",\"ML\",\"MT\",\"MH\",\"MR\",\"MU\",\"YT\",\"MX\",\"FM\",\"MD\",\"MC\",\"MN\",\"ME\",\"MS\",\"MA\",\"MZ\",\"MM\",\"NA\",\"NR\",\"NP\",\"NL\",\"AN\",\"NC\",\"NZ\",\"NI\",\"NE\",\"NG\",\"NU\",\"KP\",\"MP\",\"NO\",\"OM\",\"PK\",\"PW\",\"PS\",\"PA\",\"PG\",\"PY\",\"PE\",\"PH\",\"PN\",\"PL\",\"PT\",\"PR\",\"QA\",\"CG\",\"RE\",\"RO\",\"RU\",\"RW\",\"BL\",\"SH\",\"KN\",\"LC\",\"MF\",\"PM\",\"VC\",\"WS\",\"SM\",\"ST\",\"SA\",\"SN\",\"RS\",\"SC\",\"SL\",\"SG\",\"SX\",\"SK\",\"SI\",\"SB\",\"SO\",\"ZA\",\"KR\",\"SS\",\"ES\",\"LK\",\"SD\",\"SR\",\"SJ\",\"SZ\",\"SE\",\"CH\",\"SY\",\"TW\",\"TJ\",\"TZ\",\"TH\",\"TG\",\"TK\",\"TO\",\"TT\",\"TN\",\"TR\",\"TM\",\"TC\",\"TV\",\"VI\",\"UG\",\"UA\",\"AE\",\"AE\",\"GB\",\"US\",\"US\",\"UY\",\"UZ\",\"VU\",\"VA\",\"VE\",\"VN\",\"WF\",\"EH\",\"YE\",\"ZM\",\"ZW\"};\nindex = fullCountryList.indexOf(\"Albania\");\ninfo countryCodesList.get(index);*/\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v2/Deals/4444945000018179030\"\n\ttype :GET\n\tconnection:\"zoho_crm\"\n];\ninfo resp;\nreturn \"\";"
    },
    {
        "api_name": "testsheetsclient",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testsheetsclient",
        "id": "512029000001907001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-06-20T23:50:05+02:00",
        "name": "testsheetsclient",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testsheetsclient/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testsheetsclient/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testsheetsclient()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\npartData.put('part2',countPart2);\npartData.put('part3',countPart3);\npartData.put('part4',countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + prev + \":AJ\" + part;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-06-20 14:50:08.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\npartData.put('part2',countPart2);\npartData.put('part3',countPart3);\npartData.put('part4',countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + prev + \":AJ\" + part;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": "test123",
        "associated_place": null,
        "category": "relatedlist",
        "config": false,
        "description": null,
        "display_name": "test213",
        "id": "512029000002227001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-04T23:52:04+01:00",
        "name": "test123",
        "nameSpace": "related_list",
        "params": [
            {
                "name": "test",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test123/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test123/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string related_list.test123(string test)\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-11-04 15:52:04.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002121012",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function14",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function14(map installParamMap)\n{\nwebhookid = zoho.crm.getOrgVariable(\"acuityscheduling1__webhook\");\ncanwebhookid = zoho.crm.getOrgVariable(\"acuityscheduling1__canwebhook\");\nreswebhookid = zoho.crm.getOrgVariable(\"acuityscheduling1__reswebhook\");\nm = {\"id\":webhookid};\nn = {\"id\":canwebhookid};\nr = {\"id\":reswebhookid};\nresp = zoho.crm.invokeConnector(\"acuityscheduling1.acuityscheduling.deletehook\",m);\nresp = zoho.crm.invokeConnector(\"acuityscheduling1.acuityscheduling.deletehook\",n);\nresp = zoho.crm.invokeConnector(\"acuityscheduling1.acuityscheduling.deletehook\",r);\nm = {\"apiname\":\"acuityscheduling1__webhook\",\"value\":0};\nn = {\"apiname\":\"acuityscheduling1__canwebhook\",\"value\":0};\nr = {\"apiname\":\"acuityscheduling1__reswebhook\",\"value\":0};\nsetOrgVar = zoho.crm.invokeConnector(\"crm.set\",m);\nsetOrgVarn = zoho.crm.invokeConnector(\"crm.set\",n);\nsetOrgVarr = zoho.crm.invokeConnector(\"crm.set\",r);\norgid = installParamMap.get(\"organizationId\");\ninstallerid = installParamMap.get(\"installerId\");\nisInstall = installParamMap.get(\"isInstall\");\npversion = installParamMap.get(\"previousVersion\");\nurl = \"https://creator.zoho.com/api/premanand12/json/extracut-plugins/form/extracut_users/record/add\";\nlogMap = Map();\nlogMap.put(\"authtoken\",\"6e763808a6a1637188f22862d4b198e7\");\nlogMap.put(\"scope\",\"creatorapi\");\nlogMap.put(\"Organization_ID\",orgid);\nlogMap.put(\"Installer_ID\",zoho.loginuserid);\nlogMap.put(\"Is_Install\",pversion);\nlogMap.put(\"Plugin\",\"Acuity\");\nlogMap.put(\"Event\",\"Uninstall\");\nResponse = postUrl(url,logMap,false);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getOrgVariable",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-09-13 01:07:52.0",
        "workflow": "webhookid = zoho.crm.getOrgVariable(\"acuityscheduling1__webhook\");\ncanwebhookid = zoho.crm.getOrgVariable(\"acuityscheduling1__canwebhook\");\nreswebhookid = zoho.crm.getOrgVariable(\"acuityscheduling1__reswebhook\");\nm = {\"id\":webhookid};\nn = {\"id\":canwebhookid};\nr = {\"id\":reswebhookid};\nresp = zoho.crm.invokeConnector(\"acuityscheduling1.acuityscheduling.deletehook\",m);\nresp = zoho.crm.invokeConnector(\"acuityscheduling1.acuityscheduling.deletehook\",n);\nresp = zoho.crm.invokeConnector(\"acuityscheduling1.acuityscheduling.deletehook\",r);\nm = {\"apiname\":\"acuityscheduling1__webhook\",\"value\":0};\nn = {\"apiname\":\"acuityscheduling1__canwebhook\",\"value\":0};\nr = {\"apiname\":\"acuityscheduling1__reswebhook\",\"value\":0};\nsetOrgVar = zoho.crm.invokeConnector(\"crm.set\",m);\nsetOrgVarn = zoho.crm.invokeConnector(\"crm.set\",n);\nsetOrgVarr = zoho.crm.invokeConnector(\"crm.set\",r);\norgid = installParamMap.get(\"organizationId\");\ninstallerid = installParamMap.get(\"installerId\");\nisInstall = installParamMap.get(\"isInstall\");\npversion = installParamMap.get(\"previousVersion\");\nurl = \"https://creator.zoho.com/api/premanand12/json/extracut-plugins/form/extracut_users/record/add\";\nlogMap = Map();\nlogMap.put(\"authtoken\",\"6e763808a6a1637188f22862d4b198e7\");\nlogMap.put(\"scope\",\"creatorapi\");\nlogMap.put(\"Organization_ID\",orgid);\nlogMap.put(\"Installer_ID\",zoho.loginuserid);\nlogMap.put(\"Is_Install\",pversion);\nlogMap.put(\"Plugin\",\"Acuity\");\nlogMap.put(\"Event\",\"Uninstall\");\nResponse = postUrl(url,logMap,false);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002176008",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function27",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function27(map installParamMap)\n{\nkeySecret = \"m3n6b1z0f7l3f7l5s8z9a7f6j3i6c7m2n4m9c0\";\nurlApp = \"https://e2l.crmoz.com/deleteCompany?k=\" + keySecret + \"&id=\";\ncompanyId = installParamMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-10-04 06:39:36.0",
        "workflow": "keySecret = \"m3n6b1z0f7l3f7l5s8z9a7f6j3i6c7m2n4m9c0\";\nurlApp = \"https://e2l.crmoz.com/deleteCompany?k=\" + keySecret + \"&id=\";\ncompanyId = installParamMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);"
    },
    {
        "api_name": "Test12",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "id",
                        "value": "Deals.Deals - Campaigns Id"
                    }
                ],
                "id": 4444945000030130000,
                "isOldDataNeeded": false,
                "module": "Deals",
                "name": "Test WF Attachments",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "sdsadsa",
        "id": "512029000002256001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-17T09:34:23+01:00",
        "name": "Test12",
        "nameSpace": "automation",
        "params": [
            {
                "name": "id",
                "type": "BIGINT"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/Test12/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/Test12/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.Test12(Int id)\n{\nzoho.crm.updateRecord(\"Deals\",id,{\"Description\":\"test attachments\"});\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "id"
            ]
        },
        "updatedTime": "2023-11-17 00:34:23.0",
        "workflow": "zoho.crm.updateRecord(\"Deals\",id,{\"Description\":\"test attachments\"});"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002166008",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function44",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "downgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function44(map downgradeMap)\n{\nkeySecret = \"Y53pBstmkb3Qn6QBa8MJ5eh56574RNgtxV5w6UmHNJtNTVDSHp4m9eEBLs9Z\";\nurlApp = \"https://e2l.crmoz.com/free?token=\" + keySecret + \"&id=\";\ncompanyId = downgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-10-04 06:39:36.0",
        "workflow": "keySecret = \"Y53pBstmkb3Qn6QBa8MJ5eh56574RNgtxV5w6UmHNJtNTVDSHp4m9eEBLs9Z\";\nurlApp = \"https://e2l.crmoz.com/free?token=\" + keySecret + \"&id=\";\ncompanyId = downgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);"
    },
    {
        "api_name": "create_and_assign_contact",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "Create and Assign Contact",
        "id": "512029000002082001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-08-16T14:46:16+02:00",
        "name": "create_and_assign_contact",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/create_and_assign_contact/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/create_and_assign_contact/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.create_and_assign_contact()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-08-16 05:46:16.0",
        "workflow": null
    },
    {
        "api_name": "null",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "convertDate",
        "id": "512029000002124008",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-09-13T10:07:50+02:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "test66",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test66",
        "id": "512029000002096001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-08-22T09:21:39+02:00",
        "name": "test66",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test66/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test66/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test66()\n{\ndata = {\"id\":\"evt_3NazmPBRx16lrleG0FmjH0UV\",\"object\":\"event\",\"api_version\":\"2017-12-14\",\"created\":1691062403,\"data\":{\"object\":{\"id\":\"pi_3NazmPBRx16lrleG0JQqIKbS\",\"object\":\"payment_intent\",\"allowed_source_types\":{\"card\"},\"amount\":1800,\"amount_capturable\":0,\"amount_details\":{\"tip\":{}},\"amount_received\":1800,\"application\":\"ca_4JdcvNzupRQxT3e7rP30aKpNYoUeUcls\",\"application_fee_amount\":null,\"automatic_payment_methods\":null,\"canceled_at\":null,\"cancellation_reason\":null,\"capture_method\":\"automatic\",\"charges\":{\"object\":\"list\",\"data\":{{\"id\":\"ch_3NazmPBRx16lrleG0nQdXh9O\",\"object\":\"charge\",\"amount\":1800,\"amount_captured\":1800,\"amount_refunded\":0,\"application\":\"ca_4JdcvNzupRQxT3e7rP30aKpNYoUeUcls\",\"application_fee\":null,\"application_fee_amount\":null,\"balance_transaction\":\"txn_3NazmPBRx16lrleG0OqVRgMt\",\"billing_details\":{\"address\":{\"city\":\"Baltimore\",\"country\":\"US\",\"line1\":\"2708 Willow Glen Dr\",\"line2\":null,\"postal_code\":\"21209\",\"state\":\"MD\"},\"email\":null,\"name\":\"Theodore Goodman\",\"phone\":null},\"calculated_statement_descriptor\":\"JEW IN THE CITY\",\"captured\":true,\"created\":1691062402,\"currency\":\"usd\",\"customer\":\"cus_MB2VYFZAF6ziIb\",\"description\":\"Jew in the City :: DON-001208\",\"destination\":null,\"dispute\":null,\"disputed\":false,\"failure_balance_transaction\":null,\"failure_code\":null,\"failure_message\":null,\"fraud_details\":{},\"invoice\":null,\"livemode\":true,\"metadata\":{\"merchant_reference\":\"2542018000002056032\",\"email\":\"nechamgoodman18@gmail.com\",\"Name\":\"Theodore Goodman\"},\"on_behalf_of\":null,\"order\":null,\"outcome\":{\"network_status\":\"approved_by_network\",\"reason\":null,\"risk_level\":\"normal\",\"seller_message\":\"Payment complete.\",\"type\":\"authorized\"},\"paid\":true,\"payment_intent\":\"pi_3NazmPBRx16lrleG0JQqIKbS\",\"payment_method\":\"pm_1LSgQYBRx16lrleGEuKFSKYl\",\"payment_method_details\":{\"card\":{\"brand\":\"visa\",\"checks\":{\"address_line1_check\":\"fail\",\"address_postal_code_check\":\"fail\",\"cvc_check\":null},\"country\":\"US\",\"exp_month\":11,\"exp_year\":2025,\"fingerprint\":\"Ac9ZO2FscUzglXfe\",\"funding\":\"credit\",\"installments\":null,\"last4\":\"1530\",\"mandate\":null,\"network\":\"visa\",\"network_token\":{\"used\":true},\"three_d_secure\":null,\"wallet\":null},\"type\":\"card\"},\"receipt_email\":null,\"receipt_number\":null,\"receipt_url\":\"https://pay.stripe.com/receipts/payment/CAcQARoXChVhY2N0XzFBemM5MEJSeDE2bHJsZUcog6GupgYyBszWGbWDtDosFhZ0BlQzMz82N4LWd-MAetLRCE2HyZXbwu2tftq4GnJDqVvCPndbWtLQM1g\",\"refunded\":false,\"refunds\":{\"object\":\"list\",\"data\":{},\"has_more\":false,\"total_count\":0,\"url\":\"/v1/charges/ch_3NazmPBRx16lrleG0nQdXh9O/refunds\"},\"review\":null,\"shipping\":null,\"source\":null,\"source_transfer\":null,\"statement_descriptor\":null,\"statement_descriptor_suffix\":null,\"status\":\"succeeded\",\"transfer_data\":null,\"transfer_group\":null}},\"has_more\":false,\"total_count\":1,\"url\":\"/v1/charges?payment_intent=pi_3NazmPBRx16lrleG0JQqIKbS\"},\"client_secret\":\"pi_3NazmPBRx16lrleG0JQqIKbS_secret_zOHTK0TYncbt1cCgcfmNBkviB\",\"confirmation_method\":\"manual\",\"created\":1691062401,\"currency\":\"usd\",\"customer\":\"cus_MB2VYFZAF6ziIb\",\"description\":\"Jew in the City :: DON-001208\",\"invoice\":null,\"last_payment_error\":null,\"latest_charge\":\"ch_3NazmPBRx16lrleG0nQdXh9O\",\"livemode\":true,\"metadata\":{\"merchant_reference\":\"2542018000002056032\",\"email\":\"nechamgoodman18@gmail.com\",\"Name\":\"Theodore Goodman\"},\"next_action\":null,\"next_source_action\":null,\"on_behalf_of\":null,\"payment_method\":\"pm_1LSgQYBRx16lrleGEuKFSKYl\",\"payment_method_options\":{\"card\":{\"installments\":null,\"mandate_options\":null,\"network\":null,\"request_three_d_secure\":\"automatic\"}},\"payment_method_types\":{\"card\"},\"processing\":null,\"receipt_email\":null,\"review\":null,\"setup_future_usage\":null,\"shipping\":null,\"source\":null,\"statement_descriptor\":null,\"statement_descriptor_suffix\":null,\"status\":\"succeeded\",\"transfer_data\":null,\"transfer_group\":null}},\"livemode\":true,\"pending_webhooks\":1,\"request\":{\"id\":\"req_U2ERtOyRRssPMg\",\"idempotency_key\":\"2c71c3d5-2d8f-4495-891b-20a28143e35c\"},\"type\":\"payment_intent.succeeded\"};\nrequest_body = data.toMap();\nrequest_body = request_body.getJSON(\"data\").getJSON(\"object\");\ncharges = request_body.getJSON(\"charges\");\nif(charges.size() > 0 && charges != null)\n{\n\tif(charges.getJSON(\"data\").size() > 0 && charges.getJSON(\"data\") != null)\n\t{\n\t\tif(charges.getJSON(\"data\").get(0).getJSON(\"metadata\") != null && charges.getJSON(\"data\").get(0).getJSON(\"metadata\").getJSON(\"email\") != null)\n\t\t{\n\t\t\trecipientEmail = charges.getJSON(\"data\").get(0).getJSON(\"metadata\").getJSON(\"email\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trecipientEmail = charges.getJSON(\"data\").get(0).get(\"receipt_email\");\n\t\t}\n\t\tinfo recipientEmail;\n\t}\n}\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-08-22 00:21:40.0",
        "workflow": "data = {\"id\":\"evt_3NazmPBRx16lrleG0FmjH0UV\",\"object\":\"event\",\"api_version\":\"2017-12-14\",\"created\":1691062403,\"data\":{\"object\":{\"id\":\"pi_3NazmPBRx16lrleG0JQqIKbS\",\"object\":\"payment_intent\",\"allowed_source_types\":{\"card\"},\"amount\":1800,\"amount_capturable\":0,\"amount_details\":{\"tip\":{}},\"amount_received\":1800,\"application\":\"ca_4JdcvNzupRQxT3e7rP30aKpNYoUeUcls\",\"application_fee_amount\":null,\"automatic_payment_methods\":null,\"canceled_at\":null,\"cancellation_reason\":null,\"capture_method\":\"automatic\",\"charges\":{\"object\":\"list\",\"data\":{{\"id\":\"ch_3NazmPBRx16lrleG0nQdXh9O\",\"object\":\"charge\",\"amount\":1800,\"amount_captured\":1800,\"amount_refunded\":0,\"application\":\"ca_4JdcvNzupRQxT3e7rP30aKpNYoUeUcls\",\"application_fee\":null,\"application_fee_amount\":null,\"balance_transaction\":\"txn_3NazmPBRx16lrleG0OqVRgMt\",\"billing_details\":{\"address\":{\"city\":\"Baltimore\",\"country\":\"US\",\"line1\":\"2708 Willow Glen Dr\",\"line2\":null,\"postal_code\":\"21209\",\"state\":\"MD\"},\"email\":null,\"name\":\"Theodore Goodman\",\"phone\":null},\"calculated_statement_descriptor\":\"JEW IN THE CITY\",\"captured\":true,\"created\":1691062402,\"currency\":\"usd\",\"customer\":\"cus_MB2VYFZAF6ziIb\",\"description\":\"Jew in the City :: DON-001208\",\"destination\":null,\"dispute\":null,\"disputed\":false,\"failure_balance_transaction\":null,\"failure_code\":null,\"failure_message\":null,\"fraud_details\":{},\"invoice\":null,\"livemode\":true,\"metadata\":{\"merchant_reference\":\"2542018000002056032\",\"email\":\"nechamgoodman18@gmail.com\",\"Name\":\"Theodore Goodman\"},\"on_behalf_of\":null,\"order\":null,\"outcome\":{\"network_status\":\"approved_by_network\",\"reason\":null,\"risk_level\":\"normal\",\"seller_message\":\"Payment complete.\",\"type\":\"authorized\"},\"paid\":true,\"payment_intent\":\"pi_3NazmPBRx16lrleG0JQqIKbS\",\"payment_method\":\"pm_1LSgQYBRx16lrleGEuKFSKYl\",\"payment_method_details\":{\"card\":{\"brand\":\"visa\",\"checks\":{\"address_line1_check\":\"fail\",\"address_postal_code_check\":\"fail\",\"cvc_check\":null},\"country\":\"US\",\"exp_month\":11,\"exp_year\":2025,\"fingerprint\":\"Ac9ZO2FscUzglXfe\",\"funding\":\"credit\",\"installments\":null,\"last4\":\"1530\",\"mandate\":null,\"network\":\"visa\",\"network_token\":{\"used\":true},\"three_d_secure\":null,\"wallet\":null},\"type\":\"card\"},\"receipt_email\":null,\"receipt_number\":null,\"receipt_url\":\"https://pay.stripe.com/receipts/payment/CAcQARoXChVhY2N0XzFBemM5MEJSeDE2bHJsZUcog6GupgYyBszWGbWDtDosFhZ0BlQzMz82N4LWd-MAetLRCE2HyZXbwu2tftq4GnJDqVvCPndbWtLQM1g\",\"refunded\":false,\"refunds\":{\"object\":\"list\",\"data\":{},\"has_more\":false,\"total_count\":0,\"url\":\"/v1/charges/ch_3NazmPBRx16lrleG0nQdXh9O/refunds\"},\"review\":null,\"shipping\":null,\"source\":null,\"source_transfer\":null,\"statement_descriptor\":null,\"statement_descriptor_suffix\":null,\"status\":\"succeeded\",\"transfer_data\":null,\"transfer_group\":null}},\"has_more\":false,\"total_count\":1,\"url\":\"/v1/charges?payment_intent=pi_3NazmPBRx16lrleG0JQqIKbS\"},\"client_secret\":\"pi_3NazmPBRx16lrleG0JQqIKbS_secret_zOHTK0TYncbt1cCgcfmNBkviB\",\"confirmation_method\":\"manual\",\"created\":1691062401,\"currency\":\"usd\",\"customer\":\"cus_MB2VYFZAF6ziIb\",\"description\":\"Jew in the City :: DON-001208\",\"invoice\":null,\"last_payment_error\":null,\"latest_charge\":\"ch_3NazmPBRx16lrleG0nQdXh9O\",\"livemode\":true,\"metadata\":{\"merchant_reference\":\"2542018000002056032\",\"email\":\"nechamgoodman18@gmail.com\",\"Name\":\"Theodore Goodman\"},\"next_action\":null,\"next_source_action\":null,\"on_behalf_of\":null,\"payment_method\":\"pm_1LSgQYBRx16lrleGEuKFSKYl\",\"payment_method_options\":{\"card\":{\"installments\":null,\"mandate_options\":null,\"network\":null,\"request_three_d_secure\":\"automatic\"}},\"payment_method_types\":{\"card\"},\"processing\":null,\"receipt_email\":null,\"review\":null,\"setup_future_usage\":null,\"shipping\":null,\"source\":null,\"statement_descriptor\":null,\"statement_descriptor_suffix\":null,\"status\":\"succeeded\",\"transfer_data\":null,\"transfer_group\":null}},\"livemode\":true,\"pending_webhooks\":1,\"request\":{\"id\":\"req_U2ERtOyRRssPMg\",\"idempotency_key\":\"2c71c3d5-2d8f-4495-891b-20a28143e35c\"},\"type\":\"payment_intent.succeeded\"};\nrequest_body = data.toMap();\nrequest_body = request_body.getJSON(\"data\").getJSON(\"object\");\ncharges = request_body.getJSON(\"charges\");\nif(charges.size() > 0 && charges != null)\n{\n\tif(charges.getJSON(\"data\").size() > 0 && charges.getJSON(\"data\") != null)\n\t{\n\t\tif(charges.getJSON(\"data\").get(0).getJSON(\"metadata\") != null && charges.getJSON(\"data\").get(0).getJSON(\"metadata\").getJSON(\"email\") != null)\n\t\t{\n\t\t\trecipientEmail = charges.getJSON(\"data\").get(0).getJSON(\"metadata\").getJSON(\"email\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\trecipientEmail = charges.getJSON(\"data\").get(0).get(\"receipt_email\");\n\t\t}\n\t\tinfo recipientEmail;\n\t}\n}\nreturn \"\";"
    },
    {
        "api_name": "acuityscheduling1.onschedule",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "onSchedule",
        "id": "512029000002130001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-09-13T10:07:50+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/acuityscheduling1.onschedule/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/acuityscheduling1.onschedule/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002127001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function41",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "downgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function41(map downgradeMap)\n{\nurl = \"https://creator.zoho.com/api/premanand12/json/extracut-plugins/form/extracut_users/record/add\";\nlogMap = Map();\nlogMap.put(\"authtoken\",\"6e763808a6a1637188f22862d4b198e7\");\nlogMap.put(\"scope\",\"creatorapi\");\nlogMap.put(\"Installer_ID\",zoho.loginuserid);\nlogMap.put(\"Plugin\",\"Calendly\");\nlogMap.put(\"Event\",\"Downgrade\");\nResponse = postUrl(url,logMap,false);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-09-13 01:07:53.0",
        "workflow": "url = \"https://creator.zoho.com/api/premanand12/json/extracut-plugins/form/extracut_users/record/add\";\nlogMap = Map();\nlogMap.put(\"authtoken\",\"6e763808a6a1637188f22862d4b198e7\");\nlogMap.put(\"scope\",\"creatorapi\");\nlogMap.put(\"Installer_ID\",zoho.loginuserid);\nlogMap.put(\"Plugin\",\"Calendly\");\nlogMap.put(\"Event\",\"Downgrade\");\nResponse = postUrl(url,logMap,false);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002224005",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function28",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function28(map installParamMap)\n{\nkeySecret = \"722a552a9a1a41e9baaed20578e24bc9\";\nurlApp = \"https://psql.crmoz.com/deleteCompany?k=\" + keySecret + \"&id=\";\ncompanyId = installParamMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-06 05:08:14.0",
        "workflow": "keySecret = \"722a552a9a1a41e9baaed20578e24bc9\";\nurlApp = \"https://psql.crmoz.com/deleteCompany?k=\" + keySecret + \"&id=\";\ncompanyId = installParamMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002262003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function9",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function9(map installParamMap)\n{\ntoken = zoho.encryption.md5(\"key\" + installParamMap.get(\"organizationId\"));\nurl = \"https://emandphchecker.crmoz.com/actions/uninstall?orgId=\" + installParamMap.get(\"organizationId\") + \"&token=\" + token;\ngetUrl(url);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-17 05:24:50.0",
        "workflow": "token = zoho.encryption.md5(\"key\" + installParamMap.get(\"organizationId\"));\nurl = \"https://emandphchecker.crmoz.com/actions/uninstall?orgId=\" + installParamMap.get(\"organizationId\") + \"&token=\" + token;\ngetUrl(url);"
    },
    {
        "api_name": "acuityscheduling1__deletehooks",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "deleteHooks",
        "id": "512029000002124015",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-09-13T10:07:50+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/acuityscheduling1__deletehooks/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/acuityscheduling1__deletehooks/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002123001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Variable_Function7",
        "nameSpace": "VariableAction",
        "params": [
            {
                "name": "variableMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void VariableAction.Variable_Function7(map variableMap)\n{\n}",
        "source": "crm",
        "tasks": {},
        "updatedTime": "2023-09-13 01:07:47.0",
        "workflow": null
    },
    {
        "api_name": "SubFormData",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "SubFormData",
        "id": "512029000002165008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-09-27T14:28:18+02:00",
        "name": "SubFormData",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/SubFormData/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/SubFormData/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.SubFormData()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-09-27 05:28:19.0",
        "workflow": null
    },
    {
        "api_name": "SendEmail",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "send_email",
        "id": "512029000002087001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-08-19T17:49:54+02:00",
        "name": "SendEmail",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "arguments",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/SendEmail/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/SendEmail/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.SendEmail(String arguments)\n{\ntext = arguments.get(\"Message\");\nids = arguments.get(\"Ids\");\nfor each  id in ids\n{\n\tcontact = zoho.crm.getRecordById(\"Contacts\",id);\n\temail = contact.get(\"Email\");\n\tsendmail\n\t[\n\t\tfrom :zoho.adminuserid\n\t\tto :email\n\t\tsubject :\"Ta Dam\"\n\t\tmessage :text\n\t]\n}\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "arguments"
            ],
            "sendmail": [
                {
                    "to": [
                        "unknown"
                    ]
                }
            ]
        },
        "updatedTime": "2023-08-19 08:49:54.0",
        "workflow": "text = arguments.get(\"Message\");\nids = arguments.get(\"Ids\");\nfor each  id in ids\n{\n\tcontact = zoho.crm.getRecordById(\"Contacts\",id);\n\temail = contact.get(\"Email\");\n\tsendmail\n\t[\n\t\tfrom :zoho.adminuserid\n\t\tto :email\n\t\tsubject :\"Ta Dam\"\n\t\tmessage :text\n\t]\n}\nreturn \"\";"
    },
    {
        "api_name": "create_and_assign_contact1",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "create_and_assign_contact",
        "id": "512029000002083001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-08-16T15:40:53+02:00",
        "name": "create_and_assign_contact1",
        "nameSpace": "automation",
        "params": [
            {
                "name": "contactPersonName",
                "type": "STRING"
            },
            {
                "name": "accountId",
                "type": "BIGINT"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/create_and_assign_contact1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/create_and_assign_contact1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.create_and_assign_contact1(String contactPersonName, Int accountId)\n{\ncontactMap = Map();\ncontactMap.put(\"Last_Name\",contactPersonName);\ncontactMap.put(\"Account_Name\",accountId);\ninfo zoho.crm.createRecord(\"Contacts\",contactMap);\n// contact = zoho.crm.getRecordById(\"Contacts\", \"4444945000027952001\");\n// info contact.get(\"Account_Name\");\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "contactPersonName",
                "accountId"
            ]
        },
        "updatedTime": "2023-08-16 06:40:58.0",
        "workflow": "contactMap = Map();\ncontactMap.put(\"Last_Name\",contactPersonName);\ncontactMap.put(\"Account_Name\",accountId);\ninfo zoho.crm.createRecord(\"Contacts\",contactMap);\n// contact = zoho.crm.getRecordById(\"Contacts\", \"4444945000027952001\");\n// info contact.get(\"Account_Name\");"
    },
    {
        "api_name": "validation",
        "associated_place": null,
        "category": "relatedlist",
        "config": false,
        "description": null,
        "display_name": "validation",
        "id": "512029000002197011",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-10-10T14:14:28+02:00",
        "name": "validation",
        "nameSpace": "related_list",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/validation/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/validation/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string related_list.validation()\n{\nreturn \"New\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-10-10 05:19:34.0",
        "workflow": "return \"New\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002263001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Variable_Function3",
        "nameSpace": "VariableAction",
        "params": [
            {
                "name": "variableMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void VariableAction.Variable_Function3(map variableMap)\n{\norgInfo = zoho.crm.invokeConnector(\"crm.getorg\",Map());\norgId = orgInfo.get('response').get('org').get(0).get('id');\nurl = \"https://emandphchecker.crmoz.com/ext/phones/set-code?\";\nurl = url + \"token=\" + zoho.encryption.md5(\"key\" + orgId);\nurl = url + \"&orgId=\" + orgId + \"&code=\" + variableMap.get('newvalue');\nres = invokeurl\n[\n\turl :url\n\ttype :POST\n];\ninfo res;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-17 05:24:43.0",
        "workflow": "orgInfo = zoho.crm.invokeConnector(\"crm.getorg\",Map());\norgId = orgInfo.get('response').get('org').get(0).get('id');\nurl = \"https://emandphchecker.crmoz.com/ext/phones/set-code?\";\nurl = url + \"token=\" + zoho.encryption.md5(\"key\" + orgId);\nurl = url + \"&orgId=\" + orgId + \"&code=\" + variableMap.get('newvalue');\nres = invokeurl\n[\n\turl :url\n\ttype :POST\n];\ninfo res;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002126001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function31",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "upgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function31(map upgradeMap)\n{\nurl = \"https://creator.zoho.com/api/premanand12/json/extracut-plugins/form/extracut_users/record/add\";\nlogMap = Map();\nlogMap.put(\"authtoken\",\"6e763808a6a1637188f22862d4b198e7\");\nlogMap.put(\"scope\",\"creatorapi\");\nlogMap.put(\"Installer_ID\",zoho.loginuserid);\nlogMap.put(\"Plugin\",\"Acuity\");\nlogMap.put(\"Event\",\"Purchase\");\nResponse = postUrl(url,logMap,false);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-09-13 01:07:52.0",
        "workflow": "url = \"https://creator.zoho.com/api/premanand12/json/extracut-plugins/form/extracut_users/record/add\";\nlogMap = Map();\nlogMap.put(\"authtoken\",\"6e763808a6a1637188f22862d4b198e7\");\nlogMap.put(\"scope\",\"creatorapi\");\nlogMap.put(\"Installer_ID\",zoho.loginuserid);\nlogMap.put(\"Plugin\",\"Acuity\");\nlogMap.put(\"Event\",\"Purchase\");\nResponse = postUrl(url,logMap,false);"
    },
    {
        "api_name": "CheckBudgetAndSquare",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "contactBudget",
                        "value": "Contacts.Budget"
                    },
                    {
                        "name": "contactSquare",
                        "value": "Contacts.Square"
                    },
                    {
                        "name": "realEstateBudget",
                        "value": "Real Estates.Budget"
                    },
                    {
                        "name": "realEstateSquare",
                        "value": "Real Estates.Square"
                    },
                    {
                        "name": "recordId",
                        "value": "Contacts X Real Estates.Contacts X Real Estates Id"
                    }
                ],
                "id": 4444945000029130000,
                "isOldDataNeeded": false,
                "module": "Contacts X Real Estates",
                "name": "Validation",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "CheckBudgetAndSquare",
        "id": "512029000002189003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-10-10T13:56:53+02:00",
        "name": "CheckBudgetAndSquare",
        "nameSpace": "automation",
        "params": [
            {
                "name": "contactBudget",
                "type": "DECIMAL"
            },
            {
                "name": "contactSquare",
                "type": "DECIMAL"
            },
            {
                "name": "realEstateBudget",
                "type": "DECIMAL"
            },
            {
                "name": "realEstateSquare",
                "type": "DECIMAL"
            },
            {
                "name": "recordId",
                "type": "BIGINT"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/CheckBudgetAndSquare/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/CheckBudgetAndSquare/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.CheckBudgetAndSquare(Float contactBudget, Float contactSquare, Float realEstateBudget, Float realEstateSquare, Int recordId)\n{\nresponse = 'no';\nif(realEstateSquare != contactSquare || realEstateBudget != contactBudget)\n{\n\tdeleteMap = Map();\n\tdeleteMap.put(\"module\",\"Contacts_X\");\n\tdeleteMap.put(\"id\",recordId);\n\tresponse = zoho.crm.invokeConnector(\"crm.delete\",deleteMap);\n\tinfo zoho.crm.updateRecord(\"Contacts_X\",recordId,{\"Note\":response});\n}\ninfo zoho.crm.updateRecord(\"Contacts_X\",recordId,{\"Note\":realEstateSquare + \"=\" + contactSquare + \"; \" + realEstateBudget + \"=\" + contactBudget});\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "realEstateSquare",
                "contactSquare",
                "realEstateBudget",
                "contactBudget",
                "recordId"
            ]
        },
        "updatedTime": "2023-10-10 04:56:53.0",
        "workflow": "response = 'no';\nif(realEstateSquare != contactSquare || realEstateBudget != contactBudget)\n{\n\tdeleteMap = Map();\n\tdeleteMap.put(\"module\",\"Contacts_X\");\n\tdeleteMap.put(\"id\",recordId);\n\tresponse = zoho.crm.invokeConnector(\"crm.delete\",deleteMap);\n\tinfo zoho.crm.updateRecord(\"Contacts_X\",recordId,{\"Note\":response});\n}\ninfo zoho.crm.updateRecord(\"Contacts_X\",recordId,{\"Note\":realEstateSquare + \"=\" + contactSquare + \"; \" + realEstateBudget + \"=\" + contactBudget});"
    },
    {
        "api_name": "test_quote",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001752001",
                "connectionLinkName": "zoho_widget",
                "connectionName": "zoho_widget",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.Files.READ",
                    "ZohoCRM.functions.execute.CREATE",
                    "ZohoCRM.functions.execute.READ",
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.events.CREATE",
                    "ZohoCRM.modules.events.READ",
                    "ZohoCRM.modules.leads.WRITE",
                    "ZohoCRM.modules.salesorders.WRITE",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.templates.inventory.READ",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL",
                    "zohocrm.functions.execute.CREATE"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test_quote",
        "id": "512029000002171008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-10-04T16:52:31+02:00",
        "name": "test_quote",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_quote/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_quote/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_quote()\n{\nparent_record_id = 4444945000023646045;\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v5/Quotes/4444945000023646045\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\nheader_data = Map();\nheader_data.put(\"Content-Type\",\"application/json\");\nitems = resp.get(\"data\").get(0).get(\"Quoted_Items\");\nproducts = List();\napiData = Map();\nfor each  product in items\n{\n\tpr = Map();\n\tpr.put(\"id\",product.get(\"id\"));\n\tpr.put(\"Product_Name\",product.get(\"Product_Name\").get(\"id\"));\n\tpr.put(\"Quantity\",product.get(\"Quantity\"));\n\tpr.put(\"Price_Book_Name\",\"4444945000022193005\");\n\tproducts.add(pr);\n}\napiData.put(\"id\",parent_record_id);\napiData.put(\"Quoted_Items\",products);\ndata = Map();\ndata.put(\"data\",{apiData});\ninfo data;\nresp1 = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v5/Quotes\"\n\ttype :PUT\n\tparameters:data.toString()\n\theaders:header_data\n\tconnection:\"zoho_widget\"\n];\ninfo resp1;\nreturn '';\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_widget",
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v5/Quotes/4444945000023646045"
                },
                {
                    "connection": "zoho_widget",
                    "method": "put",
                    "url": "https://www.zohoapis.com/crm/v5/Quotes"
                }
            ]
        },
        "updatedTime": "2023-10-04 07:52:31.0",
        "workflow": "parent_record_id = 4444945000023646045;\nresp = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v5/Quotes/4444945000023646045\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\nheader_data = Map();\nheader_data.put(\"Content-Type\",\"application/json\");\nitems = resp.get(\"data\").get(0).get(\"Quoted_Items\");\nproducts = List();\napiData = Map();\nfor each  product in items\n{\n\tpr = Map();\n\tpr.put(\"id\",product.get(\"id\"));\n\tpr.put(\"Product_Name\",product.get(\"Product_Name\").get(\"id\"));\n\tpr.put(\"Quantity\",product.get(\"Quantity\"));\n\tpr.put(\"Price_Book_Name\",\"4444945000022193005\");\n\tproducts.add(pr);\n}\napiData.put(\"id\",parent_record_id);\napiData.put(\"Quoted_Items\",products);\ndata = Map();\ndata.put(\"data\",{apiData});\ninfo data;\nresp1 = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v5/Quotes\"\n\ttype :PUT\n\tparameters:data.toString()\n\theaders:header_data\n\tconnection:\"zoho_widget\"\n];\ninfo resp1;\nreturn '';"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002204001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function18",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function18(map installParamMap)\n{\nkeySecret = \"zGaUz4SWUTfdDYZnrk6S5QED69LzjwbwA7SLFcpDQ27nmXy3ry\";\nurlApp = \"https://mysqles.crmoz.com/delete-request?token=\" + keySecret + \"&id=\";\ncompanyId = installParamMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n//info resp;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-10-13 06:40:21.0",
        "workflow": "keySecret = \"zGaUz4SWUTfdDYZnrk6S5QED69LzjwbwA7SLFcpDQ27nmXy3ry\";\nurlApp = \"https://mysqles.crmoz.com/delete-request?token=\" + keySecret + \"&id=\";\ncompanyId = installParamMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n//info resp;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002254003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Variable_Function",
        "nameSpace": "VariableAction",
        "params": [
            {
                "name": "variableMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void VariableAction.Variable_Function(map variableMap)\n{\n}",
        "source": "crm",
        "tasks": {},
        "updatedTime": "2023-11-17 05:24:42.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002122001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Variable_Function5",
        "nameSpace": "VariableAction",
        "params": [
            {
                "name": "variableMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void VariableAction.Variable_Function5(map variableMap)\n{\n}",
        "source": "crm",
        "tasks": {},
        "updatedTime": "2023-09-13 01:07:46.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002178005",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function32",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "upgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function32(map upgradeMap)\n{\nkeySecret = \"Y53pBstmkb3Qn6QBa8MJ5eh56574RNgtxV5w6UmHNJtNTVDSHp4m9eEBLs9Z\";\nurlApp = \"https://e2l.crmoz.com/paid?token=\" + keySecret + \"&id=\";\ncompanyId = upgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n//info resp;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-10-04 06:39:36.0",
        "workflow": "keySecret = \"Y53pBstmkb3Qn6QBa8MJ5eh56574RNgtxV5w6UmHNJtNTVDSHp4m9eEBLs9Z\";\nurlApp = \"https://e2l.crmoz.com/paid?token=\" + keySecret + \"&id=\";\ncompanyId = upgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n//info resp;"
    },
    {
        "api_name": "create_and_assign_contact2",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "contactPersonName",
                        "value": "Accounts.Contact Person"
                    },
                    {
                        "name": "accountId",
                        "value": "Accounts.Account Id"
                    }
                ],
                "id": 4444945000027957000,
                "isOldDataNeeded": false,
                "module": "Accounts",
                "name": "Create And Assign Contact",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "create_and_assign_contact",
        "id": "512029000002084005",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-08-16T15:46:41+02:00",
        "name": "create_and_assign_contact2",
        "nameSpace": "automation",
        "params": [
            {
                "name": "contactPersonName",
                "type": "STRING"
            },
            {
                "name": "accountId",
                "type": "BIGINT"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/create_and_assign_contact2/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/create_and_assign_contact2/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.create_and_assign_contact2(String contactPersonName, Int accountId)\n{\ncontactMap = Map();\ncontactMap.put(\"Account_Name\",accountId);\ncontactMap.put(\"Last_Name\",contactPersonName);\nzoho.crm.createRecord(\"Contacts\",contactMap);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.createRecord",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "accountId",
                "contactPersonName"
            ]
        },
        "updatedTime": "2023-08-16 06:46:41.0",
        "workflow": "contactMap = Map();\ncontactMap.put(\"Account_Name\",accountId);\ncontactMap.put(\"Last_Name\",contactPersonName);\nzoho.crm.createRecord(\"Contacts\",contactMap);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002231003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function35",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "upgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function35(map upgradeMap)\n{\nkeySecret = \"722a552a9a1a41e9baaed20578e24bc9\";\nurlApp = \"https://psql.crmoz.com/purchase?k=\" + keySecret + \"&id=\";\ncompanyId = upgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\ninfo companyId;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-06 05:08:15.0",
        "workflow": "keySecret = \"722a552a9a1a41e9baaed20578e24bc9\";\nurlApp = \"https://psql.crmoz.com/purchase?k=\" + keySecret + \"&id=\";\ncompanyId = upgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\ninfo companyId;"
    },
    {
        "api_name": "acuityscheduling1.oncschedule",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "onCSchedule",
        "id": "512029000002132001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-09-13T10:07:50+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/acuityscheduling1.oncschedule/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/acuityscheduling1.oncschedule/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "null",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "deleteAllHooks",
        "id": "512029000002129001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-09-13T10:07:50+02:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "testExt",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001752001",
                "connectionLinkName": "zoho_widget",
                "connectionName": "zoho_widget",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.Files.READ",
                    "ZohoCRM.functions.execute.CREATE",
                    "ZohoCRM.functions.execute.READ",
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.events.CREATE",
                    "ZohoCRM.modules.events.READ",
                    "ZohoCRM.modules.leads.WRITE",
                    "ZohoCRM.modules.salesorders.WRITE",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.templates.inventory.READ",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL",
                    "zohocrm.functions.execute.CREATE"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testExt",
        "id": "512029000002260003",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-22T09:36:49+01:00",
        "name": "testExt",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testExt/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testExt/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testExt()\n{\n// id = \"4444945000030199020\";\n// lead = zoho.crm.getRecordById(\"Leads\", id);\n// info lead.get(\"smodextention_user_id\");\n// lead2 = zoho.crm.searchRecords(\"Leads\", \"smodextention_user_id:equals:1122334455\");\n// info lead2.get(0);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v5/files?id=mfv8dc77dd1227a6549be852233191fc08bf1\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_widget",
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v5/files?id=mfv8dc77dd1227a6549be852233191fc08bf1"
                }
            ]
        },
        "updatedTime": "2023-11-22 00:36:50.0",
        "workflow": "// id = \"4444945000030199020\";\n// lead = zoho.crm.getRecordById(\"Leads\", id);\n// info lead.get(\"smodextention_user_id\");\n// lead2 = zoho.crm.searchRecords(\"Leads\", \"smodextention_user_id:equals:1122334455\");\n// info lead2.get(0);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v5/files?id=mfv8dc77dd1227a6549be852233191fc08bf1\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\ninfo response;"
    },
    {
        "api_name": "test213",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test 123",
        "id": "512029000002261016",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-22T15:09:53+01:00",
        "name": "test213",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test213/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test213/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test213()\n{\ninfo zoho.crm.updateRecord(\"Deals\",4444945000030346029,{\"Stage\":\"Перспективные Лиды\"});\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-11-22 06:09:54.0",
        "workflow": "info zoho.crm.updateRecord(\"Deals\",4444945000030346029,{\"Stage\":\"Перспективные Лиды\"});"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002205001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function22",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "upgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function22(map upgradeMap)\n{\nkeySecret = \"Y53pBstmkb3Qn6QBa8MJ5eh56574RNgtxV5w6UmHNJtNTVDSHp4m9eEBLs9Z\";\nurlApp = \"https://mysqles.crmoz.com/paid?token=\" + keySecret + \"&id=\";\ncompanyId = upgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-10-13 06:40:21.0",
        "workflow": "keySecret = \"Y53pBstmkb3Qn6QBa8MJ5eh56574RNgtxV5w6UmHNJtNTVDSHp4m9eEBLs9Z\";\nurlApp = \"https://mysqles.crmoz.com/paid?token=\" + keySecret + \"&id=\";\ncompanyId = upgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);"
    },
    {
        "api_name": "testExtLeads",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001752001",
                "connectionLinkName": "zoho_widget",
                "connectionName": "zoho_widget",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.Files.READ",
                    "ZohoCRM.functions.execute.CREATE",
                    "ZohoCRM.functions.execute.READ",
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.events.CREATE",
                    "ZohoCRM.modules.events.READ",
                    "ZohoCRM.modules.leads.WRITE",
                    "ZohoCRM.modules.salesorders.WRITE",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.templates.inventory.READ",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL",
                    "zohocrm.functions.execute.CREATE"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testExtLeads",
        "id": "512029000002260008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-22T09:39:47+01:00",
        "name": "testExtLeads",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testExtLeads/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testExtLeads/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testExtLeads()\n{\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v5/files?id=mfv8dc77dd1227a6549be852233191fc08bf1\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_widget",
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v5/files?id=mfv8dc77dd1227a6549be852233191fc08bf1"
                }
            ]
        },
        "updatedTime": "2023-11-22 00:39:48.0",
        "workflow": "response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v5/files?id=mfv8dc77dd1227a6549be852233191fc08bf1\"\n\ttype :GET\n\tconnection:\"zoho_widget\"\n];\ninfo response;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "ValidateLinkToRealEstate",
        "id": "512029000002188001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "ValidateLinkToRealEstate",
        "nameSpace": "automation",
        "params": [
            {
                "name": "budget",
                "type": "DECIMAL"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.ValidateLinkToRealEstate(Float budget)\n{\nif(budget > 100)\n{\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false,
            "params": [
                "budget"
            ]
        },
        "updatedTime": "2023-10-10 04:21:44.0",
        "workflow": "if(budget > 100)\n{\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002226006",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function37",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "downgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function37(map downgradeMap)\n{\nkeySecret = \"722a552a9a1a41e9baaed20578e24bc9\";\nurlApp = \"https://psql.crmoz.com/downgrade?k=\" + keySecret + \"&id=\";\ncompanyId = downgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-06 05:08:15.0",
        "workflow": "keySecret = \"722a552a9a1a41e9baaed20578e24bc9\";\nurlApp = \"https://psql.crmoz.com/downgrade?k=\" + keySecret + \"&id=\";\ncompanyId = downgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);"
    },
    {
        "api_name": "Test2",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "test",
        "id": "512029000002085001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-08-18T12:57:00+02:00",
        "name": "Test2",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/Test2/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/Test2/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.Test2()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-08-18 03:57:00.0",
        "workflow": null
    },
    {
        "api_name": "tete",
        "associated_place": null,
        "category": "relatedlist",
        "config": false,
        "description": null,
        "display_name": "tete",
        "id": "512029000002226001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-04T23:51:35+01:00",
        "name": "tete",
        "nameSpace": "related_list",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/tete/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/tete/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string related_list.tete()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-11-04 15:51:36.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": "oz_leads_notify_status",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "oz_leads_notify_status",
        "id": "512029000002033001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-07-27T09:08:22+02:00",
        "name": "oz_leads_notify_status",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/oz_leads_notify_status/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/oz_leads_notify_status/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.oz_leads_notify_status()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-07-27 00:08:23.0",
        "workflow": null
    },
    {
        "api_name": "ValidateBudget",
        "associated_place": [
            {
                "_type": "crmfundamentals",
                "id": "4444945000029130023",
                "layoutId": "4444945000000091033",
                "module": "Contacts",
                "name": "Budget"
            }
        ],
        "category": "crmfundamentals",
        "config": true,
        "description": null,
        "display_name": "ValidateBudget",
        "id": "512029000002190001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-10-10T13:26:03+02:00",
        "name": "ValidateBudget",
        "nameSpace": "validation_rule",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/ValidateBudget/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/ValidateBudget/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "MAP",
        "script": "map validation_rule.ValidateBudget(string crmAPIRequest)\n{\n/* The snippet below shows you how to get a list of fields, their values from a MAP object. The fields’ values can be obtained from the same MAP object.                                                  */\nentityMap = crmAPIRequest.toMap().get(\"record\");\n/* The example below demonstrates how a field’s value (email) can be obtained from a MAP object. Here, entityMap - Map Object, Email - Field's API name\nSample entityMap= {'Email': 'xxx@xxx.com', 'Last_Name': 'xxx'};                                   */\nemail = entityMap.get(\"Email\");\nresponse = Map();\n/* ---------------------------------------------------------------------------------------------- */\nbudget = entityMap.get(\"Budget\");\nif(budget < 100)\n{\n\tresponse.put('status','error');\n\tresponse.put('message','More budget');\n}\nelse\n{\n\tresponse.put('status','success');\n}\n/* ---------------------------------------------------------------------------------------------- */\n/* If the code identifies a validation error, set the status and alert message as shown below:    */\n//response.put('status','error');\n//response.put('message', '<your message(100 characters)>');\n/* If there are no errors found during validation, set the status as shown below:                 */\n/* ---------------------------------------------------------------------------------------------- */\nreturn response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false,
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2023-10-10 04:26:03.0",
        "workflow": "/* The snippet below shows you how to get a list of fields, their values from a MAP object. The fields’ values can be obtained from the same MAP object.                                                  */\nentityMap = crmAPIRequest.toMap().get(\"record\");\n/* The example below demonstrates how a field’s value (email) can be obtained from a MAP object. Here, entityMap - Map Object, Email - Field's API name\nSample entityMap= {'Email': 'xxx@xxx.com', 'Last_Name': 'xxx'};                                   */\nemail = entityMap.get(\"Email\");\nresponse = Map();\n/* ---------------------------------------------------------------------------------------------- */\nbudget = entityMap.get(\"Budget\");\nif(budget < 100)\n{\n\tresponse.put('status','error');\n\tresponse.put('message','More budget');\n}\nelse\n{\n\tresponse.put('status','success');\n}\n/* ---------------------------------------------------------------------------------------------- */\n/* If the code identifies a validation error, set the status and alert message as shown below:    */\n//response.put('status','error');\n//response.put('message', '<your message(100 characters)>');\n/* If there are no errors found during validation, set the status as shown below:                 */\n/* ---------------------------------------------------------------------------------------------- */\nreturn response;"
    },
    {
        "api_name": "test_deal_attachments_wf",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "test_deal_attachments_wf",
        "id": "512029000002255001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-17T09:32:00+01:00",
        "name": "test_deal_attachments_wf",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_deal_attachments_wf/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_deal_attachments_wf/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test_deal_attachments_wf()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-11-17 00:32:01.0",
        "workflow": null
    },
    {
        "api_name": "replace_record_name",
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": null,
                "id": "4444945000027867081",
                "isOldDataNeeded": false,
                "module": "Products",
                "name": "replace_record_name"
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "replace_record_name",
        "id": "512029000002060005",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-08-13T20:46:18+02:00",
        "name": "replace_record_name",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/replace_record_name/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/replace_record_name/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.replace_record_name()\n{\npage_list = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\nfor each  page_number in page_list\n{\n\trecords = zoho.crm.getRecords(\"Products\",page_number,200);\n\tif(records.size() > 0)\n\t{\n\t\tupdate_list = List();\n\t\tfor each  record in records\n\t\t{\n\t\t\tif(record.get(\"Product_Name\").matches(\".*\\bCandy\\b.*\") || record.get(\"Product_Name\").matches(\".*\\bTop\\b.*\"))\n\t\t\t{\n\t\t\t\tvalue = record.get(\"Product_Name\");\n\t\t\t\tvalue = value.replaceAll(\"Candy\",\"Chupa Chups\");\n\t\t\t\tvalue = value.replaceAll(\"Top\",\"Topic\");\n\t\t\t\tupdate_fields = Map();\n\t\t\t\tupdate_fields.put(\"id\",record.get(\"id\"));\n\t\t\t\tupdate_fields.put(\"Product_Name\",value);\n\t\t\t\tinfo value;\n\t\t\t}\n\t\t\tupdate_list.add(update_fields);\n\t\t}\n\t\tif(update_list.size() > 100)\n\t\t{\n\t\t\tinfo zoho.crm.bulkUpdate(\"Products\",update_list.subList(0,100));\n\t\t\tinfo zoho.crm.bulkUpdate(\"Products\",update_list.subList(100,200));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinfo zoho.crm.bulkUpdate(\"Products\",update_list);\n\t\t}\n\t}\n\telse\n\t{\n\t\tbreak;\n\t}\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-08-13 11:46:19.0",
        "workflow": "page_list = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\nfor each  page_number in page_list\n{\n\trecords = zoho.crm.getRecords(\"Products\",page_number,200);\n\tif(records.size() > 0)\n\t{\n\t\tupdate_list = List();\n\t\tfor each  record in records\n\t\t{\n\t\t\tif(record.get(\"Product_Name\").matches(\".*\\bCandy\\b.*\") || record.get(\"Product_Name\").matches(\".*\\bTop\\b.*\"))\n\t\t\t{\n\t\t\t\tvalue = record.get(\"Product_Name\");\n\t\t\t\tvalue = value.replaceAll(\"Candy\",\"Chupa Chups\");\n\t\t\t\tvalue = value.replaceAll(\"Top\",\"Topic\");\n\t\t\t\tupdate_fields = Map();\n\t\t\t\tupdate_fields.put(\"id\",record.get(\"id\"));\n\t\t\t\tupdate_fields.put(\"Product_Name\",value);\n\t\t\t\tinfo value;\n\t\t\t}\n\t\t\tupdate_list.add(update_fields);\n\t\t}\n\t\tif(update_list.size() > 100)\n\t\t{\n\t\t\tinfo zoho.crm.bulkUpdate(\"Products\",update_list.subList(0,100));\n\t\t\tinfo zoho.crm.bulkUpdate(\"Products\",update_list.subList(100,200));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tinfo zoho.crm.bulkUpdate(\"Products\",update_list);\n\t\t}\n\t}\n\telse\n\t{\n\t\tbreak;\n\t}\n}"
    },
    {
        "api_name": "VendoreSubform",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "VendoreSubform",
        "id": "512029000002167008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-09-27T14:59:53+02:00",
        "name": "VendoreSubform",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/VendoreSubform/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/VendoreSubform/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.VendoreSubform()\n{\nvendorId = \"4444945000013332003\";\nvendor = zoho.crm.getRecordById(\"Vendors\",vendorId);\nmembers = vendor.get(\"Team_Members\");\nfor each  member in members\n{\n\tinfo member.get(\"id\");\n}\ndealID = \"4444945000028904827\";\nvendors = zoho.crm.getRecords(\"Deals_X_Vendors\");\nfor each  vendor in vendors\n{\n\tinfo vendor;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecords",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-09-27 05:59:55.0",
        "workflow": "vendorId = \"4444945000013332003\";\nvendor = zoho.crm.getRecordById(\"Vendors\",vendorId);\nmembers = vendor.get(\"Team_Members\");\nfor each  member in members\n{\n\tinfo member.get(\"id\");\n}\ndealID = \"4444945000028904827\";\nvendors = zoho.crm.getRecords(\"Deals_X_Vendors\");\nfor each  vendor in vendors\n{\n\tinfo vendor;\n}"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002121005",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Variable_Function6",
        "nameSpace": "VariableAction",
        "params": [
            {
                "name": "variableMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void VariableAction.Variable_Function6(map variableMap)\n{\n}",
        "source": "crm",
        "tasks": {},
        "updatedTime": "2023-09-13 01:07:46.0",
        "workflow": null
    },
    {
        "api_name": "validation1",
        "associated_place": null,
        "category": "relatedlist",
        "config": false,
        "description": null,
        "display_name": "validation",
        "id": "512029000002198001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-10-10T14:16:50+02:00",
        "name": "validation1",
        "nameSpace": "related_list",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/validation1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/validation1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string related_list.validation1()\n{\nreturn \"Validation\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2023-10-10 05:17:01.0",
        "workflow": "return \"Validation\";"
    },
    {
        "api_name": "acuityscheduling1.onrschedule",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "onRSchedule",
        "id": "512029000002131001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-09-13T10:07:50+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/acuityscheduling1.onrschedule/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/acuityscheduling1.onrschedule/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "testff",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testff",
        "id": "512029000002022001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-07-27T08:09:06+02:00",
        "name": "testff",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testff/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testff/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testff()\n{\nleadRecord = zoho.crm.getRecordById(\"Leads\",\"4444945000000262428\");\ninfo leadRecord;\n//leadCreatedTime = leadRecord.getDay();\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2023-07-26 23:09:07.0",
        "workflow": "leadRecord = zoho.crm.getRecordById(\"Leads\",\"4444945000000262428\");\ninfo leadRecord;\n//leadCreatedTime = leadRecord.getDay();"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002265001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function15",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "upgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function15(map upgradeMap)\n{\ntoken = zoho.encryption.md5(\"key\" + upgradeMap.get(\"organizationId\"));\nurl = \"https://emandphchecker.crmoz.com/actions/purchase?orgId=\" + upgradeMap.get(\"organizationId\") + \"&token=\" + token;\ngetUrl(url);\nrequestsMax = Map();\nrequestsMax.put(\"apiname\",\"emailandphonechecker__EnP_Checker_Ext_Requests_Max\");\nrequestsMax.put(\"value\",\"1000\");\nresp = zoho.crm.invokeConnector(\"crm.set\",requestsMax);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-17 05:24:51.0",
        "workflow": "token = zoho.encryption.md5(\"key\" + upgradeMap.get(\"organizationId\"));\nurl = \"https://emandphchecker.crmoz.com/actions/purchase?orgId=\" + upgradeMap.get(\"organizationId\") + \"&token=\" + token;\ngetUrl(url);\nrequestsMax = Map();\nrequestsMax.put(\"apiname\",\"emailandphonechecker__EnP_Checker_Ext_Requests_Max\");\nrequestsMax.put(\"value\",\"1000\");\nresp = zoho.crm.invokeConnector(\"crm.set\",requestsMax);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002206001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function24",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "downgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function24(map downgradeMap)\n{\nkeySecret = \"Y53pBstmkb3Qn6QBa8MJ5eh56574RNgtxV5w6UmHNJtNTVDSHp4m9eEBLs9Z\";\nurlApp = \"https://mysqles.crmoz.com/free?token=\" + keySecret + \"&id=\";\ncompanyId = downgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-10-13 06:40:22.0",
        "workflow": "keySecret = \"Y53pBstmkb3Qn6QBa8MJ5eh56574RNgtxV5w6UmHNJtNTVDSHp4m9eEBLs9Z\";\nurlApp = \"https://mysqles.crmoz.com/free?token=\" + keySecret + \"&id=\";\ncompanyId = downgradeMap.get(\"organizationId\");\nurlApp = urlApp + companyId;\nresp = getUrl(urlApp);"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002265008",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function19",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "downgradeMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function19(map downgradeMap)\n{\ntoken = zoho.encryption.md5(\"key\" + downgradeMap.get(\"organizationId\"));\nurl = \"https://emandphchecker.crmoz.com/actions/downgrade?orgId=\" + downgradeMap.get(\"organizationId\") + \"&token=\" + token;\ngetUrl(url);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-17 05:24:51.0",
        "workflow": "token = zoho.encryption.md5(\"key\" + downgradeMap.get(\"organizationId\"));\nurl = \"https://emandphchecker.crmoz.com/actions/downgrade?orgId=\" + downgradeMap.get(\"organizationId\") + \"&token=\" + token;\ngetUrl(url);"
    },
    {
        "api_name": "oz_create_update_variable",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000002360001",
                "connectionLinkName": "crm",
                "connectionName": "crm",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.calls.CREATE",
                    "ZohoCRM.modules.calls.READ",
                    "ZohoCRM.modules.notes.ALL",
                    "ZohoCRM.modules.zoho_projects.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.send_mail.ALL.CREATE",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.emails.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.fields.READ",
                    "ZohoCRM.settings.layouts.READ",
                    "ZohoCRM.settings.layouts.read",
                    "ZohoCRM.settings.modules.READ",
                    "ZohoCRM.settings.related_lists.all",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "oz_create_update_variable",
        "id": "512029000002359001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-01-19T13:05:57+01:00",
        "name": "oz_create_update_variable",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "name",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/oz_create_update_variable/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/oz_create_update_variable/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.oz_create_update_variable(String name)\n{\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\ttype :GET\n\tconnection:\"crm\"\n];\nvariables = response.get(\"variables\");\npatternName = name.toLowerCase().replaceAll(\" \",\"_\");\ninfo patternName;\nfor each  variable in variables\n{\n\tif(variable.get(\"name\") == patternName)\n\t{\n\t\tvariable1 = Map();\n\t\tvariable1.put(\"id\",variable.get(\"id\"));\n\t\tvariable1.put(\"value\",toNumber(variable.get(\"value\")) + 1);\n\t\tvariables_list = List();\n\t\tvariables_list.add(variable1);\n\t\tparam = Map();\n\t\tparam.put(\"variables\",variables_list);\n\t\tresponse = invokeurl\n\t\t[\n\t\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\t\ttype :PUT\n\t\t\tparameters:param.toString()\n\t\t\tconnection:\"crm\"\n\t\t];\n\t\tinfo response;\n\t\tstandalone.zoho_an_update_create_row(\"upd\",patternName,toNumber(variable.get(\"value\")) + 1);\n\t\treturn \"\";\n\t}\n}\nvariable1 = Map();\nvariable1.put(\"name\",patternName);\nvariable1.put(\"api_name\",patternName);\nvariable1.put(\"type\",\"integer\");\nvariable1.put(\"value\",1);\nvariable1.put(\"variable_group\",{\"id\":\"4444945000007544001\"});\nvariables_list = List();\nvariables_list.add(variable1);\nparam = Map();\nparam.put(\"variables\",variables_list);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\ttype :POST\n\tparameters:param.toString()\n\tconnection:\"crm\"\n];\ninfo response;\nstandalone.zoho_an_update_create_row(\"crt\",patternName,1);\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "params": [
                "name"
            ],
            "webhooks": [
                {
                    "connection": "crm",
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                },
                {
                    "connection": "crm",
                    "method": "put",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                },
                {
                    "connection": "crm",
                    "method": "post",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                }
            ]
        },
        "updatedTime": "2024-01-19 04:05:58.0",
        "workflow": "response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\ttype :GET\n\tconnection:\"crm\"\n];\nvariables = response.get(\"variables\");\npatternName = name.toLowerCase().replaceAll(\" \",\"_\");\ninfo patternName;\nfor each  variable in variables\n{\n\tif(variable.get(\"name\") == patternName)\n\t{\n\t\tvariable1 = Map();\n\t\tvariable1.put(\"id\",variable.get(\"id\"));\n\t\tvariable1.put(\"value\",toNumber(variable.get(\"value\")) + 1);\n\t\tvariables_list = List();\n\t\tvariables_list.add(variable1);\n\t\tparam = Map();\n\t\tparam.put(\"variables\",variables_list);\n\t\tresponse = invokeurl\n\t\t[\n\t\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\t\ttype :PUT\n\t\t\tparameters:param.toString()\n\t\t\tconnection:\"crm\"\n\t\t];\n\t\tinfo response;\n\t\tstandalone.zoho_an_update_create_row(\"upd\",patternName,toNumber(variable.get(\"value\")) + 1);\n\t\treturn \"\";\n\t}\n}\nvariable1 = Map();\nvariable1.put(\"name\",patternName);\nvariable1.put(\"api_name\",patternName);\nvariable1.put(\"type\",\"integer\");\nvariable1.put(\"value\",1);\nvariable1.put(\"variable_group\",{\"id\":\"4444945000007544001\"});\nvariables_list = List();\nvariables_list.add(variable1);\nparam = Map();\nparam.put(\"variables\",variables_list);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\ttype :POST\n\tparameters:param.toString()\n\tconnection:\"crm\"\n];\ninfo response;\nstandalone.zoho_an_update_create_row(\"crt\",patternName,1);\nreturn \"\";"
    },
    {
        "api_name": "workflow_test_1",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "workflow_test_1",
        "id": "512029000002363027",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-01-19T14:13:10+01:00",
        "name": "workflow_test_1",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/workflow_test_1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/workflow_test_1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.workflow_test_1()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-01-19 05:13:10.0",
        "workflow": null
    },
    {
        "api_name": "test_embed",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001484001",
                "connectionLinkName": "zsign",
                "connectionName": "zsign",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoSign.account.ALL",
                    "ZohoSign.documents.ALL",
                    "ZohoSign.documents.UPDATE",
                    "ZohoSign.templates.ALL"
                ],
                "serviceName": "zoho_sign",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test_embed",
        "id": "512029000002766001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-09-03T08:28:47+02:00",
        "name": "test_embed",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_embed/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_embed/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_embed()\n{\nresponse = invokeurl\n[\n\turl :\"https://sign.zoho.com/api/v1/requests/175983000000172029/actions/175983000000172035/embedtoken?host=https://sign.zoho.com/\"\n\ttype :post\n\tconnection:\"zsign\"\n];\ninfo response;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zsign",
                    "method": "post",
                    "url": "https://sign.zoho.com/api/v1/requests/175983000000172029/actions/175983000000172035/embedtoken?host=https://sign.zoho.com/"
                }
            ]
        },
        "updatedTime": "2024-09-02 23:28:50.0",
        "workflow": "response = invokeurl\n[\n\turl :\"https://sign.zoho.com/api/v1/requests/175983000000172029/actions/175983000000172035/embedtoken?host=https://sign.zoho.com/\"\n\ttype :post\n\tconnection:\"zsign\"\n];\ninfo response;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "transferRL",
        "id": "512029000002416003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "transferRL",
        "nameSpace": "automation",
        "params": [
            {
                "name": "email",
                "type": "STRING"
            },
            {
                "name": "leadId",
                "type": "BIGINT"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void automation.transferRL(String email, Int leadId)\n{\ncontact = zoho.crm.searchRecords(\"Contacts\",\"(Email:equals:\" + email + \")\");\ncontactId = contact.get(\"id\");\nif(contact != null)\n{\n\tsalesOrders = zoho.crm.getRelatedRecords(\"Sales_Orders\",\"Leads\",leadId);\n\tif(salesOrders.size() > 0)\n\t{\n\t\tfor each  order in salesOrders\n\t\t{\n\t\t\tupdatemap = Map();\n\t\t\tupdatemap.put(\"Contact_Name\",contactId);\n\t\t\tcustoomupdate = zoho.crm.updateRecord(\"Sales_Orders\",order.get(\"id\"),updatemap);\n\t\t\tinfo custoomupdate;\n\t\t}\n\t}\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRelatedRecords",
                    "service": "ZohoCRM"
                }
            ],
            "params": [
                "email",
                "leadId"
            ]
        },
        "updatedTime": "2024-02-12 01:07:15.0",
        "workflow": "contact = zoho.crm.searchRecords(\"Contacts\",\"(Email:equals:\" + email + \")\");\ncontactId = contact.get(\"id\");\nif(contact != null)\n{\n\tsalesOrders = zoho.crm.getRelatedRecords(\"Sales_Orders\",\"Leads\",leadId);\n\tif(salesOrders.size() > 0)\n\t{\n\t\tfor each  order in salesOrders\n\t\t{\n\t\t\tupdatemap = Map();\n\t\t\tupdatemap.put(\"Contact_Name\",contactId);\n\t\t\tcustoomupdate = zoho.crm.updateRecord(\"Sales_Orders\",order.get(\"id\"),updatemap);\n\t\t\tinfo custoomupdate;\n\t\t}\n\t}\n}"
    },
    {
        "api_name": "testardmor",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001275001",
                "connectionLinkName": "zoho_workdrive",
                "connectionName": "zoho_workdrive",
                "isUserDefinedService": "false",
                "scopes": [
                    "WorkDrive.files.ALL",
                    "WorkDrive.files.CREATE",
                    "WorkDrive.files.DELETE",
                    "WorkDrive.files.READ",
                    "WorkDrive.files.UPDATE",
                    "WorkDrive.files.UPDATE ",
                    "WorkDrive.files.sharing.CREATE",
                    "WorkDrive.files.sharing.READ",
                    "WorkDrive.team.ALL",
                    "WorkDrive.teamfolders.CREATE",
                    "WorkDrive.teamfolders.DELETE",
                    "WorkDrive.teamfolders.READ",
                    "WorkDrive.teamfolders.admin.READ",
                    "WorkDrive.users.ALL",
                    "WorkDrive.users.READ",
                    "WorkDrive.workspace.ALL",
                    "Workdrive.files.READ",
                    "ZohoFiles.files.CREATE",
                    "ZohoFiles.files.READ",
                    "ZohoSearch.securesearch.READ"
                ],
                "serviceName": "zoho_workdrive",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test ardmor",
        "id": "512029000002281001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-30T00:35:51+01:00",
        "name": "testardmor",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testardmor/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testardmor/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testardmor()\n{\nfileName = \"123_\" + \"priceList\";\ndecodeFile = zoho.encryption.urlEncode(fileName);\ninfo decodeFile;\n//7uvk842dc943acedd46e8b65e50ebadc25afc\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teams/k2yvj5adcac9666b44afaae52400037071fa7/records?\" + \"search%5Ball%5D=\" + fileName + \"&filter%5BparentId%5D=7uvk80ae72ceda3ae4dab838b085097d86667\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\nfile = response.get(\"data\").get(0);\nif(!file.isNull())\n{\n\theader = Map();\n\theader.put(\"content-type\",\"application/vnd.api+json\");\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://download.zoho.com/v1/workdrive/download/\" + file.get(\"id\")\n\t\ttype :GET\n\t\theaders:header\n\t\tconnection:\"zoho_workdrive\"\n\t];\n\tinfo response;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_workdrive",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_workdrive",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-29 15:35:51.0",
        "workflow": "fileName = \"123_\" + \"priceList\";\ndecodeFile = zoho.encryption.urlEncode(fileName);\ninfo decodeFile;\n//7uvk842dc943acedd46e8b65e50ebadc25afc\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teams/k2yvj5adcac9666b44afaae52400037071fa7/records?\" + \"search%5Ball%5D=\" + fileName + \"&filter%5BparentId%5D=7uvk80ae72ceda3ae4dab838b085097d86667\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\nfile = response.get(\"data\").get(0);\nif(!file.isNull())\n{\n\theader = Map();\n\theader.put(\"content-type\",\"application/vnd.api+json\");\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://download.zoho.com/v1/workdrive/download/\" + file.get(\"id\")\n\t\ttype :GET\n\t\theaders:header\n\t\tconnection:\"zoho_workdrive\"\n\t];\n\tinfo response;\n}"
    },
    {
        "api_name": "workflow2",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "workflow2",
        "id": "512029000002366013",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-01-19T13:41:22+01:00",
        "name": "workflow2",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/workflow2/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/workflow2/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.workflow2()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-01-19 04:41:22.0",
        "workflow": null
    },
    {
        "api_name": "oz_parus_dont_edit",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "OZ_Parus (DONT EDIT PLEASE)",
        "id": "512029000002842001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-10-14T23:32:31+02:00",
        "name": "OZ_Parus_DONT_EDIT",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/oz_parus_dont_edit/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/oz_parus_dont_edit/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.OZ_Parus_DONT_EDIT()\n{\ninfo zoho.crm.getRecordById(\"Sales_Orders\",\"4444945000028891033\");\nreturn \"\";\n// //COntact Profits\n// contactId = \"\";\n// relatedContacts = zoho.crm.getRelatedRecords(\"relation\", \"Contacts\", contactId);\n// amountSum = 0;\n// for each relatedContact in relatedContacts\n// {\n// \tinvoices = zoho.crm.getRelatedRecords(\"Invoices\", \"Contacts\", relatedContact.get(\"id\"));\n// \tfor each invoice in invoices\n//     {\n// \t\tamountSum = amountSum + invoice.get(\"Grand_Total\");\n//     }\n// }\n// toUpdate = Map();\n// toUpdate.put(\"field\", amountSum);\n// toUpdate.put(\"id\", contactId);\n// zoho.crm.updateRecord(\"Contacts\", contactId, toUpdate, {\"trigger\": {\"workflow\"}});\n// //Create Contact in books\n// contact = zoho.crm.getRecordById(\"Contacts\", contactId);\n// billingData = Map();\n// billingData.put(\"address\", contact.get(\"Mailing_Street\"));\n// billingData.put(\"state\", contact.get(\"Mailing_State\"));\n// billingData.put(\"city\", contact.get(\"Mailing_City\"));\n// billingData.put(\"zip\", contact.get(\"Mailing_Zip\"));\n// billingData.put(\"country\", contact.get(\"Mailing_Countr\"));\n// billingData.put(\"phone\", contact.get(\"Phone\"));\n// contactData = Map();\n// contactData.put(\"contact_name\", contact.get(\"First_Name\") + \" \" + contact.get(\"Last_Name\"));\n// contactData.put(\"company\", contact.get(\"Company\"));\n// contactData.put(\"contact_type\", \"customer\");\n// contactData.put(\"contact_type\", \"business\");\n// contactData.put(\"billing_address\", billingData);\n// contactData.put(\"shipping_address\", billingData);\n// response = invokeUrl\n// [\n// url: \"https://www.zohoapis.com/books/v3/contacts?organization_id=10234695\"\n// type: POST\n// content-type: application/json\n// parameters: contactData\n// connection: \"zoho_books\"\n// ];\n// info response;\n// //Create Sales Order in books\n// order = zoho.crm.getRecordById(\"Sales_Orders\", orderId);\n// soItems = List();\n// for each productItem in order.get(\"Product_Details\")\n// {\n// \tproduct = zoho.crm.getRecordById(\"Products\", productItem.get(\"product\").get(\"id\"));\n// \tproductData = Map();\n// \tproductData.put(\"item_id\", product.get(\"Books_Id\"));\n// \tproductData.put(\"rate\", productItem.get(\"list_price\"));\n// \tproductData.put(\"name\", productItem.get(\"product\").get(\"name\"));\n// \tproductData.put(\"description\", product.get(\"Description\"));\n// \tproductData.put(\"quantity\", productItem.get(\"quantity\"));\n// \tproductData.put(\"product_type\", \"goods\");\n// \tsoItems.add(productData);\n// }\n// orderData = Map();\n// orderData.put(\"customer_id\", order.get(\"Books_Id\"));\n// orderData.put(\"date\", order.get(\"Booking_Date\"));\n// orderData.put(\"crm_custom_reference_id\", order.get(\"id\"));\n// orderData.put(\"salesorder_number\", order.get(\"SO_Number\"));\n// orderData.put(\"line_items\", soItems);\n// response = invokeUrl\n// [\n// url: \"https://www.zohoapis.com/books/v3/salesorders?organization_id=10234695\"\n// type: POST\n// content-type: application/json\n// parameters: contactData\n// connection: \"zoho_books\"\n// ];\n// info response;\n// //Create Invoices in books\n// invoice = zoho.crm.getRecordById(\"Invoices\", invoiceId);\n// invoiceItems = List();\n// for each productItem in order.get(\"Product_Details\")\n// {\n// \tproduct = zoho.crm.getRecordById(\"Products\", productItem.get(\"product\").get(\"id\"));\n// \tproductData = Map();\n// \tproductData.put(\"item_id\", product.get(\"Books_Id\"));\n// \tproductData.put(\"rate\", productItem.get(\"list_price\"));\n// \tproductData.put(\"name\", productItem.get(\"product\").get(\"name\"));\n// \tproductData.put(\"description\", product.get(\"Description\"));\n// \tproductData.put(\"quantity\", productItem.get(\"quantity\"));\n// \tproductData.put(\"product_type\", \"goods\");\n// \tinvoiceItems.add(productData);\n// }\n// invoiceData = Map();\n// invoiceData.put(\"customer_id\", invoice.get(\"Books_Id\"));\n// invoiceData.put(\"date\", invoice.get(\"Booking_Date\"));\n// invoiceData.put(\"crm_custom_reference_id\", invoice.get(\"id\"));\n// invoiceData.put(\"invoice_number\", invoice.get(\"Number\"));\n// invoiceData.put(\"allow_partial_payments\", true);\n// invoiceData.put(\"salesorder_item_id\", invoice.get(\"Sales_Order\"));\n// invoiceData.put(\"due_date\", invoice.get(\"Booking_Date\"));\n// invoiceData.put(\"line_items\", invoiceItems);\n// response = invokeUrl\n// [\n// url: \"https://www.zohoapis.com/books/v3/salesorders?organization_id=10234695\"\n// type: POST\n// content-type: application/json\n// parameters: invoiceData\n// connection: \"zoho_books\"\n// ];\n// info response;\n// return \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-10-14 14:32:32.0",
        "workflow": "info zoho.crm.getRecordById(\"Sales_Orders\",\"4444945000028891033\");\nreturn \"\";\n// //COntact Profits\n// contactId = \"\";\n// relatedContacts = zoho.crm.getRelatedRecords(\"relation\", \"Contacts\", contactId);\n// amountSum = 0;\n// for each relatedContact in relatedContacts\n// {\n// \tinvoices = zoho.crm.getRelatedRecords(\"Invoices\", \"Contacts\", relatedContact.get(\"id\"));\n// \tfor each invoice in invoices\n//     {\n// \t\tamountSum = amountSum + invoice.get(\"Grand_Total\");\n//     }\n// }\n// toUpdate = Map();\n// toUpdate.put(\"field\", amountSum);\n// toUpdate.put(\"id\", contactId);\n// zoho.crm.updateRecord(\"Contacts\", contactId, toUpdate, {\"trigger\": {\"workflow\"}});\n// //Create Contact in books\n// contact = zoho.crm.getRecordById(\"Contacts\", contactId);\n// billingData = Map();\n// billingData.put(\"address\", contact.get(\"Mailing_Street\"));\n// billingData.put(\"state\", contact.get(\"Mailing_State\"));\n// billingData.put(\"city\", contact.get(\"Mailing_City\"));\n// billingData.put(\"zip\", contact.get(\"Mailing_Zip\"));\n// billingData.put(\"country\", contact.get(\"Mailing_Countr\"));\n// billingData.put(\"phone\", contact.get(\"Phone\"));\n// contactData = Map();\n// contactData.put(\"contact_name\", contact.get(\"First_Name\") + \" \" + contact.get(\"Last_Name\"));\n// contactData.put(\"company\", contact.get(\"Company\"));\n// contactData.put(\"contact_type\", \"customer\");\n// contactData.put(\"contact_type\", \"business\");\n// contactData.put(\"billing_address\", billingData);\n// contactData.put(\"shipping_address\", billingData);\n// response = invokeUrl\n// [\n// url: \"https://www.zohoapis.com/books/v3/contacts?organization_id=10234695\"\n// type: POST\n// content-type: application/json\n// parameters: contactData\n// connection: \"zoho_books\"\n// ];\n// info response;\n// //Create Sales Order in books\n// order = zoho.crm.getRecordById(\"Sales_Orders\", orderId);\n// soItems = List();\n// for each productItem in order.get(\"Product_Details\")\n// {\n// \tproduct = zoho.crm.getRecordById(\"Products\", productItem.get(\"product\").get(\"id\"));\n// \tproductData = Map();\n// \tproductData.put(\"item_id\", product.get(\"Books_Id\"));\n// \tproductData.put(\"rate\", productItem.get(\"list_price\"));\n// \tproductData.put(\"name\", productItem.get(\"product\").get(\"name\"));\n// \tproductData.put(\"description\", product.get(\"Description\"));\n// \tproductData.put(\"quantity\", productItem.get(\"quantity\"));\n// \tproductData.put(\"product_type\", \"goods\");\n// \tsoItems.add(productData);\n// }\n// orderData = Map();\n// orderData.put(\"customer_id\", order.get(\"Books_Id\"));\n// orderData.put(\"date\", order.get(\"Booking_Date\"));\n// orderData.put(\"crm_custom_reference_id\", order.get(\"id\"));\n// orderData.put(\"salesorder_number\", order.get(\"SO_Number\"));\n// orderData.put(\"line_items\", soItems);\n// response = invokeUrl\n// [\n// url: \"https://www.zohoapis.com/books/v3/salesorders?organization_id=10234695\"\n// type: POST\n// content-type: application/json\n// parameters: contactData\n// connection: \"zoho_books\"\n// ];\n// info response;\n// //Create Invoices in books\n// invoice = zoho.crm.getRecordById(\"Invoices\", invoiceId);\n// invoiceItems = List();\n// for each productItem in order.get(\"Product_Details\")\n// {\n// \tproduct = zoho.crm.getRecordById(\"Products\", productItem.get(\"product\").get(\"id\"));\n// \tproductData = Map();\n// \tproductData.put(\"item_id\", product.get(\"Books_Id\"));\n// \tproductData.put(\"rate\", productItem.get(\"list_price\"));\n// \tproductData.put(\"name\", productItem.get(\"product\").get(\"name\"));\n// \tproductData.put(\"description\", product.get(\"Description\"));\n// \tproductData.put(\"quantity\", productItem.get(\"quantity\"));\n// \tproductData.put(\"product_type\", \"goods\");\n// \tinvoiceItems.add(productData);\n// }\n// invoiceData = Map();\n// invoiceData.put(\"customer_id\", invoice.get(\"Books_Id\"));\n// invoiceData.put(\"date\", invoice.get(\"Booking_Date\"));\n// invoiceData.put(\"crm_custom_reference_id\", invoice.get(\"id\"));\n// invoiceData.put(\"invoice_number\", invoice.get(\"Number\"));\n// invoiceData.put(\"allow_partial_payments\", true);\n// invoiceData.put(\"salesorder_item_id\", invoice.get(\"Sales_Order\"));\n// invoiceData.put(\"due_date\", invoice.get(\"Booking_Date\"));\n// invoiceData.put(\"line_items\", invoiceItems);\n// response = invokeUrl\n// [\n// url: \"https://www.zohoapis.com/books/v3/salesorders?organization_id=10234695\"\n// type: POST\n// content-type: application/json\n// parameters: invoiceData\n// connection: \"zoho_books\"\n// ];\n// info response;\n// return \"\";"
    },
    {
        "api_name": "null",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_contact_$KEY$Contacts.ID",
                        "value": "Contacts.Contact Id"
                    }
                ],
                "id": 4444945000039870500,
                "isOldDataNeeded": false,
                "module": "Contacts",
                "name": "updateCrmContactsToShopify",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "ShopifyWFContact",
        "id": "512029000002846001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-10-17T14:59:36+02:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "workflow_test_11",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "name",
                        "value": "workflow_test_1"
                    }
                ],
                "id": 4444945000031706000,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "workflow_test_1",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000002360001",
                "connectionLinkName": "crm",
                "connectionName": "crm",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.calls.CREATE",
                    "ZohoCRM.modules.calls.READ",
                    "ZohoCRM.modules.notes.ALL",
                    "ZohoCRM.modules.zoho_projects.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.send_mail.ALL.CREATE",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.emails.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.fields.READ",
                    "ZohoCRM.settings.layouts.READ",
                    "ZohoCRM.settings.layouts.read",
                    "ZohoCRM.settings.modules.READ",
                    "ZohoCRM.settings.related_lists.all",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "workflow_test_1",
        "id": "512029000002366018",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-01-19T14:15:00+01:00",
        "name": "workflow_test_11",
        "nameSpace": "automation",
        "params": [
            {
                "name": "name",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/workflow_test_11/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/workflow_test_11/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.workflow_test_11(String name)\n{\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\ttype :GET\n\tconnection:\"crm\"\n];\nvariables = response.get(\"variables\");\npatternName = name.toLowerCase().replaceAll(\" \",\"_\");\ninfo patternName;\nexist = false;\nfor each  variable in variables\n{\n\tif(variable.get(\"name\") == patternName)\n\t{\n\t\tvariable1 = Map();\n\t\tvariable1.put(\"id\",variable.get(\"id\"));\n\t\tvariable1.put(\"value\",toNumber(variable.get(\"value\")) + 1);\n\t\tvariables_list = List();\n\t\tvariables_list.add(variable1);\n\t\tparam = Map();\n\t\tparam.put(\"variables\",variables_list);\n\t\tresponse = invokeurl\n\t\t[\n\t\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\t\ttype :PUT\n\t\t\tparameters:param.toString()\n\t\t\tconnection:\"crm\"\n\t\t];\n\t\tinfo response;\n\t\tstandalone.zoho_an_update_create_row(\"upd\",patternName,toNumber(variable.get(\"value\")) + 1);\n\t\texist = true;\n\t}\n}\nif(!exist)\n{\n\tvariable1 = Map();\n\tvariable1.put(\"name\",patternName);\n\tvariable1.put(\"api_name\",patternName);\n\tvariable1.put(\"type\",\"integer\");\n\tvariable1.put(\"value\",1);\n\tvariable1.put(\"variable_group\",{\"id\":\"4444945000007544001\"});\n\tvariables_list = List();\n\tvariables_list.add(variable1);\n\tparam = Map();\n\tparam.put(\"variables\",variables_list);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\ttype :POST\n\t\tparameters:param.toString()\n\t\tconnection:\"crm\"\n\t];\n\tinfo response;\n\tstandalone.zoho_an_update_create_row(\"crt\",patternName,1);\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "params": [
                "name"
            ],
            "webhooks": [
                {
                    "connection": "crm",
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                },
                {
                    "connection": "crm",
                    "method": "put",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                },
                {
                    "connection": "crm",
                    "method": "post",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                }
            ]
        },
        "updatedTime": "2024-01-19 05:15:00.0",
        "workflow": "response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\ttype :GET\n\tconnection:\"crm\"\n];\nvariables = response.get(\"variables\");\npatternName = name.toLowerCase().replaceAll(\" \",\"_\");\ninfo patternName;\nexist = false;\nfor each  variable in variables\n{\n\tif(variable.get(\"name\") == patternName)\n\t{\n\t\tvariable1 = Map();\n\t\tvariable1.put(\"id\",variable.get(\"id\"));\n\t\tvariable1.put(\"value\",toNumber(variable.get(\"value\")) + 1);\n\t\tvariables_list = List();\n\t\tvariables_list.add(variable1);\n\t\tparam = Map();\n\t\tparam.put(\"variables\",variables_list);\n\t\tresponse = invokeurl\n\t\t[\n\t\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\t\ttype :PUT\n\t\t\tparameters:param.toString()\n\t\t\tconnection:\"crm\"\n\t\t];\n\t\tinfo response;\n\t\tstandalone.zoho_an_update_create_row(\"upd\",patternName,toNumber(variable.get(\"value\")) + 1);\n\t\texist = true;\n\t}\n}\nif(!exist)\n{\n\tvariable1 = Map();\n\tvariable1.put(\"name\",patternName);\n\tvariable1.put(\"api_name\",patternName);\n\tvariable1.put(\"type\",\"integer\");\n\tvariable1.put(\"value\",1);\n\tvariable1.put(\"variable_group\",{\"id\":\"4444945000007544001\"});\n\tvariables_list = List();\n\tvariables_list.add(variable1);\n\tparam = Map();\n\tparam.put(\"variables\",variables_list);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\ttype :POST\n\t\tparameters:param.toString()\n\t\tconnection:\"crm\"\n\t];\n\tinfo response;\n\tstandalone.zoho_an_update_create_row(\"crt\",patternName,1);\n}"
    },
    {
        "api_name": "shopifytocrmv2__oz_shopify_insertrecord",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_shopify_insertRecord",
        "id": "512029000002606014",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_insertrecord/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_insertrecord/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "openbookspayment",
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [],
                "id": "4444945000032447175",
                "module": "Contacts",
                "name": "open payment"
            }
        ],
        "category": "button",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000002062001",
                "connectionLinkName": "zoho_books",
                "connectionName": "zoho_books",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoBooks.fullaccess.all",
                    "ZohoBooks.settings.READ"
                ],
                "serviceName": "zoho_books",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "openBooksPayment",
        "id": "512029000002432001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-02-19T14:39:43+01:00",
        "name": "openBooksPayment",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/openbookspayment/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/openbookspayment/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.openBooksPayment()\n{\nname = \"Михаил Попов\";\nsearchParam = {\"contact_name\":name,\"contact_type\":\"customer\"};\nresponse = zoho.books.getRecords(\"Contacts\",\"713248035\",searchParam,\"zoho_books\");\nbookContactID = response.get(\"contacts\").get(0).get(\"contact_id\");\ninfo bookContactID;\nsearchParam = {\"customer_id\":bookContactID};\nresponse2 = zoho.books.getRecords(\"invoices\",\"713248035\",searchParam,\"zoho_books\");\nunpaidInvoices = List();\nfor each  invoice in response2.get(\"invoices\")\n{\n\tif(invoice.get(\"status\") != \"paid\")\n\t{\n\t\tunpaidInvoices.add(invoice);\n\t}\n}\nresultInvoice = unpaidInvoices.get(0);\ninfo resultInvoice;\nfor each  invoice2 in unpaidInvoices\n{\n\tif(invoice2.get(\"date\").toDate() < resultInvoice.get(\"date\").toDate())\n\t{\n\t\tresultInvoice = invoice2;\n\t}\n}\ninfo resultInvoice.get(\"invoice_id\");\nopenUrl(\"https://books.zoho.com/app/713248035#/invoices/\" + resultInvoice.get(\"invoice_id\") + \"/payment\",\"new window\");\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "zoho_books",
                    "display_name": "Zoho Books",
                    "function": "zoho.books.getRecords",
                    "service": "ZohoBooks"
                }
            ],
            "webhooks": [
                {
                    "method": "open",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-02-19 05:39:44.0",
        "workflow": "name = \"Михаил Попов\";\nsearchParam = {\"contact_name\":name,\"contact_type\":\"customer\"};\nresponse = zoho.books.getRecords(\"Contacts\",\"713248035\",searchParam,\"zoho_books\");\nbookContactID = response.get(\"contacts\").get(0).get(\"contact_id\");\ninfo bookContactID;\nsearchParam = {\"customer_id\":bookContactID};\nresponse2 = zoho.books.getRecords(\"invoices\",\"713248035\",searchParam,\"zoho_books\");\nunpaidInvoices = List();\nfor each  invoice in response2.get(\"invoices\")\n{\n\tif(invoice.get(\"status\") != \"paid\")\n\t{\n\t\tunpaidInvoices.add(invoice);\n\t}\n}\nresultInvoice = unpaidInvoices.get(0);\ninfo resultInvoice;\nfor each  invoice2 in unpaidInvoices\n{\n\tif(invoice2.get(\"date\").toDate() < resultInvoice.get(\"date\").toDate())\n\t{\n\t\tresultInvoice = invoice2;\n\t}\n}\ninfo resultInvoice.get(\"invoice_id\");\nopenUrl(\"https://books.zoho.com/app/713248035#/invoices/\" + resultInvoice.get(\"invoice_id\") + \"/payment\",\"new window\");\nreturn \"\";"
    },
    {
        "api_name": "generateinoice",
        "associated_place": [
            {
                "_type": "automation_action",
                "arguments": null,
                "id": "4444945000032771022",
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "generateInvoice"
            }
        ],
        "category": "automation",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000002062001",
                "connectionLinkName": "zoho_books",
                "connectionName": "zoho_books",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoBooks.fullaccess.all",
                    "ZohoBooks.settings.READ"
                ],
                "serviceName": "zoho_books",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "generateInvoice",
        "id": "512029000002459005",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-03-02T19:39:05+01:00",
        "name": "generateInoice",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/generateinoice/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/generateinoice/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.generateInoice()\n{\nleadId = \"4444945000032280009\";\nlead = zoho.crm.getRecordById(\"Leads\",leadId);\norgID = \"713248035\";\nemail = lead.get(\"Email\");\nleadName = lead.get(\"Full_Name\");\nsearchParam = {\"email\":email,\"contact_type\":\"customer\"};\nresponse = zoho.books.getRecords(\"Contacts\",orgID,searchParam,\"zoho_books\");\nif(response.containsKey(\"contacts\") == false || response.get(\"contacts\").size() == 0)\n{\n\treturn;\n}\ninfo response.get(\"contacts\").get(0).get(\"contact_id\");\ncontact = zoho.books.getRecordsByID(\"Contacts\",orgID,response.get(\"contacts\").get(0).get(\"contact_id\"),\"zoho_books\");\ncontactPersonId = contact.get(\"contact\").get(\"primary_contact_id\");\ncontactId = response.get(\"contacts\").get(0).get(\"contact_id\");\ninfo contactId;\nrelatedPrograms = zoho.crm.getRelatedRecords(\"Products\",\"Leads\",leadId);\nif(relatedPrograms.size() == 0)\n{\n\treturn;\n}\nprogram = relatedPrograms.get(0);\nprogramName = program.get(\"Product_Name\");\nprogramCost = program.get(\"Program_Cost\");\namount = program.get(\"Deposit_Amount\");\ninvoiceMap = Map();\ninvoiceMap.put(\"customer_id\",contactId);\nitemList = List();\nitemMap = Map();\nitemMap.put(\"description\",\"programName\");\nitemMap.put(\"rate\",10000);\nitemList.add(itemMap);\ninvoiceMap.put(\"line_items\",itemList);\ncontactPersonsList = List();\ncontactPersonsList.add(contactPersonId);\ninvoiceMap.put(\"contact_persons\",contactPersonsList);\ninvoiceMap.put(\"template_id\",2234095000000030003);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/books/v3/retainerinvoices?organization_id=\" + orgID\n\ttype :POST\n\tparameters:invoiceMap.toString()\n\tconnection:\"zoho_books\"\n];\ninfo \"------------\";\ninfo response;\ninfo \"------------\";\nif(response.containsKey(\"retainerinvoice\") == false)\n{\n\treturn;\n}\ninvoiceId = response.get(\"retainerinvoice\").get(\"retainerinvoice_id\");\nleadMap = Map();\nleadMap.put(\"Invoice_Link\",\"https://books.zoho.com/app/\" + orgID + \"#/retainerinvoices/\" + invoiceId);\nleadMap.put(\"retainerinvoice_id\",invoiceId);\ninfo zoho.crm.updateRecord(\"Leads\",leadId,leadMap);\ninvoiceId = 2234095000017170011;\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/books/v3/retainerinvoices/\" + invoiceId + \"/email?organization_id=\" + orgID\n\ttype :GET\n\tconnection:\"zoho_books\"\n];\nemailSubject = response.get(\"data\").get(\"subject\");\nbody = response.get(\"data\").get(\"body\");\ntoList = List();\ntoList.add(email);\ntoMap = Map();\ntoMap.put(\"to_mail_ids\",toList);\ntoMap.put(\"subject\",emailSubject);\ntoMap.put(\"body\",body);\ninfo toMap;\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/books/v3/retainerinvoices/\" + invoiceId + \"/email?organization_id=\" + orgID + \"&send_attachment=true&attachments=true&send_customer_statement=true\"\n\ttype :POST\n\tparameters:toMap.toString()\n\tconnection:\"zoho_books\"\n\tcontent-type:\"application/json\"\n];\ninfo \"---------\";\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "zoho_books",
                    "display_name": "Zoho Books",
                    "function": "zoho.books.getRecords",
                    "service": "ZohoBooks"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                },
                {
                    "connection": "zoho_books",
                    "display_name": "Zoho Books",
                    "function": "zoho.books.getRecordsByID",
                    "service": "ZohoBooks"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRelatedRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "zoho_books",
                    "method": "post",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_books",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_books",
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-03-02 10:39:05.0",
        "workflow": "leadId = \"4444945000032280009\";\nlead = zoho.crm.getRecordById(\"Leads\",leadId);\norgID = \"713248035\";\nemail = lead.get(\"Email\");\nleadName = lead.get(\"Full_Name\");\nsearchParam = {\"email\":email,\"contact_type\":\"customer\"};\nresponse = zoho.books.getRecords(\"Contacts\",orgID,searchParam,\"zoho_books\");\nif(response.containsKey(\"contacts\") == false || response.get(\"contacts\").size() == 0)\n{\n\treturn;\n}\ninfo response.get(\"contacts\").get(0).get(\"contact_id\");\ncontact = zoho.books.getRecordsByID(\"Contacts\",orgID,response.get(\"contacts\").get(0).get(\"contact_id\"),\"zoho_books\");\ncontactPersonId = contact.get(\"contact\").get(\"primary_contact_id\");\ncontactId = response.get(\"contacts\").get(0).get(\"contact_id\");\ninfo contactId;\nrelatedPrograms = zoho.crm.getRelatedRecords(\"Products\",\"Leads\",leadId);\nif(relatedPrograms.size() == 0)\n{\n\treturn;\n}\nprogram = relatedPrograms.get(0);\nprogramName = program.get(\"Product_Name\");\nprogramCost = program.get(\"Program_Cost\");\namount = program.get(\"Deposit_Amount\");\ninvoiceMap = Map();\ninvoiceMap.put(\"customer_id\",contactId);\nitemList = List();\nitemMap = Map();\nitemMap.put(\"description\",\"programName\");\nitemMap.put(\"rate\",10000);\nitemList.add(itemMap);\ninvoiceMap.put(\"line_items\",itemList);\ncontactPersonsList = List();\ncontactPersonsList.add(contactPersonId);\ninvoiceMap.put(\"contact_persons\",contactPersonsList);\ninvoiceMap.put(\"template_id\",2234095000000030003);\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/books/v3/retainerinvoices?organization_id=\" + orgID\n\ttype :POST\n\tparameters:invoiceMap.toString()\n\tconnection:\"zoho_books\"\n];\ninfo \"------------\";\ninfo response;\ninfo \"------------\";\nif(response.containsKey(\"retainerinvoice\") == false)\n{\n\treturn;\n}\ninvoiceId = response.get(\"retainerinvoice\").get(\"retainerinvoice_id\");\nleadMap = Map();\nleadMap.put(\"Invoice_Link\",\"https://books.zoho.com/app/\" + orgID + \"#/retainerinvoices/\" + invoiceId);\nleadMap.put(\"retainerinvoice_id\",invoiceId);\ninfo zoho.crm.updateRecord(\"Leads\",leadId,leadMap);\ninvoiceId = 2234095000017170011;\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/books/v3/retainerinvoices/\" + invoiceId + \"/email?organization_id=\" + orgID\n\ttype :GET\n\tconnection:\"zoho_books\"\n];\nemailSubject = response.get(\"data\").get(\"subject\");\nbody = response.get(\"data\").get(\"body\");\ntoList = List();\ntoList.add(email);\ntoMap = Map();\ntoMap.put(\"to_mail_ids\",toList);\ntoMap.put(\"subject\",emailSubject);\ntoMap.put(\"body\",body);\ninfo toMap;\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/books/v3/retainerinvoices/\" + invoiceId + \"/email?organization_id=\" + orgID + \"&send_attachment=true&attachments=true&send_customer_statement=true\"\n\ttype :POST\n\tparameters:toMap.toString()\n\tconnection:\"zoho_books\"\n\tcontent-type:\"application/json\"\n];\ninfo \"---------\";\ninfo response;"
    },
    {
        "api_name": "shopifytocrmv2__oz_shopify_searchrecords",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_shopify_searchRecords",
        "id": "512029000002625008",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_searchrecords/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_searchrecords/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "emailandphonechecker__setrequestslimitapi",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "setRequestsLimitAPI",
        "id": "512029000002266001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-17T14:24:46+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/emailandphonechecker__setrequestslimitapi/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/emailandphonechecker__setrequestslimitapi/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "tes_1",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "te",
        "id": "512029000002616028",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-21T10:36:34+02:00",
        "name": "tes",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/tes_1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/tes_1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.tes()\n{\nInvSum = 9081.894150418;\nPaymSum = 9081.89;\nTotal = InvSum - PaymSum;\ninfo Total;\ninfo Total < 0;\nif(Total < 0)\n{\n\tbalance = Total.abs();\n\tinfo balance;\n}\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-05-21 01:36:36.0",
        "workflow": "InvSum = 9081.894150418;\nPaymSum = 9081.89;\nTotal = InvSum - PaymSum;\ninfo Total;\ninfo Total < 0;\nif(Total < 0)\n{\n\tbalance = Total.abs();\n\tinfo balance;\n}\nreturn \"\";"
    },
    {
        "api_name": "fgdfg",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "dfgdfg",
        "id": "512029000002708001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-07-11T10:03:14+02:00",
        "name": "fgdfg",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/fgdfg/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/fgdfg/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.fgdfg()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-07-11 01:03:15.0",
        "workflow": null
    },
    {
        "api_name": "workflow21",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "name",
                        "value": "workflow2"
                    }
                ],
                "id": 4444945000031682600,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "Workflow2",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "512029000002360001",
                "connectionLinkName": "crm",
                "connectionName": "crm",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.calls.CREATE",
                    "ZohoCRM.modules.calls.READ",
                    "ZohoCRM.modules.notes.ALL",
                    "ZohoCRM.modules.zoho_projects.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.send_mail.ALL.CREATE",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.emails.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.fields.READ",
                    "ZohoCRM.settings.layouts.READ",
                    "ZohoCRM.settings.layouts.read",
                    "ZohoCRM.settings.modules.READ",
                    "ZohoCRM.settings.related_lists.all",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "workflow2",
        "id": "512029000002358046",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-01-19T14:06:34+01:00",
        "name": "workflow21",
        "nameSpace": "automation",
        "params": [
            {
                "name": "name",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/workflow21/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/workflow21/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.workflow21(String name)\n{\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\ttype :GET\n\tconnection:\"crm\"\n];\nvariables = response.get(\"variables\");\npatternName = name.toLowerCase().replaceAll(\" \",\"_\");\ninfo patternName;\nexist = false;\nfor each  variable in variables\n{\n\tif(variable.get(\"name\") == patternName)\n\t{\n\t\tvariable1 = Map();\n\t\tvariable1.put(\"id\",variable.get(\"id\"));\n\t\tvariable1.put(\"value\",toNumber(variable.get(\"value\")) + 1);\n\t\tvariables_list = List();\n\t\tvariables_list.add(variable1);\n\t\tparam = Map();\n\t\tparam.put(\"variables\",variables_list);\n\t\tresponse = invokeurl\n\t\t[\n\t\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\t\ttype :PUT\n\t\t\tparameters:param.toString()\n\t\t\tconnection:\"crm\"\n\t\t];\n\t\tinfo response;\n\t\tstandalone.zoho_an_update_create_row(\"upd\",patternName,toNumber(variable.get(\"value\")) + 1);\n\t\texist = true;\n\t}\n}\nif(!exist)\n{\n\tvariable1 = Map();\n\tvariable1.put(\"name\",patternName);\n\tvariable1.put(\"api_name\",patternName);\n\tvariable1.put(\"type\",\"integer\");\n\tvariable1.put(\"value\",1);\n\tvariable1.put(\"variable_group\",{\"id\":\"4444945000007544001\"});\n\tvariables_list = List();\n\tvariables_list.add(variable1);\n\tparam = Map();\n\tparam.put(\"variables\",variables_list);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\ttype :POST\n\t\tparameters:param.toString()\n\t\tconnection:\"crm\"\n\t];\n\tinfo response;\n\tstandalone.zoho_an_update_create_row(\"crt\",patternName,1);\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "params": [
                "name"
            ],
            "webhooks": [
                {
                    "connection": "crm",
                    "method": "get",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                },
                {
                    "connection": "crm",
                    "method": "put",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                },
                {
                    "connection": "crm",
                    "method": "post",
                    "url": "https://www.zohoapis.com/crm/v6/settings/variables"
                }
            ]
        },
        "updatedTime": "2024-01-19 05:06:35.0",
        "workflow": "response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\ttype :GET\n\tconnection:\"crm\"\n];\nvariables = response.get(\"variables\");\npatternName = name.toLowerCase().replaceAll(\" \",\"_\");\ninfo patternName;\nexist = false;\nfor each  variable in variables\n{\n\tif(variable.get(\"name\") == patternName)\n\t{\n\t\tvariable1 = Map();\n\t\tvariable1.put(\"id\",variable.get(\"id\"));\n\t\tvariable1.put(\"value\",toNumber(variable.get(\"value\")) + 1);\n\t\tvariables_list = List();\n\t\tvariables_list.add(variable1);\n\t\tparam = Map();\n\t\tparam.put(\"variables\",variables_list);\n\t\tresponse = invokeurl\n\t\t[\n\t\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\t\ttype :PUT\n\t\t\tparameters:param.toString()\n\t\t\tconnection:\"crm\"\n\t\t];\n\t\tinfo response;\n\t\tstandalone.zoho_an_update_create_row(\"upd\",patternName,toNumber(variable.get(\"value\")) + 1);\n\t\texist = true;\n\t}\n}\nif(!exist)\n{\n\tvariable1 = Map();\n\tvariable1.put(\"name\",patternName);\n\tvariable1.put(\"api_name\",patternName);\n\tvariable1.put(\"type\",\"integer\");\n\tvariable1.put(\"value\",1);\n\tvariable1.put(\"variable_group\",{\"id\":\"4444945000007544001\"});\n\tvariables_list = List();\n\tvariables_list.add(variable1);\n\tparam = Map();\n\tparam.put(\"variables\",variables_list);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://www.zohoapis.com/crm/v6/settings/variables\"\n\t\ttype :POST\n\t\tparameters:param.toString()\n\t\tconnection:\"crm\"\n\t];\n\tinfo response;\n\tstandalone.zoho_an_update_create_row(\"crt\",patternName,1);\n}"
    },
    {
        "api_name": "test2314412421",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "test2314412421",
        "id": "512029000002358001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-01-19T09:57:32+01:00",
        "name": "test2314412421",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test2314412421/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test2314412421/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test2314412421()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-01-19 00:57:33.0",
        "workflow": null
    },
    {
        "api_name": "test12_1",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000048511873",
                "connectionLinkName": "kits",
                "connectionName": "kits",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoProjects.projects.ALL",
                    "ZohoProjects.milestones.ALL",
                    "ZohoProjects.tasklists.ALL",
                    "ZohoProjects.tasks.ALL",
                    "ZohoProjects.timesheets.ALL",
                    "ZohoProjects.bugs.ALL",
                    "ZohoProjects.events.ALL",
                    "ZohoProjects.forums.ALL",
                    "ZohoProjects.tags.ALL",
                    "ZohoProjects.status.ALL",
                    "ZohoProjects.extension_properties.ALL",
                    "ZohoProjects.entity_properties.ALL",
                    "ZohoProjects.users.ALL",
                    "ZohoProjects.clients.ALL",
                    "ZohoProjects.portals.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test",
        "id": "512029000002803001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-09-25T12:50:03+02:00",
        "name": "test12",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test12_1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test12_1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test12()\n{\ndata = Map();\ndata = {\"UDF_CHAR2\":\"ffas\"};\nff = invokeurl\n[\n\turl :\"https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/1590562000004378005/\"\n\ttype :POST\n\tparameters:data\n\tconnection:\"kits\"\n];\ninfo ff;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "kits",
                    "method": "post",
                    "url": "https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/1590562000004378005/"
                }
            ]
        },
        "updatedTime": "2024-09-25 03:50:05.0",
        "workflow": "data = Map();\ndata = {\"UDF_CHAR2\":\"ffas\"};\nff = invokeurl\n[\n\turl :\"https://projectsapi.zoho.com/restapi/portal/crmoztest/projects/1590562000004378005/\"\n\ttype :POST\n\tparameters:data\n\tconnection:\"kits\"\n];\ninfo ff;"
    },
    {
        "api_name": "shopifytocrmv2__oz_shopify_getrecords",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_shopify_getRecords",
        "id": "512029000002607019",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_getrecords/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_getrecords/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002845001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function25",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function25(map installParamMap)\n{\nm = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\nresMap = resp.get(\"response\").toMap();\norg = resMap.get(\"org\").toMap();\nzsoid = org.get(\"zgid\");\nzuid = org.get(\"primary_zuid\");\nparam_info = Map();\nparam_info.put(\"zsoid\",zsoid);\nparam_info.put(\"zuid\",zuid);\nparam_info.put(\"extension\",\"Shopify\");\n// Supply the URL and parameters to the invoke URL task\n/*\nsubdomain = zoho.crm.getOrgVariable(\"shopifyextension__sy_subdomain\");\naccessToken = zoho.crm.getOrgVariable(\"shopifyextension__Shopify_Access_Token\");\nisAccessTokenSupport = false;\nif(accessToken != null)\n{\n\tisAccessTokenSupport = true;\n}\nif(isAccessTokenSupport)\n{\n\turl = \"https://\" + subdomain + \".myshopify.com/admin/webhooks.json\";\n\tauthtoken = accessToken;\n\ttestparams = Map();\n\ttestparams.put(\"X-Shopify-Access-Token\",authtoken);\n\tgetwebhookrersponse = invokeUrl(url,\"GET\",testparams);\n\tgetWebhookRes = getwebhookrersponse.getJSON(\"webhooks\").toJSONList();\n\tfor each  getWebhookRes in getWebhookRes\n\t{\n\t\taddress = getWebhookRes.get(\"address\");\n\t\tif(address.contains(\"extensions\") || address.concat(\"zoho\"))\n\t\t{\n\t\t\twebhookid = getWebhookRes.get(\"id\");\n\t\t\turls = \"https://\" + subdomain + \".myshopify.com/admin/webhooks/\" + webhookid + \".json\";\n\t\t\tdelparams = Map();\n\t\t\tauthtoken = accessToken;\n\t\t\tdelparams.put(\"X-Shopify-Access-Token\",authtoken);\n\t\t\tgetDeteleResponse = invokeUrl(urls,\"DELETE\",delparams);\n\t\t}\n\t}\n}\nelse\n{\n\temptymap = Map();\n\tgetwebhookrersponse = zoho.crm.invokeConnector(\"shopifyextension.shopifyconnector.getallwebhookids\",emptymap);\n\twebhookStatus = getwebhookrersponse.get(\"status_code\");\n\tif(webhookStatus == \"200\")\n\t{\n\t\tgetWebhookRes = getwebhookrersponse.get(\"response\").getJSON(\"webhooks\").toJSONList();\n\t\tfor each  getWebhookRes in getWebhookRes\n\t\t{\n\t\t\taddress = getWebhookRes.get(\"address\");\n\t\t\tif(address.contains(\"extensions\") || address.concat(\"zoho\"))\n\t\t\t{\n\t\t\t\twebhookid = getWebhookRes.get(\"id\");\n\t\t\t\tdeleteObj = Map();\n\t\t\t\tdeleteObj.put(\"id\",webhookid);\n\t\t\t\tdeleteRes = zoho.crm.invokeConnector(\"shopifyextension.shopifyconnector.deletewebhook\",deleteObj);\n\t\t\t}\n\t\t}\n\t}\n}\n*/\nresponse = invokeurl\n[\n\turl :\"https://extensions.zoho.com/plugin/common/uicdata?action=uninstalled\"\n\ttype :POST\n\tparameters:param_info\n];\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "post",
                    "url": "https://extensions.zoho.com/plugin/common/uicdata?action=uninstalled"
                }
            ]
        },
        "updatedTime": "2024-10-17 05:59:39.0",
        "workflow": "m = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\nresMap = resp.get(\"response\").toMap();\norg = resMap.get(\"org\").toMap();\nzsoid = org.get(\"zgid\");\nzuid = org.get(\"primary_zuid\");\nparam_info = Map();\nparam_info.put(\"zsoid\",zsoid);\nparam_info.put(\"zuid\",zuid);\nparam_info.put(\"extension\",\"Shopify\");\n// Supply the URL and parameters to the invoke URL task\n/*\nsubdomain = zoho.crm.getOrgVariable(\"shopifyextension__sy_subdomain\");\naccessToken = zoho.crm.getOrgVariable(\"shopifyextension__Shopify_Access_Token\");\nisAccessTokenSupport = false;\nif(accessToken != null)\n{\n\tisAccessTokenSupport = true;\n}\nif(isAccessTokenSupport)\n{\n\turl = \"https://\" + subdomain + \".myshopify.com/admin/webhooks.json\";\n\tauthtoken = accessToken;\n\ttestparams = Map();\n\ttestparams.put(\"X-Shopify-Access-Token\",authtoken);\n\tgetwebhookrersponse = invokeUrl(url,\"GET\",testparams);\n\tgetWebhookRes = getwebhookrersponse.getJSON(\"webhooks\").toJSONList();\n\tfor each  getWebhookRes in getWebhookRes\n\t{\n\t\taddress = getWebhookRes.get(\"address\");\n\t\tif(address.contains(\"extensions\") || address.concat(\"zoho\"))\n\t\t{\n\t\t\twebhookid = getWebhookRes.get(\"id\");\n\t\t\turls = \"https://\" + subdomain + \".myshopify.com/admin/webhooks/\" + webhookid + \".json\";\n\t\t\tdelparams = Map();\n\t\t\tauthtoken = accessToken;\n\t\t\tdelparams.put(\"X-Shopify-Access-Token\",authtoken);\n\t\t\tgetDeteleResponse = invokeUrl(urls,\"DELETE\",delparams);\n\t\t}\n\t}\n}\nelse\n{\n\temptymap = Map();\n\tgetwebhookrersponse = zoho.crm.invokeConnector(\"shopifyextension.shopifyconnector.getallwebhookids\",emptymap);\n\twebhookStatus = getwebhookrersponse.get(\"status_code\");\n\tif(webhookStatus == \"200\")\n\t{\n\t\tgetWebhookRes = getwebhookrersponse.get(\"response\").getJSON(\"webhooks\").toJSONList();\n\t\tfor each  getWebhookRes in getWebhookRes\n\t\t{\n\t\t\taddress = getWebhookRes.get(\"address\");\n\t\t\tif(address.contains(\"extensions\") || address.concat(\"zoho\"))\n\t\t\t{\n\t\t\t\twebhookid = getWebhookRes.get(\"id\");\n\t\t\t\tdeleteObj = Map();\n\t\t\t\tdeleteObj.put(\"id\",webhookid);\n\t\t\t\tdeleteRes = zoho.crm.invokeConnector(\"shopifyextension.shopifyconnector.deletewebhook\",deleteObj);\n\t\t\t}\n\t\t}\n\t}\n}\n*/\nresponse = invokeurl\n[\n\turl :\"https://extensions.zoho.com/plugin/common/uicdata?action=uninstalled\"\n\ttype :POST\n\tparameters:param_info\n];"
    },
    {
        "api_name": "test33333",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test33333",
        "id": "512029000002409001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-02-07T10:49:12+01:00",
        "name": "test33333",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test33333/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test33333/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test33333()\n{\nresp = zoho.crm.getRecordById(\"te\",4444945000031182001);\ninfo resp;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-02-07 01:49:14.0",
        "workflow": "resp = zoho.crm.getRecordById(\"te\",4444945000031182001);\ninfo resp;\nreturn \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002612034",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function1",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function1(map installParamMap)\n{\nm = {\"nameSpace\":\"igor9.shopifytocrmv2\"};\napiKeyResp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\nzapiKey = apiKeyResp.get(\"response\");\nurlApp = \"https://shpify-v2.igordev.fun/actions/install\";\n//\n_headers = Map();\n_headers.put(\"Content-Type\",\"application/json\");\n//\n_parameters = Map();\n_parameters.put(\"organizationId\",installParamMap.get(\"organizationId\"));\n_parameters.put(\"previousVersion\",installParamMap.get(\"previousVersion\"));\n_parameters.put(\"installerId\",installParamMap.get(\"installerId\"));\n_parameters.put(\"isUpgrade\",installParamMap.get(\"isUpgrade\"));\n_parameters.put(\"isInstall\",installParamMap.get(\"isInstall\"));\n_parameters.put(\"adminuserid\",zoho.adminuserid);\n_parameters.put(\"loginuserid\",zoho.loginuserid);\n_parameters.put(\"version\",\"2.0\");\n_parameters.put(\"zapikey\",zapiKey);\n_parameters.put(\"installParamMap\",installParamMap);\n//\nresponse = invokeurl\n[\n\turl :urlApp\n\ttype :POST\n\tparameters:_parameters\n\theaders:_headers\n];\n//\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-05-18 08:54:36.0",
        "workflow": "m = {\"nameSpace\":\"igor9.shopifytocrmv2\"};\napiKeyResp = zoho.crm.invokeConnector(\"crm.zapikey\",m);\nzapiKey = apiKeyResp.get(\"response\");\nurlApp = \"https://shpify-v2.igordev.fun/actions/install\";\n//\n_headers = Map();\n_headers.put(\"Content-Type\",\"application/json\");\n//\n_parameters = Map();\n_parameters.put(\"organizationId\",installParamMap.get(\"organizationId\"));\n_parameters.put(\"previousVersion\",installParamMap.get(\"previousVersion\"));\n_parameters.put(\"installerId\",installParamMap.get(\"installerId\"));\n_parameters.put(\"isUpgrade\",installParamMap.get(\"isUpgrade\"));\n_parameters.put(\"isInstall\",installParamMap.get(\"isInstall\"));\n_parameters.put(\"adminuserid\",zoho.adminuserid);\n_parameters.put(\"loginuserid\",zoho.loginuserid);\n_parameters.put(\"version\",\"2.0\");\n_parameters.put(\"zapikey\",zapiKey);\n_parameters.put(\"installParamMap\",installParamMap);\n//\nresponse = invokeurl\n[\n\turl :urlApp\n\ttype :POST\n\tparameters:_parameters\n\theaders:_headers\n];\n//"
    },
    {
        "api_name": "artest",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000000698001",
                "connectionLinkName": "zoho_creator",
                "connectionName": "Zoho Creator",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCreator.dashboard.read",
                    "ZohoCreator.form.CREATE",
                    "ZohoCreator.meta.CREATE",
                    "ZohoCreator.meta.DELETE",
                    "ZohoCreator.meta.application.read",
                    "ZohoCreator.meta.form.read",
                    "ZohoCreator.meta.report.read",
                    "ZohoCreator.report.CREATE",
                    "ZohoCreator.report.DELETE",
                    "ZohoCreator.report.READ",
                    "ZohoCreator.report.UPDATE"
                ],
                "serviceName": "zoho_creator",
                "userAccess": "false"
            },
            {
                "connectedServiceId": "512029000001275001",
                "connectionLinkName": "zoho_workdrive",
                "connectionName": "zoho_workdrive",
                "isUserDefinedService": "false",
                "scopes": [
                    "WorkDrive.files.ALL",
                    "WorkDrive.files.CREATE",
                    "WorkDrive.files.DELETE",
                    "WorkDrive.files.READ",
                    "WorkDrive.files.UPDATE",
                    "WorkDrive.files.UPDATE ",
                    "WorkDrive.files.sharing.CREATE",
                    "WorkDrive.files.sharing.READ",
                    "WorkDrive.team.ALL",
                    "WorkDrive.teamfolders.CREATE",
                    "WorkDrive.teamfolders.DELETE",
                    "WorkDrive.teamfolders.READ",
                    "WorkDrive.teamfolders.admin.READ",
                    "WorkDrive.users.ALL",
                    "WorkDrive.users.READ",
                    "WorkDrive.workspace.ALL",
                    "Workdrive.files.READ",
                    "ZohoFiles.files.CREATE",
                    "ZohoFiles.files.READ",
                    "ZohoSearch.securesearch.READ"
                ],
                "serviceName": "zoho_workdrive",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "artest",
        "id": "512029000002284009",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-30T01:12:01+01:00",
        "name": "artest",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "id",
                "type": "STRING"
            },
            {
                "name": "jobid",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/artest/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/artest/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.artest(String id, String jobid)\n{\nfileName = jobid + \"_\" + \"priceList\";\ndecodeFile = zoho.encryption.urlEncode(fileName);\ninfo decodeFile;\n//7uvk842dc943acedd46e8b65e50ebadc25afc\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teams/k2yvj5adcac9666b44afaae52400037071fa7/records?\" + \"search%5Ball%5D=\" + fileName + \"&filter%5BparentId%5D=7uvk80ae72ceda3ae4dab838b085097d86667\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\nfile = response.get(\"data\").get(0);\nif(!file.isNull())\n{\n\theader = Map();\n\theader.put(\"content-type\",\"application/vnd.api+json\");\n\tfileObj = invokeurl\n\t[\n\t\turl :\"https://download.zoho.com/v1/workdrive/download/\" + file.get(\"id\")\n\t\ttype :GET\n\t\theaders:header\n\t\tconnection:\"zoho_workdrive\"\n\t];\n\totherParams = Map();\n\tinfo zoho.creator.getRecordById(\"user4_demo46\",\"test123\",\"test123_Report\",id,\"zoho_creator\");\n\tfileObj.setParamName(\"file\");\n\tff = invokeurl\n\t[\n\t\turl :\"https://creator.zoho.com/api/v2.1/user4_demo46/test123/report/test123_Report/\" + id + \"/f1/upload\"\n\t\ttype :POST\n\t\tfiles:fileObj\n\t\tconnection:\"zoho_creator\"\n\t];\n\treturn ff;\n}\nreturn \";\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "zoho_creator",
                    "display_name": "Zoho Creator",
                    "function": "zoho.creator.getRecordById",
                    "service": "ZohoCreator"
                }
            ],
            "params": [
                "jobid",
                "id"
            ],
            "webhooks": [
                {
                    "connection": "zoho_workdrive",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_workdrive",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_creator",
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-29 16:12:01.0",
        "workflow": "fileName = jobid + \"_\" + \"priceList\";\ndecodeFile = zoho.encryption.urlEncode(fileName);\ninfo decodeFile;\n//7uvk842dc943acedd46e8b65e50ebadc25afc\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teams/k2yvj5adcac9666b44afaae52400037071fa7/records?\" + \"search%5Ball%5D=\" + fileName + \"&filter%5BparentId%5D=7uvk80ae72ceda3ae4dab838b085097d86667\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\nfile = response.get(\"data\").get(0);\nif(!file.isNull())\n{\n\theader = Map();\n\theader.put(\"content-type\",\"application/vnd.api+json\");\n\tfileObj = invokeurl\n\t[\n\t\turl :\"https://download.zoho.com/v1/workdrive/download/\" + file.get(\"id\")\n\t\ttype :GET\n\t\theaders:header\n\t\tconnection:\"zoho_workdrive\"\n\t];\n\totherParams = Map();\n\tinfo zoho.creator.getRecordById(\"user4_demo46\",\"test123\",\"test123_Report\",id,\"zoho_creator\");\n\tfileObj.setParamName(\"file\");\n\tff = invokeurl\n\t[\n\t\turl :\"https://creator.zoho.com/api/v2.1/user4_demo46/test123/report/test123_Report/\" + id + \"/f1/upload\"\n\t\ttype :POST\n\t\tfiles:fileObj\n\t\tconnection:\"zoho_creator\"\n\t];\n\treturn ff;\n}\nreturn \";\";"
    },
    {
        "api_name": "shopifytocrmv2__oz_searchshopifysaleorder",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_searchShopifySaleOrder",
        "id": "512029000002618017",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_searchshopifysaleorder/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_searchshopifysaleorder/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "testtt",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "testTT",
        "id": "512029000002418001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-02-12T14:17:57+01:00",
        "name": "testTT",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testtt/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testtt/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testTT()\n{\ninfo zoho.crm.getRecordById(\"Leads\",\"4444945000032280009\");\ninfo zoho.crm.getRecordById(\"Contacts\",\"4444945000032257010\");\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-02-12 05:17:58.0",
        "workflow": "info zoho.crm.getRecordById(\"Leads\",\"4444945000032280009\");\ninfo zoho.crm.getRecordById(\"Contacts\",\"4444945000032257010\");"
    },
    {
        "api_name": "test10",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "test",
        "id": "512029000002575001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-01T15:19:11+02:00",
        "name": "test10",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test10/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test10/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test10()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-05-01 06:19:11.0",
        "workflow": null
    },
    {
        "api_name": "shopifytocrmv2__oz_shopify_composite",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_shopify_Composite",
        "id": "512029000002608012",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_composite/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_composite/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "testinvitation",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000002062001",
                "connectionLinkName": "zoho_books",
                "connectionName": "zoho_books",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoBooks.fullaccess.all",
                    "ZohoBooks.settings.READ"
                ],
                "serviceName": "zoho_books",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testInvitation",
        "id": "512029000002420001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-02-14T08:42:41+01:00",
        "name": "testInvitation",
        "nameSpace": "automation",
        "params": [
            {
                "name": "leadId",
                "type": "BIGINT"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testinvitation/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testinvitation/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.testInvitation(Int leadId)\n{\nlead = zoho.crm.getRecordById(\"Leads\",leadId);\ncontactPersonMap = Map();\ncontactPersonMap.put(\"first_name\",ifNull(lead.get(\"First_Name\"),\"\"));\ncontactPersonMap.put(\"last_name\",ifNull(lead.get(\"Last_Name\"),\"\"));\ncontactPersonMap.put(\"email\",ifNull(lead.get(\"Email\"),\"\"));\ncontactPersonMap.put(\"phone\",ifNull(lead.get(\"Phone\"),\"\"));\ncontactPersonMap.put(\"salutation\",ifNull(lead.get(\"Salutation\"),\"\"));\ncontactPersonMap.put(\"is_primary_contact\",true);\n//contactPersonMap.put(\"enable_portal\",true);\ncontactPersonList = List();\ncontactPersonList.add(contactPersonMap);\ncontactMap = Map();\ncontactMap.put(\"contact_persons\",contactPersonList);\ncontactMap.put(\"contact_name\",lead.get(\"Full_Name\"));\ncontactMap.put(\"contact_type\",\"customer\");\n//contactMap.put(\"is_portal_enabled\",true);\nresponse = zoho.books.createRecord(\"Contacts\",\"713248035\",contactMap,\"zoho_books\");\ninfo response;\ncontactPersonID = response.get(\"contact\").get(\"contact_persons\").get(0).get(\"contact_person_id\");\ninfo contactPersonID;\n// contactPersonID = \"2234095000016791003\";\nresponse = invokeurl\n[\n\turl :\"https://books.zoho.com/api/v3/contacts/contactpersons/\" + contactPersonID + \"/portal/invite\"\n\ttype :POST\n\tparameters:{\"organization_id\":\"713248035\"}\n\tconnection:\"zoho_books\"\n];\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                },
                {
                    "connection": "zoho_books",
                    "display_name": "Zoho Books",
                    "function": "zoho.books.createRecord",
                    "service": "ZohoBooks"
                }
            ],
            "params": [
                "leadId"
            ],
            "webhooks": [
                {
                    "connection": "zoho_books",
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-02-13 23:42:45.0",
        "workflow": "lead = zoho.crm.getRecordById(\"Leads\",leadId);\ncontactPersonMap = Map();\ncontactPersonMap.put(\"first_name\",ifNull(lead.get(\"First_Name\"),\"\"));\ncontactPersonMap.put(\"last_name\",ifNull(lead.get(\"Last_Name\"),\"\"));\ncontactPersonMap.put(\"email\",ifNull(lead.get(\"Email\"),\"\"));\ncontactPersonMap.put(\"phone\",ifNull(lead.get(\"Phone\"),\"\"));\ncontactPersonMap.put(\"salutation\",ifNull(lead.get(\"Salutation\"),\"\"));\ncontactPersonMap.put(\"is_primary_contact\",true);\n//contactPersonMap.put(\"enable_portal\",true);\ncontactPersonList = List();\ncontactPersonList.add(contactPersonMap);\ncontactMap = Map();\ncontactMap.put(\"contact_persons\",contactPersonList);\ncontactMap.put(\"contact_name\",lead.get(\"Full_Name\"));\ncontactMap.put(\"contact_type\",\"customer\");\n//contactMap.put(\"is_portal_enabled\",true);\nresponse = zoho.books.createRecord(\"Contacts\",\"713248035\",contactMap,\"zoho_books\");\ninfo response;\ncontactPersonID = response.get(\"contact\").get(\"contact_persons\").get(0).get(\"contact_person_id\");\ninfo contactPersonID;\n// contactPersonID = \"2234095000016791003\";\nresponse = invokeurl\n[\n\turl :\"https://books.zoho.com/api/v3/contacts/contactpersons/\" + contactPersonID + \"/portal/invite\"\n\ttype :POST\n\tparameters:{\"organization_id\":\"713248035\"}\n\tconnection:\"zoho_books\"\n];\ninfo response;"
    },
    {
        "api_name": "fdas",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000036510010",
                "connectionLinkName": "zoho_writer",
                "connectionName": "zoho_writer",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoWriter.documentEditor.ALL",
                    "ZohoWriter.Merge.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "asfsaf",
        "id": "512029000002575008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-03T01:58:33+02:00",
        "name": "fdas",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/fdas/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/fdas/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.fdas()\n{\ndata = Map();\ndata.put(\"Account_Name.Legal_name\",\"12345\");\ndata.put(\"Ordered_Items\",{\"Ordered_Items.Total\":\"$ 1.00\",\"Ordered_Items.List_Price\":\"$ 1.00\",\"Ordered_Items.Sequence_Number\":\"1\",\"Ordered_Items.Unit\":\"Шт\",\"Ordered_Items.Product_Name\":\"test\",\"Ordered_Items.Description\":\"test\",\"Ordered_Items.Quantity\":\"1\"});\ndata.put(\"InvoiceAmount\",\"$100\");\nparam = Map();\nparam.put(\"merge_data\",{\"data\":data});\nparam.put(\"output_format\",\"pdf\");\nparam.put(\"response_type\",\"link\");\ninfo param;\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/writer/api/v1/documents/7kl4b425893defc084cf28fc2a495861163eb/merge\"\n\ttype :POST\n\tparameters:param\n\tconnection:\"zoho_writer\"\n];\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_writer",
                    "method": "post",
                    "url": "https://www.zohoapis.com/writer/api/v1/documents/7kl4b425893defc084cf28fc2a495861163eb/merge"
                }
            ]
        },
        "updatedTime": "2024-05-02 16:58:34.0",
        "workflow": "data = Map();\ndata.put(\"Account_Name.Legal_name\",\"12345\");\ndata.put(\"Ordered_Items\",{\"Ordered_Items.Total\":\"$ 1.00\",\"Ordered_Items.List_Price\":\"$ 1.00\",\"Ordered_Items.Sequence_Number\":\"1\",\"Ordered_Items.Unit\":\"Шт\",\"Ordered_Items.Product_Name\":\"test\",\"Ordered_Items.Description\":\"test\",\"Ordered_Items.Quantity\":\"1\"});\ndata.put(\"InvoiceAmount\",\"$100\");\nparam = Map();\nparam.put(\"merge_data\",{\"data\":data});\nparam.put(\"output_format\",\"pdf\");\nparam.put(\"response_type\",\"link\");\ninfo param;\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/writer/api/v1/documents/7kl4b425893defc084cf28fc2a495861163eb/merge\"\n\ttype :POST\n\tparameters:param\n\tconnection:\"zoho_writer\"\n];\ninfo response;"
    },
    {
        "api_name": "sdf",
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [],
                "id": "4444945000038629017",
                "module": "Real Estate",
                "name": "sdfdsf"
            }
        ],
        "category": "button",
        "config": true,
        "description": null,
        "display_name": "sdfsdf",
        "id": "512029000002735001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-08-06T17:39:09+02:00",
        "name": "sdf",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/sdf/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/sdf/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.sdf()\n{\nreturn \"Asd\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-08-06 08:39:10.0",
        "workflow": "return \"Asd\";"
    },
    {
        "api_name": "tes",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000002546001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-04-13T17:14:46+02:00",
        "name": "tes",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/tes/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/tes/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.tes()\n{\ndata = Map();\ndata.put(\"Address\",\"$100\");\nparam = Map();\nparam = Map();\nparam.put(\"merge_data\",{\"data\":data});\nparam.put(\"output_format\",\"pdf\");\nparam.put(\"response_type\",\"link\");\ninfo param;\nemail = \"amelia@zylker.com\";\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/writer/api/v1/documents/99sem187a559e0e66448a917f0823a183a165/merge\"\n\ttype :POST\n\tparameters:param\n];\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "post",
                    "url": "https://www.zohoapis.com/writer/api/v1/documents/99sem187a559e0e66448a917f0823a183a165/merge"
                }
            ]
        },
        "updatedTime": "2024-04-13 08:14:47.0",
        "workflow": "data = Map();\ndata.put(\"Address\",\"$100\");\nparam = Map();\nparam = Map();\nparam.put(\"merge_data\",{\"data\":data});\nparam.put(\"output_format\",\"pdf\");\nparam.put(\"response_type\",\"link\");\ninfo param;\nemail = \"amelia@zylker.com\";\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/writer/api/v1/documents/99sem187a559e0e66448a917f0823a183a165/merge\"\n\ttype :POST\n\tparameters:param\n];\ninfo response;"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002605023",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function3",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function3(map installParamMap)\n{\nurlApp = \"https://shpify-v2.igordev.fun/actions/uninstall?token=zGaUz4SWUTfdDYZnrk6S5QED69LzjwbwA7SLFcpDQ27nmXy3ry\";\n//\n_headers = Map();\n_headers.put(\"Content-Type\",\"application/javascript\");\n//\n_parameters = Map();\n_parameters.put(\"organizationId\",installParamMap.get(\"organizationId\"));\n_parameters.put(\"installerId\",installParamMap.get(\"installerId\"));\n_parameters.put(\"adminuserid\",zoho.adminuserid);\n_parameters.put(\"loginuserid\",zoho.loginuserid);\n_parameters.put(\"installParamMap\",installParamMap);\n_parameters.put(\"version\",\"2.0\");\n_parameters.put(\"isUninstall\",true);\n//\nresponse = invokeurl\n[\n\turl :urlApp\n\ttype :POST\n\tparameters:_parameters\n\theaders:_headers\n];\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-05-18 08:54:37.0",
        "workflow": "urlApp = \"https://shpify-v2.igordev.fun/actions/uninstall?token=zGaUz4SWUTfdDYZnrk6S5QED69LzjwbwA7SLFcpDQ27nmXy3ry\";\n//\n_headers = Map();\n_headers.put(\"Content-Type\",\"application/javascript\");\n//\n_parameters = Map();\n_parameters.put(\"organizationId\",installParamMap.get(\"organizationId\"));\n_parameters.put(\"installerId\",installParamMap.get(\"installerId\"));\n_parameters.put(\"adminuserid\",zoho.adminuserid);\n_parameters.put(\"loginuserid\",zoho.loginuserid);\n_parameters.put(\"installParamMap\",installParamMap);\n_parameters.put(\"version\",\"2.0\");\n_parameters.put(\"isUninstall\",true);\n//\nresponse = invokeurl\n[\n\turl :urlApp\n\ttype :POST\n\tparameters:_parameters\n\theaders:_headers\n];"
    },
    {
        "api_name": "shopifytocrmv2__oz_searchshopifycontact",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_searchShopifyContact",
        "id": "512029000002626005",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:34+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_searchshopifycontact/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_searchshopifycontact/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002609028",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Untitled_Function2",
        "nameSpace": "ConnectorAction",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ConnectorAction.Untitled_Function2()\n{\nm = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\norgDetails = resp.toMap().get(\"response\").toMap().get(\"org\");\nzgid = orgDetails.toMap().get(\"zgid\");\ngetmap = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\nplugin_version = \"\";\nplugin_details_response = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.getplugindetails\",m);\nplugin_list = plugin_details_response.get(\"data\").toJSONList();\nfor each  plugin in plugin_list\n{\n\tplugin = plugin.toMap();\n\tif(plugin.get(\"PLUGIN_NAME\").contains(\"zohobookingstest\"))\n\t{\n\t\tplugin_version = plugin.get(\"PLUGIN_VERSION\");\n\t}\n}\napiresponse = zoho.crm.invokeConnector(\"crm.zapikey\",getmap);\nzapikey = apiresponse.get(\"response\");\ncrm_signal_webhook_url = \"https://platform.zoho.com/crm/v2/functions/zohobookingstest__addeventandcontactfromzohobookings/actions/execute?auth_type=apikey&zapikey=\" + zapikey;\nscheduledMap = Map();\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"ADD\",\"WEBHOOK_URL\":crm_signal_webhook_url,\"ORG_ID\":zgid,\"CUSTOMER_MODULE\":zoho.crm.getOrgVariable(\"zohobookingstest__Module\"),\"PLUGIN_VERSION\":plugin_version}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);\ndynamic_map = Map();\ndynamic_map.put(\"linkDetails\",zoho.encryption.urlEncode({\"ID\":\"\"}));\nbookingUrl = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.getbookinglink\",dynamic_map);\nurlresponse = bookingUrl.toMap().get(\"response\").toMap().get(\"response\").toMap().get(\"returnvalue\");\nbookingLink = urlresponse.get(\"bookingLink\");\nsetresponse = zoho.crm.invokeConnector(\"crm.set\",{\"apiname\":\"zohobookingstest__BookingUrl\",\"value\":zoho.encryption.urlDecode(bookingLink)});\nsetresponse = zoho.crm.invokeConnector(\"crm.set\",{\"apiname\":\"zohobookingstest__BookingUrlId\",\"value\":urlresponse.get(\"module\") + \"_id=\" + urlresponse.get(\"id\")});\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getOrgVariable",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-05-20 08:28:15.0",
        "workflow": "m = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\norgDetails = resp.toMap().get(\"response\").toMap().get(\"org\");\nzgid = orgDetails.toMap().get(\"zgid\");\ngetmap = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\nplugin_version = \"\";\nplugin_details_response = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.getplugindetails\",m);\nplugin_list = plugin_details_response.get(\"data\").toJSONList();\nfor each  plugin in plugin_list\n{\n\tplugin = plugin.toMap();\n\tif(plugin.get(\"PLUGIN_NAME\").contains(\"zohobookingstest\"))\n\t{\n\t\tplugin_version = plugin.get(\"PLUGIN_VERSION\");\n\t}\n}\napiresponse = zoho.crm.invokeConnector(\"crm.zapikey\",getmap);\nzapikey = apiresponse.get(\"response\");\ncrm_signal_webhook_url = \"https://platform.zoho.com/crm/v2/functions/zohobookingstest__addeventandcontactfromzohobookings/actions/execute?auth_type=apikey&zapikey=\" + zapikey;\nscheduledMap = Map();\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"ADD\",\"WEBHOOK_URL\":crm_signal_webhook_url,\"ORG_ID\":zgid,\"CUSTOMER_MODULE\":zoho.crm.getOrgVariable(\"zohobookingstest__Module\"),\"PLUGIN_VERSION\":plugin_version}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);\ndynamic_map = Map();\ndynamic_map.put(\"linkDetails\",zoho.encryption.urlEncode({\"ID\":\"\"}));\nbookingUrl = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.getbookinglink\",dynamic_map);\nurlresponse = bookingUrl.toMap().get(\"response\").toMap().get(\"response\").toMap().get(\"returnvalue\");\nbookingLink = urlresponse.get(\"bookingLink\");\nsetresponse = zoho.crm.invokeConnector(\"crm.set\",{\"apiname\":\"zohobookingstest__BookingUrl\",\"value\":zoho.encryption.urlDecode(bookingLink)});\nsetresponse = zoho.crm.invokeConnector(\"crm.set\",{\"apiname\":\"zohobookingstest__BookingUrlId\",\"value\":urlresponse.get(\"module\") + \"_id=\" + urlresponse.get(\"id\")});"
    },
    {
        "api_name": "maksarovfileuploads",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000048285112",
                "connectionLinkName": "zohomailwidgettonydurante",
                "connectionName": "ZohomailWidgetTonyDurante",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoMail.organization.groups.READ",
                    "ZohoMail.tasks.CREATE",
                    "ZohoMail.tasks.READ",
                    "ZohoMail.tasks.UPDATE",
                    "ZohoMail.tasks.DELETE",
                    "ZohoMail.links.CREATE",
                    "ZohoMail.links.READ",
                    "ZohoMail.links.UPDATE",
                    "ZohoMail.links.DELETE",
                    "ZohoMail.notes.CREATE",
                    "ZohoMail.notes.READ",
                    "ZohoMail.notes.UPDATE",
                    "ZohoMail.notes.DELETE",
                    "ZohoMail.posts.CREATE",
                    "ZohoMail.posts.READ",
                    "ZohoMail.posts.UPDATE",
                    "ZohoMail.posts.DELETE",
                    "ZohoMail.messages.CREATE",
                    "ZohoMail.messages.READ",
                    "ZohoMail.messages.UPDATE",
                    "ZohoMail.messages.DELETE",
                    "ZohoMail.streams.CREATE",
                    "ZohoMail.streams.READ",
                    "ZohoMail.streams.UPDATE",
                    "ZohoMail.streams.DELETE",
                    "ZohoMail.reminders.ALL",
                    "ZohoMail.messages.ALL",
                    "ZohoMail.flags.ALL",
                    "ZohoMail.folders.ALL",
                    "ZohoMail.tags.ALL",
                    "ZohoMail.accounts.ALL",
                    "ZohoMail.organization.accounts.READ",
                    "ZohoMail.comments.UPDATE",
                    "ZohoMail.comments.DELETE",
                    "ZohoMail.comments.CREATE",
                    "ZohoMail.comments.READ"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "MaksarovFileUploads",
        "id": "512029000002780001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-09-08T16:52:47+02:00",
        "name": "MaksarovFileUploads",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/maksarovfileuploads/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/maksarovfileuploads/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.MaksarovFileUploads()\n{\nurl = \"https://img.freepik.com/free-photo/3d-fox-cartoon-illustration_23-2151395236.jpg?t=st=1725805996~exp=1725809596~hmac=c4c03fe51d0d2576acfbde0e01033aafbb3254ec0c34e1cf368a9b26c5204e1c&w=740\";\n//file = invokeUrl(url,\"GET\");\n//file = getUrl(url);\nmail = zoho.mail.getMessage(\"1660741993714110002\",\"zohomailwidgettonydurante\");\nreturn mail;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "zohomailwidgettonydurante",
                    "display_name": "Zoho Mail",
                    "function": "zoho.mail.getMessage",
                    "service": "VirtualOffice"
                }
            ]
        },
        "updatedTime": "2024-09-08 07:52:48.0",
        "workflow": "url = \"https://img.freepik.com/free-photo/3d-fox-cartoon-illustration_23-2151395236.jpg?t=st=1725805996~exp=1725809596~hmac=c4c03fe51d0d2576acfbde0e01033aafbb3254ec0c34e1cf368a9b26c5204e1c&w=740\";\n//file = invokeUrl(url,\"GET\");\n//file = getUrl(url);\nmail = zoho.mail.getMessage(\"1660741993714110002\",\"zohomailwidgettonydurante\");\nreturn mail;"
    },
    {
        "api_name": "shopifytocrmv2__oz_shopify_updaterecord",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_shopify_updateRecord",
        "id": "512029000002617010",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_updaterecord/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_updaterecord/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "test5",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000002360001",
                "connectionLinkName": "crm",
                "connectionName": "crm",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.modules.all",
                    "ZohoCRM.modules.calls.CREATE",
                    "ZohoCRM.modules.calls.READ",
                    "ZohoCRM.modules.notes.ALL",
                    "ZohoCRM.modules.zoho_projects.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.send_mail.ALL.CREATE",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.settings.READ",
                    "ZohoCRM.settings.emails.READ",
                    "ZohoCRM.settings.extensions.ALL",
                    "ZohoCRM.settings.fields.READ",
                    "ZohoCRM.settings.layouts.READ",
                    "ZohoCRM.settings.layouts.read",
                    "ZohoCRM.settings.modules.READ",
                    "ZohoCRM.settings.related_lists.all",
                    "ZohoCRM.settings.roles.ALL",
                    "ZohoCRM.settings.webhook.ALL",
                    "ZohoCRM.settings.workflow.ALL",
                    "ZohoCRM.signals.ALL",
                    "ZohoCRM.users.ALL",
                    "ZohoWriter.Merge.ALL"
                ],
                "serviceName": "zoho_crm",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test",
        "id": "512029000002649001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-06-10T23:22:42+02:00",
        "name": "test5",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test5/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test5/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test5()\n{\ndata = {\"merge\":{{\"data\":{{\"id\":\"4444945000037621347\",\"_fields\":{{\"api_name\":\"Phone\"},{\"api_name\":\"Email\"}}},{\"id\":\"4444945000037621352\"}}}}};\nss = invokeurl\n[\n\turl :\" https://www.zohoapis.com/crm/v6/DIDI/4444945000037621289/actions/merge\"\n\ttype :POST\n\tparameters:data.toString()\n\tconnection:\"crm\"\n];\ninfo ss;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "crm",
                    "method": "post",
                    "url": " https://www.zohoapis.com/crm/v6/DIDI/4444945000037621289/actions/merge"
                }
            ]
        },
        "updatedTime": "2024-06-10 14:22:43.0",
        "workflow": "data = {\"merge\":{{\"data\":{{\"id\":\"4444945000037621347\",\"_fields\":{{\"api_name\":\"Phone\"},{\"api_name\":\"Email\"}}},{\"id\":\"4444945000037621352\"}}}}};\nss = invokeurl\n[\n\turl :\" https://www.zohoapis.com/crm/v6/DIDI/4444945000037621289/actions/merge\"\n\ttype :POST\n\tparameters:data.toString()\n\tconnection:\"crm\"\n];\ninfo ss;\nreturn \"\";"
    },
    {
        "api_name": "test_merge_docs",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test_merge_docs",
        "id": "512029000002845008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-10-24T16:51:59+02:00",
        "name": "test_merge_docs",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_merge_docs/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_merge_docs/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_merge_docs()\n{\nid = \"4444945000021184011\";\ncontactInfo = zoho.crm.getRecordById(\"Contacts\",id);\n/*campi = Map();\ncampi.put(\"Docente_referente\",Docente_referente);\ncampi.put(\"Tipo_PCTO\",Tipo_PCTO);\ncampi.put(\"Anno_scolastico\",Anno_scolastico);\ncampi.put(\"Scuola\",Scuola);\ncampi.put(\"Classe_anno\",Classe_anno);\ncampi.put(\"Classe_sezione\",Classe_sezione);\ncampi.put(\"Nome_Redazione\",Nome_Redazione);\ncampi.put(\"Elenco_studenti_e_token\",studenti);\ninfo campi;\noutput_settings = Map();\noutput_settings.put(\"output_format\",\"pdf\");\noutput_settings.put(\"doc_name\",\"Notifica dati PCTO a Docente\");\noutput_settings.put(\"folder_id\",\"b7osz4cb2af3ca134493298753ff635ee2a19\");\n//merge documento \ndocumento = zoho.writer.mergeAndStore(\"uiris87fc43196e984189bf3da6da449c98db\",campi,output_settings,\"zoho_writer\");*/\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-10-24 07:52:00.0",
        "workflow": "id = \"4444945000021184011\";\ncontactInfo = zoho.crm.getRecordById(\"Contacts\",id);\n/*campi = Map();\ncampi.put(\"Docente_referente\",Docente_referente);\ncampi.put(\"Tipo_PCTO\",Tipo_PCTO);\ncampi.put(\"Anno_scolastico\",Anno_scolastico);\ncampi.put(\"Scuola\",Scuola);\ncampi.put(\"Classe_anno\",Classe_anno);\ncampi.put(\"Classe_sezione\",Classe_sezione);\ncampi.put(\"Nome_Redazione\",Nome_Redazione);\ncampi.put(\"Elenco_studenti_e_token\",studenti);\ninfo campi;\noutput_settings = Map();\noutput_settings.put(\"output_format\",\"pdf\");\noutput_settings.put(\"doc_name\",\"Notifica dati PCTO a Docente\");\noutput_settings.put(\"folder_id\",\"b7osz4cb2af3ca134493298753ff635ee2a19\");\n//merge documento \ndocumento = zoho.writer.mergeAndStore(\"uiris87fc43196e984189bf3da6da449c98db\",campi,output_settings,\"zoho_writer\");*/\nreturn \"\";"
    },
    {
        "api_name": "shopifytocrmv2__oz_shopify_getdeleted",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_shopify_getDeleted",
        "id": "512029000002618024",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_getdeleted/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_getdeleted/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "part3_update1",
        "associated_place": null,
        "category": "scheduler",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001906001",
                "connectionLinkName": "connecttest",
                "connectionName": "connecttest",
                "isUserDefinedService": "false",
                "scopes": [
                    "https://www.googleapis.com/auth/drive",
                    "https://www.googleapis.com/auth/drive.file",
                    "https://www.googleapis.com/auth/drive.readonly",
                    "https://www.googleapis.com/auth/drive.readonly ",
                    "https://www.googleapis.com/auth/spreadsheets",
                    "https://www.googleapis.com/auth/spreadsheets.readonly"
                ],
                "serviceName": "google_sheets",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "part3_update",
        "id": "512029000002335001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-12-28T00:28:39+01:00",
        "name": "part3_update1",
        "nameSpace": "schedule",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/part3_update1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/part3_update1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void schedule.part3_update1()\n{\nurlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart2 + \":AJ\" + countPart3;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.searchRecords",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.bulkUpdate",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "connecttest",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-12-27 15:28:39.0",
        "workflow": "urlCount = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo?fields=sheets.properties.gridProperties.rowCount\";\nresponseCountRecordsSheets = invokeurl\n[\n\turl :urlCount\n\ttype :GET\n\tconnection:\"connecttest\"\n];\ncount = responseCountRecordsSheets.get('sheets').get(0).get('properties').get('gridProperties').get('rowCount').toLong();\npartSize = count / 6;\n// Размер каждой части (целочисленное деление)\npartSize = partSize.floor();\nremainder = count % 6;\n// Остаток записей\ncountPart1 = partSize;\ncountPart2 = partSize + countPart1;\ncountPart3 = partSize + countPart2;\ncountPart4 = partSize + countPart3;\ncountPart5 = partSize + countPart4;\ncountPart6 = partSize + countPart5 + remainder;\npartData = Map();\npartData.put('part1',countPart1);\n//partData.put('part2', countPart2);\n//partData.put('part3', countPart3);\n//partData.put('part4', countPart4);\nprev = 1;\nupdateData = List();\nfor each  part in partData\n{\n\turl = \"https://sheets.googleapis.com/v4/spreadsheets/1qbHUejbqOvTxjF8NU4e54KhJSZDSesoqF_n5yk0xlAo/values/A\" + countPart2 + \":AJ\" + countPart3;\n\tresponseRows = invokeurl\n\t[\n\t\turl :url\n\t\ttype :GET\n\t\tconnection:\"connecttest\"\n\t];\n\tif(responseRows != null)\n\t{\n\t\tindex = 0;\n\t\trows = responseRows.getJson('values');\n\t\tfor each  value in rows\n\t\t{\n\t\t\temail = value.get(2);\n\t\t\tbamba = value.get(6);\n\t\t\tif(bamba == null)\n\t\t\t{\n\t\t\t\tbamba = '';\n\t\t\t}\n\t\t\tvetted = value.get(8);\n\t\t\tif(vetted == null)\n\t\t\t{\n\t\t\t\tvetted = '';\n\t\t\t}\n\t\t\tvettedBy = value.get(9);\n\t\t\tif(vettedBy == null)\n\t\t\t{\n\t\t\t\tvettedBy = '';\n\t\t\t}\n\t\t\tid = '';\n\t\t\tif(email.length() > 1)\n\t\t\t{\n\t\t\t\trecord = zoho.crm.searchRecords(\"Creators\",\"(Email:equals:\" + email + \")\").toJsonList();\n\t\t\t\tfor each  r in record\n\t\t\t\t{\n\t\t\t\t\tid = r.get(\"id\");\n\t\t\t\t}\n\t\t\t\tif(id.length() > 1)\n\t\t\t\t{\n\t\t\t\t\tupdateItem = {\"id\":id,\"Bambassadors_Past_Collabs\":bamba,\"Vetted\":vetted,\"Vetted_By\":vettedBy};\n\t\t\t\t\tif(updateData.size() == 100)\n\t\t\t\t\t{\n\t\t\t\t\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t\t\t\t\t\tupdateData.clear();\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tupdateData.add(updateItem);\n\t\t\t\t\t\tindex = index + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tresponseUpdate = zoho.crm.bulkUpdate(\"Creators\",updateData);\n\t}\n\tinfo updateData.size();\n\tprev = part;\n}"
    },
    {
        "api_name": "shopifytocrmv2__oz_searchshopifyproduct",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_searchShopifyProduct",
        "id": "512029000002613017",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_searchshopifyproduct/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_searchshopifyproduct/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "test11",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "test",
        "id": "512029000002639001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-06-03T22:13:03+02:00",
        "name": "test11",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test11/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test11/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test11()\n{\nqwr = invokeurl\n[\n\turl :\"https://download.zoho.eu/webdownload?event-id=de79d3e5eeb1f3526b69bfc7e342ac21d61c9b5180c301bcd291376eb7d3c831&x-service=meetinglab&x-cli-msg=\"\n\ttype :GET\n];\ninfo qwr;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "method": "get",
                    "url": "https://download.zoho.eu/webdownload?event-id=de79d3e5eeb1f3526b69bfc7e342ac21d61c9b5180c301bcd291376eb7d3c831&x-service=meetinglab&x-cli-msg="
                }
            ]
        },
        "updatedTime": "2024-06-03 13:13:05.0",
        "workflow": "qwr = invokeurl\n[\n\turl :\"https://download.zoho.eu/webdownload?event-id=de79d3e5eeb1f3526b69bfc7e342ac21d61c9b5180c301bcd291376eb7d3c831&x-service=meetinglab&x-cli-msg=\"\n\ttype :GET\n];\ninfo qwr;"
    },
    {
        "api_name": "zoho_an_update_create_row",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000002371001",
                "connectionLinkName": "zan",
                "connectionName": "zan",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoAnalytics.data.all",
                    "ZohoAnalytics.embed.all",
                    "ZohoAnalytics.fullaccess.all",
                    "ZohoAnalytics.metadata.all",
                    "ZohoAnalytics.modeling.all",
                    "ZohoAnalytics.share.all",
                    "ZohoAnalytics.usermanagement.all",
                    "ZohoReports.data.ALL"
                ],
                "serviceName": "zoho_analytics",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "zoho_an_update_create_row",
        "id": "512029000002368009",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-01-19T13:58:47+01:00",
        "name": "zoho_an_update_create_row",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "operation",
                "type": "STRING"
            },
            {
                "name": "workflowName",
                "type": "STRING"
            },
            {
                "name": "workflowValue",
                "type": "BIGINT"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/zoho_an_update_create_row/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/zoho_an_update_create_row/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.zoho_an_update_create_row(String operation, String workflowName, Int workflowValue)\n{\nif(operation == \"upd\")\n{\n\torgId = \"713609221\";\n\tworkspaceId = \"2222485000006542013\";\n\tviewId = \"2222485000007742002\";\n\theadersMap = Map();\n\theadersMap.put(\"ZANALYTICS-ORGID\",orgId);\n\tcolumns = {};\n\tcolumns.add(\"2222485000007742005\");\n\tColumnsMap = Map();\n\tColumnsMap.put(\"Workflow\",workflowName);\n\tColumnsMap.put(\"Value\",workflowValue);\n\tconfig = Map();\n\tconfig.put(\"columns\",ColumnsMap);\n\tconfig.put(\"updateAllRows\",false);\n\tcriteria = \"\\\"WorkFlow\\\"='\" + workflowName + \"'\";\n\tconfig.put(\"criteria\",criteria);\n\tparameters = \"CONFIG=\" + config.toString();\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://analyticsapi.zoho.com/restapi/v2/workspaces/\" + workspaceId + \"/views/\" + viewId + \"/rows?\" + parameters\n\t\ttype :PUT\n\t\theaders:headersMap\n\t\tconnection:\"zan\"\n\t];\n\tinfo response;\n\treturn \"\";\n}\nelse\n{\n\torgId = \"713609221\";\n\tworkspaceId = \"2222485000006542013\";\n\tviewId = \"2222485000007742002\";\n\tcolumnsMap = Map();\n\tcolumnsMap.put(\"Workflow\",workflowName);\n\tcolumnsMap.put(\"Value\",workflowValue);\n\tcolumns = Map();\n\tcolumns.put(\"columns\",columnsMap);\n\tparamsMap = Map();\n\tparamsMap.put(\"CONFIG\",columns.toString());\n\theadersMap = Map();\n\theadersMap.put(\"ZANALYTICS-ORGID\",orgId);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://analyticsapi.zoho.com/restapi/v2/workspaces/\" + workspaceId + \"/views/\" + viewId + \"/rows\"\n\t\ttype :POST\n\t\tparameters:paramsMap\n\t\theaders:headersMap\n\t\tconnection:\"zan\"\n\t];\n\tinfo response;\n\treturn \"\";\n}\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "params": [
                "operation",
                "workflowName",
                "workflowValue"
            ],
            "webhooks": [
                {
                    "connection": "zan",
                    "method": "put",
                    "url": "unknown"
                },
                {
                    "connection": "zan",
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-01-19 04:58:53.0",
        "workflow": "if(operation == \"upd\")\n{\n\torgId = \"713609221\";\n\tworkspaceId = \"2222485000006542013\";\n\tviewId = \"2222485000007742002\";\n\theadersMap = Map();\n\theadersMap.put(\"ZANALYTICS-ORGID\",orgId);\n\tcolumns = {};\n\tcolumns.add(\"2222485000007742005\");\n\tColumnsMap = Map();\n\tColumnsMap.put(\"Workflow\",workflowName);\n\tColumnsMap.put(\"Value\",workflowValue);\n\tconfig = Map();\n\tconfig.put(\"columns\",ColumnsMap);\n\tconfig.put(\"updateAllRows\",false);\n\tcriteria = \"\\\"WorkFlow\\\"='\" + workflowName + \"'\";\n\tconfig.put(\"criteria\",criteria);\n\tparameters = \"CONFIG=\" + config.toString();\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://analyticsapi.zoho.com/restapi/v2/workspaces/\" + workspaceId + \"/views/\" + viewId + \"/rows?\" + parameters\n\t\ttype :PUT\n\t\theaders:headersMap\n\t\tconnection:\"zan\"\n\t];\n\tinfo response;\n\treturn \"\";\n}\nelse\n{\n\torgId = \"713609221\";\n\tworkspaceId = \"2222485000006542013\";\n\tviewId = \"2222485000007742002\";\n\tcolumnsMap = Map();\n\tcolumnsMap.put(\"Workflow\",workflowName);\n\tcolumnsMap.put(\"Value\",workflowValue);\n\tcolumns = Map();\n\tcolumns.put(\"columns\",columnsMap);\n\tparamsMap = Map();\n\tparamsMap.put(\"CONFIG\",columns.toString());\n\theadersMap = Map();\n\theadersMap.put(\"ZANALYTICS-ORGID\",orgId);\n\tresponse = invokeurl\n\t[\n\t\turl :\"https://analyticsapi.zoho.com/restapi/v2/workspaces/\" + workspaceId + \"/views/\" + viewId + \"/rows\"\n\t\ttype :POST\n\t\tparameters:paramsMap\n\t\theaders:headersMap\n\t\tconnection:\"zan\"\n\t];\n\tinfo response;\n\treturn \"\";\n}"
    },
    {
        "api_name": "test_b",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000002062001",
                "connectionLinkName": "zoho_books",
                "connectionName": "zoho_books",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoBooks.fullaccess.all",
                    "ZohoBooks.settings.READ"
                ],
                "serviceName": "zoho_books",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test_b",
        "id": "512029000002395001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-02-02T09:42:45+01:00",
        "name": "test_b",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_b/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_b/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_b()\n{\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/books/v3/crm/item/4444945000030861008/import?organization_id=713248035\"\n\ttype :POST\n\tconnection:\"zoho_books\"\n];\ninfo response;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_books",
                    "method": "post",
                    "url": "https://www.zohoapis.com/books/v3/crm/item/4444945000030861008/import?organization_id=713248035"
                }
            ]
        },
        "updatedTime": "2024-02-02 00:42:47.0",
        "workflow": "response = invokeurl\n[\n\turl :\"https://www.zohoapis.com/books/v3/crm/item/4444945000030861008/import?organization_id=713248035\"\n\ttype :POST\n\tconnection:\"zoho_books\"\n];\ninfo response;\nreturn \"\";"
    },
    {
        "api_name": "shopifytocrmv2__oz_shopify_getcount",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "oz_shopify_getCount",
        "id": "512029000002618031",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-05-18T17:54:35+02:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_getcount/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/shopifytocrmv2__oz_shopify_getcount/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "artest2",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001275001",
                "connectionLinkName": "zoho_workdrive",
                "connectionName": "zoho_workdrive",
                "isUserDefinedService": "false",
                "scopes": [
                    "WorkDrive.files.ALL",
                    "WorkDrive.files.CREATE",
                    "WorkDrive.files.DELETE",
                    "WorkDrive.files.READ",
                    "WorkDrive.files.UPDATE",
                    "WorkDrive.files.UPDATE ",
                    "WorkDrive.files.sharing.CREATE",
                    "WorkDrive.files.sharing.READ",
                    "WorkDrive.team.ALL",
                    "WorkDrive.teamfolders.CREATE",
                    "WorkDrive.teamfolders.DELETE",
                    "WorkDrive.teamfolders.READ",
                    "WorkDrive.teamfolders.admin.READ",
                    "WorkDrive.users.ALL",
                    "WorkDrive.users.READ",
                    "WorkDrive.workspace.ALL",
                    "Workdrive.files.READ",
                    "ZohoFiles.files.CREATE",
                    "ZohoFiles.files.READ",
                    "ZohoSearch.securesearch.READ"
                ],
                "serviceName": "zoho_workdrive",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "artest2",
        "id": "512029000002293011",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2023-11-30T01:50:55+01:00",
        "name": "artest2",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "jobid",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/artest2/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/artest2/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.artest2(string jobid)\n{\nfileName = jobid + \"_\" + \"priceList\";\ndecodeFile = zoho.encryption.urlEncode(fileName);\ninfo decodeFile;\n//7uvk842dc943acedd46e8b65e50ebadc25afc\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teams/k2yvj5adcac9666b44afaae52400037071fa7/records?\" + \"search%5Ball%5D=\" + fileName + \"&filter%5BparentId%5D=7uvk80ae72ceda3ae4dab838b085097d86667\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\nfile = response.get(\"data\").get(0);\nif(!file.isNull())\n{\n\theader = Map();\n\theader.put(\"content-type\",\"application/vnd.api+json\");\n\tfileObj = invokeurl\n\t[\n\t\turl :\"https://download.zoho.com/v1/workdrive/download/\" + file.get(\"id\")\n\t\ttype :GET\n\t\theaders:header\n\t\tconnection:\"zoho_workdrive\"\n\t];\n\treturn file;\n}\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "params": [
                "jobid"
            ],
            "webhooks": [
                {
                    "connection": "zoho_workdrive",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_workdrive",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2023-11-29 16:50:46.0",
        "workflow": "fileName = jobid + \"_\" + \"priceList\";\ndecodeFile = zoho.encryption.urlEncode(fileName);\ninfo decodeFile;\n//7uvk842dc943acedd46e8b65e50ebadc25afc\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/workdrive/api/v1/teams/k2yvj5adcac9666b44afaae52400037071fa7/records?\" + \"search%5Ball%5D=\" + fileName + \"&filter%5BparentId%5D=7uvk80ae72ceda3ae4dab838b085097d86667\"\n\ttype :GET\n\theaders:header\n\tconnection:\"zoho_workdrive\"\n];\nfile = response.get(\"data\").get(0);\nif(!file.isNull())\n{\n\theader = Map();\n\theader.put(\"content-type\",\"application/vnd.api+json\");\n\tfileObj = invokeurl\n\t[\n\t\turl :\"https://download.zoho.com/v1/workdrive/download/\" + file.get(\"id\")\n\t\ttype :GET\n\t\theaders:header\n\t\tconnection:\"zoho_workdrive\"\n\t];\n\treturn file;\n}\nreturn \"\";"
    },
    {
        "api_name": "createMeeting",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000000436001",
                "connectionLinkName": "testdda",
                "connectionName": "test",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoSign.account.ALL",
                    "ZohoSign.documents.ALL",
                    "ZohoSign.documents.UPDATE",
                    "ZohoSign.templates.ALL"
                ],
                "serviceName": "zoho_sign",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "createMeeting",
        "id": "512029000002378001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-02-01T13:57:56+01:00",
        "name": "createMeeting",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/createMeeting/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/createMeeting/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.createMeeting()\n{\nrecipient1 = Map();\nrecipient1.put(\"recipient_1\",\"od@crmoz.com\");\nrecipient1.put(\"recipient_name\",\"Shawn\");\nrecipient1.put(\"action_type\",\"sign\");\nemail = List();\nemail.add(recipient1);\ninputMap = Map();\ninputMap.put(\"subject\",\"Document to sign\");\ninputMap.put(\"message\",\"Please verify and sign the document\");\ninputMap.put(\"email_id\",\"user10@demo4.crmoz.com\");\ninfo zoho.writer.signDocument(\"s89p0f39d83c28c8a43909ae1ce2c05d2fbfb\",\"zohosign\",email,\"Signed Document\",inputMap,\"testdda\");\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "testdda",
                    "display_name": "Zoho Writer",
                    "function": "zoho.writer.signDocument",
                    "service": "Writer"
                }
            ]
        },
        "updatedTime": "2024-02-01 04:57:57.0",
        "workflow": "recipient1 = Map();\nrecipient1.put(\"recipient_1\",\"od@crmoz.com\");\nrecipient1.put(\"recipient_name\",\"Shawn\");\nrecipient1.put(\"action_type\",\"sign\");\nemail = List();\nemail.add(recipient1);\ninputMap = Map();\ninputMap.put(\"subject\",\"Document to sign\");\ninputMap.put(\"message\",\"Please verify and sign the document\");\ninputMap.put(\"email_id\",\"user10@demo4.crmoz.com\");\ninfo zoho.writer.signDocument(\"s89p0f39d83c28c8a43909ae1ce2c05d2fbfb\",\"zohosign\",email,\"Signed Document\",inputMap,\"testdda\");"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002613024",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Untitled_Function3",
        "nameSpace": "ConnectorAction",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ConnectorAction.Untitled_Function3()\n{\nscheduledMap = Map();\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"DELETE\"}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-05-20 08:28:15.0",
        "workflow": "scheduledMap = Map();\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"DELETE\"}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);"
    },
    {
        "api_name": "test_people",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000001768001",
                "connectionLinkName": "zoho_people",
                "connectionName": "zoho_people",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZOHOPEOPLE.attendance.all",
                    "ZOHOPEOPLE.employee.ALL",
                    "ZOHOPEOPLE.forms.ALL"
                ],
                "serviceName": "zoho_people",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test_people",
        "id": "512029000002449001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-02-27T12:13:39+01:00",
        "name": "test_people",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_people/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_people/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_people()\n{\npeople = zoho.people.getRecords(\"employee\",0,200,{},\"zoho_people\");\ndat = \"2024-02-27T11:49:31\";\n//r= dat.toDate();\n//info people.get(1) ;\nform = dat.replaceFirst(\"T\",\" \");\ninfo form;\n/*\nurlData = \"https://people.zoho.com/people/api/attendance?dateFormat=yyyy-MM-dd&checkIn=2024-02-27 12:55:31&checkOut=2024-02-27 12:57:31&empId=HRM1\";\nresp = invokeurl\n[\n\turl :urlData\n\ttype :POST\n\tconnection:\"zoho_people\"\n];\ninfo resp;*/\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "connection": "zoho_people",
                    "display_name": "Zoho People",
                    "function": "zoho.people.getRecords",
                    "service": "ZohoPeople"
                }
            ]
        },
        "updatedTime": "2024-02-27 03:13:41.0",
        "workflow": "people = zoho.people.getRecords(\"employee\",0,200,{},\"zoho_people\");\ndat = \"2024-02-27T11:49:31\";\n//r= dat.toDate();\n//info people.get(1) ;\nform = dat.replaceFirst(\"T\",\" \");\ninfo form;\n/*\nurlData = \"https://people.zoho.com/people/api/attendance?dateFormat=yyyy-MM-dd&checkIn=2024-02-27 12:55:31&checkOut=2024-02-27 12:57:31&empId=HRM1\";\nresp = invokeurl\n[\n\turl :urlData\n\ttype :POST\n\tconnection:\"zoho_people\"\n];\ninfo resp;*/\nreturn \"\";"
    },
    {
        "api_name": "zohobookingstest__setcrmfields",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "setcrmfields",
        "id": "512029000002874010",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T19:21:09+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/zohobookingstest__setcrmfields/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/zohobookingstest__setcrmfields/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000003006001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function43",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function43(map installParamMap)\n{\nm = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\nresMap = resp.get(\"response\").toMap();\norg = resMap.get(\"org\").toMap();\nzsoid = org.get(\"zgid\");\ninfo \"Zsoid : \" + zsoid;\n/*b = zoho.loginuserid;\nm = Map();\nresp = zoho.crm.invokeConnector(\"crm.getusers\",m);\nrespMap = resp.get(\"response\").toMap();\nusers = respMap.get(\"users\");\nuserList = users.toJSONList();\nuserIds = List();\nzuid = 0;\nfor each  user in userList\n{\n\td = user.get(\"email\");\n\tif(d == b)\n\t{\n\t\tzuid = user.get(\"zuid\");\n\t}\n}\ninfo \"Zuid : \" + zuid;*/\nparam_info = Map();\n//param_info.put(\"zuid\",zuid);\nparam_info.put(\"zsoid\",zsoid);\nparam_info.put(\"extension\",\"KanbanBoard\");\n// Supply the URL and parameters to the invoke URL task\nresponse = invokeurl\n[\n\turl :\"https://extensions.zoho.com/plugin/common/uicdata?action=uninstalled\"\n\ttype :POST\n\tparameters:param_info\n];\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ],
            "webhooks": [
                {
                    "method": "post",
                    "url": "https://extensions.zoho.com/plugin/common/uicdata?action=uninstalled"
                }
            ]
        },
        "updatedTime": "2025-02-12 07:02:20.0",
        "workflow": "m = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\nresMap = resp.get(\"response\").toMap();\norg = resMap.get(\"org\").toMap();\nzsoid = org.get(\"zgid\");\ninfo \"Zsoid : \" + zsoid;\n/*b = zoho.loginuserid;\nm = Map();\nresp = zoho.crm.invokeConnector(\"crm.getusers\",m);\nrespMap = resp.get(\"response\").toMap();\nusers = respMap.get(\"users\");\nuserList = users.toJSONList();\nuserIds = List();\nzuid = 0;\nfor each  user in userList\n{\n\td = user.get(\"email\");\n\tif(d == b)\n\t{\n\t\tzuid = user.get(\"zuid\");\n\t}\n}\ninfo \"Zuid : \" + zuid;*/\nparam_info = Map();\n//param_info.put(\"zuid\",zuid);\nparam_info.put(\"zsoid\",zsoid);\nparam_info.put(\"extension\",\"KanbanBoard\");\n// Supply the URL and parameters to the invoke URL task\nresponse = invokeurl\n[\n\turl :\"https://extensions.zoho.com/plugin/common/uicdata?action=uninstalled\"\n\ttype :POST\n\tparameters:param_info\n];\ninfo response;"
    },
    {
        "api_name": "ghj",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "description": null,
        "display_name": "ghj",
        "id": "512029000002930001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-12-15T04:45:17+01:00",
        "name": "ghj",
        "nameSpace": "automation",
        "params": [
            {
                "name": "gf",
                "type": "BIGINT"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/ghj/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/ghj/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.ghj(Int gf)\n{\ninfo zoho.crm.updateRecord(\"DIDI\",4444945000041117177,{\"ff\":zoho.currenttime.addMinutes(1).toString(\"yyyy-MM-dd'T'HH:mm:ss\")},{\"trigger\":{\"workflow\",\"blueprint\",\"approval\"}});\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.updateRecord",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-12-14 19:45:17.0",
        "workflow": "info zoho.crm.updateRecord(\"DIDI\",4444945000041117177,{\"ff\":zoho.currenttime.addMinutes(1).toString(\"yyyy-MM-dd'T'HH:mm:ss\")},{\"trigger\":{\"workflow\",\"blueprint\",\"approval\"}});"
    },
    {
        "api_name": "test_survey",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "test_survey",
        "id": "512029000002934001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-12-16T14:44:48+01:00",
        "name": "test_survey",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_survey/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_survey/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test_survey()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-12-16 05:44:48.0",
        "workflow": null
    },
    {
        "api_name": "email_2",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "EMAIL_2",
        "id": "512029000003058001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-03-04T11:12:42+01:00",
        "name": "EMAIL_2",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/email_2/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/email_2/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.EMAIL_2(String crmAPIRequest)\n{\ncrmAPIRequest = crmAPIRequest.toMap();\nrequest_params = crmAPIRequest.get(\"params\");\nlead_id = request_params.get(\"lead_id\");\nresponse = Map();\nheaders = Map();\nheaders.put(\"X-ZOHO-SOURCE\",\"CRM\");\nheaders.put(\"X-Frame-Options\",\"SAMEORIGIN\");\nheaders.put(\"X-RATELIMIT-LIMIT\",\"60\");\nresponse.put(\"headers\",headers);\nresponse.put(\"Content-Type\",\"text/html\");\nbody = \"div style-'max-width: 600px; margin: 0 auto; '>\";\nbody = body + \"<h1>\" + lead_id + \"</h1›\";\nbody = body + \"<p>CRMOZ will ensure you receive the latest news about Zoho and many other products! Have a great day!</p›\";\nbody = body + \"</div>\";\nresponse.put(\"body\",body);\nreturn {\"crmAPIResponse\":response};\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false,
            "params": [
                "crmAPIRequest"
            ]
        },
        "updatedTime": "2025-03-04 02:12:43.0",
        "workflow": "crmAPIRequest = crmAPIRequest.toMap();\nrequest_params = crmAPIRequest.get(\"params\");\nlead_id = request_params.get(\"lead_id\");\nresponse = Map();\nheaders = Map();\nheaders.put(\"X-ZOHO-SOURCE\",\"CRM\");\nheaders.put(\"X-Frame-Options\",\"SAMEORIGIN\");\nheaders.put(\"X-RATELIMIT-LIMIT\",\"60\");\nresponse.put(\"headers\",headers);\nresponse.put(\"Content-Type\",\"text/html\");\nbody = \"div style-'max-width: 600px; margin: 0 auto; '>\";\nbody = body + \"<h1>\" + lead_id + \"</h1›\";\nbody = body + \"<p>CRMOZ will ensure you receive the latest news about Zoho and many other products! Have a great day!</p›\";\nbody = body + \"</div>\";\nresponse.put(\"body\",body);\nreturn {\"crmAPIResponse\":response};"
    },
    {
        "api_name": "test8",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "display_name": "test",
        "id": "512029000003056001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-03-04T10:33:51+01:00",
        "name": "test8",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test8/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test8/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test8()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2025-03-04 01:33:52.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": "testcliq",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000028197096",
                "connectionLinkName": "zoho_cliq",
                "connectionName": "zoho_cliq",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCliq.Webhooks.CREATE",
                    "ZohoCliq.Channels.All",
                    "ZohoCliq.StorageData.ALL",
                    "ZohoCliq.Reminders.ALL",
                    "ZohoCliq.Teams.ALL",
                    "ZohoCliq.Buddies.READ",
                    "ZohoCliq.Messages.UPDATE",
                    "ZohoCliq.Messages.READ",
                    "ZohoCliq.Users.READ",
                    "ZohoCliq.Organisation.READ",
                    "ZohoCliq.Messages.DELETE",
                    "ZohoCliq.Profile.CREATE",
                    "ZohoCliq.Profile.DELETE",
                    "ZohoCliq.Profile.READ",
                    "ZohoCliq.Chats.READ",
                    "ZohoCliq.Chats.UPDATE",
                    "ZohoCliq.Chats.CREATE",
                    "ZohoCliq.Chats.DELETE",
                    "ZohoCliq.Users.UPDATE",
                    "ZohoCliq.Users.CREATE",
                    "ZohoCliq.Applications.ALL",
                    "ZohoCliq.Profile.Update",
                    "ZohoCliq.OrganizationChats.READ",
                    "ZohoCliq.OrganizationMessages.READ",
                    "ZohoCliq.messageactions.CREATE",
                    "ZohoCliq.Departments.ALL",
                    "ZohoCliq.chatlets.ALL",
                    "ZohoCliq.Organisation.CREATE",
                    "ZohoCliq.Attachments.READ",
                    "ZohoCliq.Designations.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testCliq",
        "id": "512029000002885008",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-13T17:36:07+01:00",
        "name": "testCliq",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testcliq/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testcliq/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.testCliq()\n{\nchannelId = \"E3000103642295\";\nemails = list();\nemails.add(\"testcliq529@gmail.com\");\npayload = Map({\"email_ids\":emails});\ninviteMember = invokeurl\n[\n\turl :\"https://cliq.zoho.com/api/v2/channels/\" + channelId + \"/members\"\n\ttype :post\n\tparameters:payload.toString()\n\tconnection:\"zoho_cliq\"\n];\ninfo inviteMember;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_cliq",
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-11-13 08:36:08.0",
        "workflow": "channelId = \"E3000103642295\";\nemails = list();\nemails.add(\"testcliq529@gmail.com\");\npayload = Map({\"email_ids\":emails});\ninviteMember = invokeurl\n[\n\turl :\"https://cliq.zoho.com/api/v2/channels/\" + channelId + \"/members\"\n\ttype :post\n\tparameters:payload.toString()\n\tconnection:\"zoho_cliq\"\n];\ninfo inviteMember;\nreturn \"\";"
    },
    {
        "api_name": "test14",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "test",
        "id": "512029000003053013",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-03-04T10:27:26+01:00",
        "name": "test14",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test14/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test14/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test14()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2025-03-04 01:27:27.0",
        "workflow": null
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002883001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function34",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function34(map installParamMap)\n{\n}",
        "source": "crm",
        "tasks": {},
        "updatedTime": "2024-11-07 10:21:11.0",
        "workflow": null
    },
    {
        "api_name": "null",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_product_$KEY$Products.ID",
                        "value": "Products.Product Id"
                    }
                ],
                "id": 4444945000039870500,
                "isOldDataNeeded": false,
                "module": "Products",
                "name": "updateProductsToShopify",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "ShopifyWFProduct",
        "id": "512029000002848001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-10-17T14:59:36+02:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002881001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Untitled_Function21",
        "nameSpace": "ConnectorAction",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ConnectorAction.Untitled_Function21()\n{\nm = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\norgDetails = resp.toMap().get(\"response\").toMap().get(\"org\");\nzgid = orgDetails.toMap().get(\"zgid\");\ngetmap = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\nplugin_version = \"\";\nplugin_details_response = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.getplugindetails\",m);\nplugin_list = plugin_details_response.get(\"data\").toJSONList();\nfor each  plugin in plugin_list\n{\n\tplugin = plugin.toMap();\n\tif(plugin.get(\"PLUGIN_NAME\").contains(\"zohobookingstest\"))\n\t{\n\t\tplugin_version = plugin.get(\"PLUGIN_VERSION\");\n\t}\n}\napiresponse = zoho.crm.invokeConnector(\"crm.zapikey\",getmap);\nzapikey = apiresponse.get(\"response\");\ncrm_signal_webhook_url = \"https://platform.zoho.com/crm/v2/functions/zohobookingstest__addeventandcontactfromzohobookings/actions/execute?auth_type=apikey&zapikey=\" + zapikey;\nscheduledMap = Map();\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"ADD\",\"WEBHOOK_URL\":crm_signal_webhook_url,\"ORG_ID\":zgid,\"CUSTOMER_MODULE\":zoho.crm.getOrgVariable(\"zohobookingstest__Module\"),\"PLUGIN_VERSION\":plugin_version}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);\ndynamic_map = Map();\ndynamic_map.put(\"linkDetails\",zoho.encryption.urlEncode({\"ID\":\"\"}));\nbookingUrl = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.getbookinglink\",dynamic_map);\nurlresponse = bookingUrl.toMap().get(\"response\").toMap().get(\"response\").toMap().get(\"returnvalue\");\nbookingLink = urlresponse.get(\"bookingLink\");\nsetresponse = zoho.crm.invokeConnector(\"crm.set\",{\"apiname\":\"zohobookingstest__BookingUrl\",\"value\":zoho.encryption.urlDecode(bookingLink)});\nsetresponse = zoho.crm.invokeConnector(\"crm.set\",{\"apiname\":\"zohobookingstest__BookingUrlId\",\"value\":urlresponse.get(\"module\") + \"_id=\" + urlresponse.get(\"id\")});\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getOrgVariable",
                    "service": "ZohoCRM"
                },
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-11-07 10:21:09.0",
        "workflow": "m = Map();\nresp = zoho.crm.invokeConnector(\"crm.getorg\",m);\norgDetails = resp.toMap().get(\"response\").toMap().get(\"org\");\nzgid = orgDetails.toMap().get(\"zgid\");\ngetmap = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\nplugin_version = \"\";\nplugin_details_response = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.getplugindetails\",m);\nplugin_list = plugin_details_response.get(\"data\").toJSONList();\nfor each  plugin in plugin_list\n{\n\tplugin = plugin.toMap();\n\tif(plugin.get(\"PLUGIN_NAME\").contains(\"zohobookingstest\"))\n\t{\n\t\tplugin_version = plugin.get(\"PLUGIN_VERSION\");\n\t}\n}\napiresponse = zoho.crm.invokeConnector(\"crm.zapikey\",getmap);\nzapikey = apiresponse.get(\"response\");\ncrm_signal_webhook_url = \"https://platform.zoho.com/crm/v2/functions/zohobookingstest__addeventandcontactfromzohobookings/actions/execute?auth_type=apikey&zapikey=\" + zapikey;\nscheduledMap = Map();\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"ADD\",\"WEBHOOK_URL\":crm_signal_webhook_url,\"ORG_ID\":zgid,\"CUSTOMER_MODULE\":zoho.crm.getOrgVariable(\"zohobookingstest__Module\"),\"PLUGIN_VERSION\":plugin_version}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);\ndynamic_map = Map();\ndynamic_map.put(\"linkDetails\",zoho.encryption.urlEncode({\"ID\":\"\"}));\nbookingUrl = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.getbookinglink\",dynamic_map);\nurlresponse = bookingUrl.toMap().get(\"response\").toMap().get(\"response\").toMap().get(\"returnvalue\");\nbookingLink = urlresponse.get(\"bookingLink\");\nsetresponse = zoho.crm.invokeConnector(\"crm.set\",{\"apiname\":\"zohobookingstest__BookingUrl\",\"value\":zoho.encryption.urlDecode(bookingLink)});\nsetresponse = zoho.crm.invokeConnector(\"crm.set\",{\"apiname\":\"zohobookingstest__BookingUrlId\",\"value\":urlresponse.get(\"module\") + \"_id=\" + urlresponse.get(\"id\")});"
    },
    {
        "api_name": "test6",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "display_name": "test",
        "id": "512029000002997001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-02-05T10:18:55+01:00",
        "name": "test6",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test6/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test6/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test6()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2025-02-05 01:18:56.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": "null",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_meeting_$KEY$Events.ID",
                        "value": "Meetings.Meeting Id"
                    }
                ],
                "id": 4444945000040259000,
                "isOldDataNeeded": false,
                "module": "Meetings",
                "name": "addEventsToZohoBookings",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "addEventsToBookings",
        "id": "512029000002886001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T19:21:09+01:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "test7",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "display_name": "test",
        "id": "512029000003020001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-02-18T10:17:04+01:00",
        "name": "test7",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test7/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test7/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test7()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2025-02-18 01:17:04.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": "null",
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [
                    {
                        "name": "$map_lead_$KEY$Leads.ID",
                        "value": "id"
                    },
                    {
                        "name": "$map_lead_$KEY$First_Name",
                        "value": "First_Name"
                    },
                    {
                        "name": "$map_lead_$KEY$Email",
                        "value": "Email"
                    },
                    {
                        "name": "$map_lead_$KEY$Last_Name",
                        "value": "Last_Name"
                    }
                ],
                "id": "4444945000040259255",
                "module": "Leads",
                "name": "Email Booking URL"
            }
        ],
        "category": "button",
        "config": true,
        "description": null,
        "display_name": "emailCalendarToLead",
        "id": "512029000002888001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T19:21:10+01:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "zohobookingstest__pluginaction",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "pluginaction",
        "id": "512029000002879010",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T19:21:09+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/zohobookingstest__pluginaction/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/zohobookingstest__pluginaction/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "tewt",
        "associated_place": null,
        "category": "button",
        "config": false,
        "display_name": "wt",
        "id": "512029000003005001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-02-12T14:47:09+01:00",
        "name": "tewt",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/tewt/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/tewt/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.tewt()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2025-02-12 05:47:10.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": "dash_con",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000035665163",
                "connectionLinkName": "testoauth",
                "connectionName": "Test Oauth",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoPC.files.ALL",
                    "ZohoProjects.projects.ALL",
                    "ZohoProjects.tasks.READ",
                    "ZohoProjects.tasks.ALL",
                    "WorkDrive.files.ALL",
                    "ZohoCRM.coql.READ",
                    "ZohoPC.files.READ",
                    "ZohoProjects.portals.ALL",
                    "WorkDrive.files.READ",
                    "WorkDrive.files.CREATE",
                    "WorkDrive.files.UPDATE",
                    "WorkDrive.files.DELETE"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "dash_con",
        "id": "512029000003041007",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-03-05T09:17:38+01:00",
        "name": "dash_con",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/dash_con/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/dash_con/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.dash_con()\n{\n// \tprojectId=\"1590562000004835168\";\n// \ttaskId=\"1590562000005488007\";\n// \tattachmentId=\"1590562000005494003\";\n// \t// https://projects.zoho.com/api/v3/portal/711667417/projects/1590562000004835168/attachments/1590562000005490001?entity_type=task&entity_id=1590562000005488007\n// \t//1590562000005494003\n// \t// 711667417 1590562000004835168 1590562000005488007 1590562000005490000\n// \t// \turl :\"https://projectsapi.zoho.com/restapi/portal/711667417/projects/1590562000004835168/tasks/1590562000005488007/attachments/1590562000000033619/\"\n// updateTaskResponse = invokeurl\n// [\n// \turl :\"https://projectsapi.zoho.com/restapi/portal/711667417/projects/\"+projectId+\"/tasks/\"+taskId+\"/attachments/\"+attachmentId+\"/\"\n// \ttype :DELETE\n// \tconnection:\"testoauth\"\n// ];\n// info updateTaskResponse;\n// \turl = \"https://workdrive.zoho.com/api/v1/files/iif2244e94eb7cda742f085fd414dd65e7bfc\";\n// \tfile = Map();\n// \tfile.put(\"attributes\", {\"status\": 51});\n// \tfile.put(\"type\", \"files\");\n// \treq = Map();\n// \treq.put(\"data\", file);\n// \tinfo req;\n// \tr = invokeurl\n//     [\n//     \turl: url\n//     \ttype: PATCH\n//     \tparameters: req.toString()\n// \t\tconnection: \"testoauth\"\n//     ];\n// \tinfo r;\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\ndata = Map();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"status\",\"51\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"files\");\ndata.put(\"data\",data_param1);\ninfo data.toJSONList();\nresponse = invokeurl\n[\n\turl :\"https://zohoapis.com/workdrive/api/v1/files/psscse7bfabd62e564683a32f6410f42b0c5e\"\n\ttype :PATCH\n\tparameters:data.toString()\n\theaders:header\n\tconnection:\"testoauth\"\n];\ninfo response;\nreturn \"\";\n// return \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "testoauth",
                    "method": "patch",
                    "url": "https://zohoapis.com/workdrive/api/v1/files/psscse7bfabd62e564683a32f6410f42b0c5e"
                }
            ]
        },
        "updatedTime": "2025-03-05 00:17:39.0",
        "workflow": "// \tprojectId=\"1590562000004835168\";\n// \ttaskId=\"1590562000005488007\";\n// \tattachmentId=\"1590562000005494003\";\n// \t// https://projects.zoho.com/api/v3/portal/711667417/projects/1590562000004835168/attachments/1590562000005490001?entity_type=task&entity_id=1590562000005488007\n// \t//1590562000005494003\n// \t// 711667417 1590562000004835168 1590562000005488007 1590562000005490000\n// \t// \turl :\"https://projectsapi.zoho.com/restapi/portal/711667417/projects/1590562000004835168/tasks/1590562000005488007/attachments/1590562000000033619/\"\n// updateTaskResponse = invokeurl\n// [\n// \turl :\"https://projectsapi.zoho.com/restapi/portal/711667417/projects/\"+projectId+\"/tasks/\"+taskId+\"/attachments/\"+attachmentId+\"/\"\n// \ttype :DELETE\n// \tconnection:\"testoauth\"\n// ];\n// info updateTaskResponse;\n// \turl = \"https://workdrive.zoho.com/api/v1/files/iif2244e94eb7cda742f085fd414dd65e7bfc\";\n// \tfile = Map();\n// \tfile.put(\"attributes\", {\"status\": 51});\n// \tfile.put(\"type\", \"files\");\n// \treq = Map();\n// \treq.put(\"data\", file);\n// \tinfo req;\n// \tr = invokeurl\n//     [\n//     \turl: url\n//     \ttype: PATCH\n//     \tparameters: req.toString()\n// \t\tconnection: \"testoauth\"\n//     ];\n// \tinfo r;\nheader = Map();\nheader.put(\"Accept\",\"application/vnd.api+json\");\ndata = Map();\ndata_param1 = Map();\natt_param1 = Map();\natt_param1.put(\"status\",\"51\");\ndata_param1.put(\"attributes\",att_param1);\ndata_param1.put(\"type\",\"files\");\ndata.put(\"data\",data_param1);\ninfo data.toJSONList();\nresponse = invokeurl\n[\n\turl :\"https://zohoapis.com/workdrive/api/v1/files/psscse7bfabd62e564683a32f6410f42b0c5e\"\n\ttype :PATCH\n\tparameters:data.toString()\n\theaders:header\n\tconnection:\"testoauth\"\n];\ninfo response;\nreturn \"\";\n// return \"\";"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002874003",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Install_Function36",
        "nameSpace": "ExtensionAction",
        "params": [
            {
                "name": "installParamMap",
                "type": "MAP"
            }
        ],
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ExtensionAction.Install_Function36(map installParamMap)\n{\nscheduledMap = Map();\ngetmap = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\napiresponse = zoho.crm.invokeConnector(\"crm.zapikey\",getmap);\nzapikey = apiresponse.get(\"response\");\ncrm_signal_webhook_url = \"https://platform.zoho.com/crm/v2/functions/zohobookingstest__addeventandcontactfromzohobookings/actions/execute?auth_type=apikey&zapikey=\" + zapikey;\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"DELETE\",\"WEBHOOK_URL\":crm_signal_webhook_url}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);\ninfo response;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-11-07 10:21:11.0",
        "workflow": "scheduledMap = Map();\ngetmap = {\"nameSpace\":\"<portal_name.extension_namespace>\"};\napiresponse = zoho.crm.invokeConnector(\"crm.zapikey\",getmap);\nzapikey = apiresponse.get(\"response\");\ncrm_signal_webhook_url = \"https://platform.zoho.com/crm/v2/functions/zohobookingstest__addeventandcontactfromzohobookings/actions/execute?auth_type=apikey&zapikey=\" + zapikey;\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"DELETE\",\"WEBHOOK_URL\":crm_signal_webhook_url}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);\ninfo response;"
    },
    {
        "api_name": "test_createzohosigndocument",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test_createZohoSignDocument",
        "id": "512029000003026007",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-02-26T20:30:50+01:00",
        "name": "test_createZohoSignDocument",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_createzohosigndocument/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_createzohosigndocument/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_createZohoSignDocument()\n{\ntemplateId = 175983000000183001;\ntemplate = Map();\n//-----------------------------------------------------------------\naction_sign = Map();\naction_sign.put(\"action_id\",175983000000183022);\naction_sign.put(\"recipient_name\",\"Test User\");\naction_sign.put(\"recipient_email\",\"iy@crmoz.com\");\naction_sign.put(\"is_embedded\",true);\ntemplate_actions = list();\ntemplate_actions.add(action_sign);\ntemplate.put(\"actions\",template_actions);\n//-----------------------------------------------------------------\ndefault_fields = Map();\ndefault_fields.put(\"CustomTextField\",\"Test Populated Value\");\ndefault_fields.put(\"CustomDate\",\"26-02-2025\");\ndefault_fields.put(\"Email\",\"iy@crmoz.com\");\ndefault_fields.put(\"CustomDropDown\",\"Dropdown2\");\ndefault_fields.put(\"Email\",\"iy@crmoz.com\");\ntemplate.put(\"default_fields\",default_fields);\n//-----------------------------------------------------------------\nrequest_data = Map();\nrequest_data.put(\"templates\",template);\nrequest_payload = Map();\nrequest_payload.put(\"data\",request_data);\nrequest_payload.put(\"testing\",\"true\");\nrequest_payload.put(\"is_quicksend\",false);\ninfo request_payload;\ninfo zoho.sign.createUsingTemplate(templateId,request_payload);\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho Sign",
                    "function": "zoho.sign.createUsingTemplate",
                    "service": "ZohoSign"
                }
            ]
        },
        "updatedTime": "2025-02-26 11:30:50.0",
        "workflow": "templateId = 175983000000183001;\ntemplate = Map();\n//-----------------------------------------------------------------\naction_sign = Map();\naction_sign.put(\"action_id\",175983000000183022);\naction_sign.put(\"recipient_name\",\"Test User\");\naction_sign.put(\"recipient_email\",\"iy@crmoz.com\");\naction_sign.put(\"is_embedded\",true);\ntemplate_actions = list();\ntemplate_actions.add(action_sign);\ntemplate.put(\"actions\",template_actions);\n//-----------------------------------------------------------------\ndefault_fields = Map();\ndefault_fields.put(\"CustomTextField\",\"Test Populated Value\");\ndefault_fields.put(\"CustomDate\",\"26-02-2025\");\ndefault_fields.put(\"Email\",\"iy@crmoz.com\");\ndefault_fields.put(\"CustomDropDown\",\"Dropdown2\");\ndefault_fields.put(\"Email\",\"iy@crmoz.com\");\ntemplate.put(\"default_fields\",default_fields);\n//-----------------------------------------------------------------\nrequest_data = Map();\nrequest_data.put(\"templates\",template);\nrequest_payload = Map();\nrequest_payload.put(\"data\",request_data);\nrequest_payload.put(\"testing\",\"true\");\nrequest_payload.put(\"is_quicksend\",false);\ninfo request_payload;\ninfo zoho.sign.createUsingTemplate(templateId,request_payload);\nreturn \"\";"
    },
    {
        "api_name": "test2_1",
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [],
                "id": "4444945000040234016",
                "module": "Contacts",
                "name": "nothing"
            }
        ],
        "category": "button",
        "config": true,
        "connections": [
            {
                "connectedServiceId": "5000000024233082",
                "connectionLinkName": "wd",
                "connectionName": "wd",
                "isUserDefinedService": "false",
                "scopes": [
                    "TeamDrive.team.ALL",
                    "TeamDrive.files.ALL",
                    "WorkDrive.team.ALL",
                    "WorkDrive.files.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test",
        "id": "512029000002872001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T16:56:59+01:00",
        "name": "test2",
        "nameSpace": "button",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test2_1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test2_1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.test2()\n{\nmp = Map();\nmp.put(\"Accept\",\"application/vnd.api+json\");\ndl = Map();\ndl.put(\"download_link\",{\"download_limit\",\"5\"});\nexternalLinkMap = Map();\nexternalLinkMap.put(\"resource_id\",\"n3sas0d9aba2af4a84ed8ae500259024d0957\");\nexternalLinkMap.put(\"link_name\",\"workDriveLink\");\nexternalLinkMap.put(\"link_type\",\"download\");\nexternalLinkMap.put(\"request_user_data\",false);\nexternalLinkMap.put(\"allow_download\",true);\nexternalLinkMap.put(\"download_link\",{\"download_limit\":\"5\"});\nattributesMap = {\"attributes\":externalLinkMap,\"type\":\"links\"};\ndataMap = Map();\ndataMap.put(\"data\",attributesMap);\nresp = invokeurl\n[\n\turl :\"https://workdrive.zoho.com/api/v1/links\"\n\ttype :POST\n\tparameters:dataMap.toString()\n\theaders:mp\n\tconnection:\"wd\"\n];\ninfo resp;\nsharedLink = resp.get(\"data\").get(\"attributes\").get(\"link\");\nlinkId = sharedLink.getSuffix(\"external/\").getPrefix(\"/download\");\n//openUrl(sharedLink,\"new_window\");\nopenUrl('https://files.zohoexternal.com/public/workdrive-external/download/n3sas0d9aba2af4a84ed8ae500259024d0957?x-cli-msg={\"linkId\":\"' + linkId + '\"}',\"new window\");\nreturn \"\";\n//return resp;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "wd",
                    "method": "post",
                    "url": "https://workdrive.zoho.com/api/v1/links"
                },
                {
                    "method": "open",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-11-07 07:56:59.0",
        "workflow": "mp = Map();\nmp.put(\"Accept\",\"application/vnd.api+json\");\ndl = Map();\ndl.put(\"download_link\",{\"download_limit\",\"5\"});\nexternalLinkMap = Map();\nexternalLinkMap.put(\"resource_id\",\"n3sas0d9aba2af4a84ed8ae500259024d0957\");\nexternalLinkMap.put(\"link_name\",\"workDriveLink\");\nexternalLinkMap.put(\"link_type\",\"download\");\nexternalLinkMap.put(\"request_user_data\",false);\nexternalLinkMap.put(\"allow_download\",true);\nexternalLinkMap.put(\"download_link\",{\"download_limit\":\"5\"});\nattributesMap = {\"attributes\":externalLinkMap,\"type\":\"links\"};\ndataMap = Map();\ndataMap.put(\"data\",attributesMap);\nresp = invokeurl\n[\n\turl :\"https://workdrive.zoho.com/api/v1/links\"\n\ttype :POST\n\tparameters:dataMap.toString()\n\theaders:mp\n\tconnection:\"wd\"\n];\ninfo resp;\nsharedLink = resp.get(\"data\").get(\"attributes\").get(\"link\");\nlinkId = sharedLink.getSuffix(\"external/\").getPrefix(\"/download\");\n//openUrl(sharedLink,\"new_window\");\nopenUrl('https://files.zohoexternal.com/public/workdrive-external/download/n3sas0d9aba2af4a84ed8ae500259024d0957?x-cli-msg={\"linkId\":\"' + linkId + '\"}',\"new window\");\nreturn \"\";\n//return resp;"
    },
    {
        "api_name": "mass_assign_update",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000036232048",
                "connectionLinkName": "zoho_crm",
                "connectionName": "zoho_crm",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoCRM.settings.ALL",
                    "ZohoCRM.org.ALL",
                    "ZohoCRM.org.READ",
                    "ZohoCRM.coql.READ",
                    "ZohoCRM.signals.ALL"
                ],
                "serviceName": "zlabs_integration",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "mass_assign_update",
        "id": "512029000003007001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-02-13T00:17:52+01:00",
        "name": "mass_assign_update",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/mass_assign_update/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/mass_assign_update/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.mass_assign_update()\n{\ndt = \"2025-02-01T00:00:00-00:00\";\nqueryMap = Map();\n// \tqueryMap.put(\"select_query\", \"select id, Last_Name, First_Name, Last_Activity_Time, Lead_Status from Leads where (Last_Activity_Time >= '\" + dt + \"' and Scheduled_Stage_Date is null) and (Lead_Status not in ('New Potential/ عميل محتمل')) limit 13\");\nqueryMap.put(\"select_query\",\"select id, Last_Name, First_Name, Last_Activity_Time, Lead_Status from Leads where (DATETIMEASSIGN is null) limit 213\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v7/coql\"\n\ttype :POST\n\tparameters:queryMap.toString()\n\tconnection:\"zoho_crm\"\n];\ninfo response;\ncount = response.get(\"info\").get(\"count\");\nlimit = 100;\nadd = 0;\nif(frac(count / limit) > 0)\n{\n\tadd = 1;\n}\niterations = \"\".leftpad(count / limit + add).toList(\"\");\nindex = 0;\n// \tinfo iterations;\nleads = response.get(\"data\");\nfor each  s in iterations\n{\n\trecord_count = limit;\n\tif(count < limit)\n\t{\n\t\trecord_count = count;\n\t}\n\trecord_iterations = \"\".leftpad(record_count).toList(\"\");\n\trecord_index = index * limit;\n\tmass_update = List();\n\tfor each  r in record_iterations\n\t{\n\t\tleadMap = Map();\n\t\tleadMap.put(\"id\",leads.get(record_index).get(\"id\"));\n\t\tleadMap.put(\"DATETIMEASSIGN\",dt);\n\t\tmass_update.add(leadMap);\n\t\trecord_index = record_index + 1;\n\t}\n\t// mass update here !!!!!!!!!!!!\n\tinfo mass_update.size();\n\tinfo mass_update;\n\tcount = count - limit;\n\tindex = index + 1;\n}\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_crm",
                    "method": "post",
                    "url": "https://www.zohoapis.com/crm/v7/coql"
                }
            ]
        },
        "updatedTime": "2025-02-12 15:17:53.0",
        "workflow": "dt = \"2025-02-01T00:00:00-00:00\";\nqueryMap = Map();\n// \tqueryMap.put(\"select_query\", \"select id, Last_Name, First_Name, Last_Activity_Time, Lead_Status from Leads where (Last_Activity_Time >= '\" + dt + \"' and Scheduled_Stage_Date is null) and (Lead_Status not in ('New Potential/ عميل محتمل')) limit 13\");\nqueryMap.put(\"select_query\",\"select id, Last_Name, First_Name, Last_Activity_Time, Lead_Status from Leads where (DATETIMEASSIGN is null) limit 213\");\nresponse = invokeurl\n[\n\turl :\"https://www.zohoapis.com/crm/v7/coql\"\n\ttype :POST\n\tparameters:queryMap.toString()\n\tconnection:\"zoho_crm\"\n];\ninfo response;\ncount = response.get(\"info\").get(\"count\");\nlimit = 100;\nadd = 0;\nif(frac(count / limit) > 0)\n{\n\tadd = 1;\n}\niterations = \"\".leftpad(count / limit + add).toList(\"\");\nindex = 0;\n// \tinfo iterations;\nleads = response.get(\"data\");\nfor each  s in iterations\n{\n\trecord_count = limit;\n\tif(count < limit)\n\t{\n\t\trecord_count = count;\n\t}\n\trecord_iterations = \"\".leftpad(record_count).toList(\"\");\n\trecord_index = index * limit;\n\tmass_update = List();\n\tfor each  r in record_iterations\n\t{\n\t\tleadMap = Map();\n\t\tleadMap.put(\"id\",leads.get(record_index).get(\"id\"));\n\t\tleadMap.put(\"DATETIMEASSIGN\",dt);\n\t\tmass_update.add(leadMap);\n\t\trecord_index = record_index + 1;\n\t}\n\t// mass update here !!!!!!!!!!!!\n\tinfo mass_update.size();\n\tinfo mass_update;\n\tcount = count - limit;\n\tindex = index + 1;\n}\nreturn \"\";"
    },
    {
        "api_name": "tiii",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "5000000049173908",
                "connectionLinkName": "zboo",
                "connectionName": "zboo",
                "isUserDefinedService": "false",
                "scopes": [
                    "zohobookings.data.CREATE",
                    "zohobookings.data.READ"
                ],
                "serviceName": "zoho_bookings",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "tiii",
        "id": "512029000002904001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-27T23:56:38+01:00",
        "name": "tiii",
        "nameSpace": "standalone",
        "params": [
            {
                "name": "crmAPIRequest",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/tiii/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/tiii/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.tiii(String crmAPIRequest)\n{\nwebhookData = crmAPIRequest.get(\"body\");\nappointmentData = invokeurl\n[\n\turl :\"https://www.zohoapis.com/bookings/v1/json/getappointment?booking_id=#\" + webhookData\n\ttype :GET\n\tconnection:\"zboo\"\n];\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "params": [
                "crmAPIRequest"
            ],
            "webhooks": [
                {
                    "connection": "zboo",
                    "method": "get",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2024-11-27 14:56:38.0",
        "workflow": "webhookData = crmAPIRequest.get(\"body\");\nappointmentData = invokeurl\n[\n\turl :\"https://www.zohoapis.com/bookings/v1/json/getappointment?booking_id=#\" + webhookData\n\ttype :GET\n\tconnection:\"zboo\"\n];\nreturn \"\";"
    },
    {
        "api_name": "test9",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "display_name": "test",
        "id": "512029000003057001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-03-04T10:36:12+01:00",
        "name": "test9",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test9/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test9/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test9()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2025-03-04 01:36:13.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": "test_func",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "display_name": "test_func",
        "id": "512029000002882006",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-11T09:43:14+01:00",
        "name": "test_func",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_func/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_func/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_func()\n{\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2024-11-11 00:43:14.0",
        "workflow": "return \"\";"
    },
    {
        "api_name": "test_pr",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000002972001",
                "connectionLinkName": "zoho_pr",
                "connectionName": "zoho_pr",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoCRM.modules.ALL",
                    "ZohoPC.files.ALL",
                    "ZohoProjects.activities.ALL",
                    "ZohoProjects.bugs.ALL",
                    "ZohoProjects.chats.ALL",
                    "ZohoProjects.clients.ALL",
                    "ZohoProjects.documents.ALL",
                    "ZohoProjects.entity_properties.ALL",
                    "ZohoProjects.events.ALL",
                    "ZohoProjects.extension_properties.ALL",
                    "ZohoProjects.forums.ALL",
                    "ZohoProjects.milestones.ALL",
                    "ZohoProjects.portals.ALL",
                    "ZohoProjects.projects.ALL",
                    "ZohoProjects.search.READ",
                    "ZohoProjects.status.ALL",
                    "ZohoProjects.tags.ALL",
                    "ZohoProjects.tasklists.ALL",
                    "ZohoProjects.tasks.ALL",
                    "ZohoProjects.teams.ALL",
                    "ZohoProjects.timesheets.ALL",
                    "ZohoProjects.users.ALL"
                ],
                "serviceName": "zoho_projects",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "test_pr",
        "id": "512029000002973001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-01-22T15:41:43+01:00",
        "name": "test_pr",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_pr/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_pr/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_pr()\n{\nparams_map = Map();\nparams_map.put(\"index\",1);\nparams_map.put(\"range\",10);\nparams_map.put(\"search_term\",\"https://desk.zoho.com/agent/demo4crmoz/demo4crmoz/tickets/details/501889000001955990\");\nparams_map.put(\"module\",\"all\");\nresponse_projects = invokeurl\n[\n\turl :\"https://projects.zoho.com/restapi/portal/711667417/tasks/1590562000005257021/taskdetails/\"\n\ttype :GET\n\tconnection:\"zoho_pr\"\n];\ninfo response_projects;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_pr",
                    "method": "get",
                    "url": "https://projects.zoho.com/restapi/portal/711667417/tasks/1590562000005257021/taskdetails/"
                }
            ]
        },
        "updatedTime": "2025-01-22 06:41:43.0",
        "workflow": "params_map = Map();\nparams_map.put(\"index\",1);\nparams_map.put(\"range\",10);\nparams_map.put(\"search_term\",\"https://desk.zoho.com/agent/demo4crmoz/demo4crmoz/tickets/details/501889000001955990\");\nparams_map.put(\"module\",\"all\");\nresponse_projects = invokeurl\n[\n\turl :\"https://projects.zoho.com/restapi/portal/711667417/tasks/1590562000005257021/taskdetails/\"\n\ttype :GET\n\tconnection:\"zoho_pr\"\n];\ninfo response_projects;\nreturn \"\";"
    },
    {
        "api_name": "te",
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [
                    {
                        "name": "tg",
                        "value": "Last_Name"
                    }
                ],
                "id": "4444945000042388016",
                "module": "Leads",
                "name": "twet"
            }
        ],
        "category": "button",
        "config": true,
        "description": null,
        "display_name": "tert",
        "id": "512029000003011001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-02-13T11:16:53+01:00",
        "name": "te",
        "nameSpace": "button",
        "params": [
            {
                "name": "rew",
                "type": "STRING"
            }
        ],
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/te/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/te/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string button.te(String rew)\n{\ninfo rew;\nreturn rew;\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false,
            "params": [
                "rew"
            ]
        },
        "updatedTime": "2025-02-13 02:16:54.0",
        "workflow": "info rew;\nreturn rew;"
    },
    {
        "api_name": "email_1",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "EMAIL_1",
        "id": "512029000003057006",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-03-04T10:44:00+01:00",
        "name": "EMAIL_1",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/email_1/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/email_1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.EMAIL_1()\n{\nlead_id = \"4444945000037677202\";\nform_link = \"https://www.zohoapis.com/crm/v7/functions/email_2/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1&lead_id=\" + lead_id;\nhtmlMessage = \"<html>\" + \"<body>\" + \"<h1>Labour Poster Form</h1>\" + \"<p>Please fill out the form as per the link below:</p>\" + \"<a href='\" + form_link + \"'>Click here to access the Labour Poster Form</a>\" + \"<br><br>\" + \"<p>Best regards,<br>CHS Payroll Team</p>\" + \"</body>\" + \"</html>\";\nsubject = \"Labour Poster Form Request\";\nsendmail\n[\n\tfrom :zoho.adminuserid\n\tto :\"rhytmrei@gmail.com\"\n\tsubject :subject\n\tmessage :htmlMessage\n\tcontent type :HTML\n]\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "sendmail": [
                {
                    "to": [
                        "rhytmrei@gmail.com"
                    ]
                }
            ]
        },
        "updatedTime": "2025-03-04 01:44:01.0",
        "workflow": "lead_id = \"4444945000037677202\";\nform_link = \"https://www.zohoapis.com/crm/v7/functions/email_2/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1&lead_id=\" + lead_id;\nhtmlMessage = \"<html>\" + \"<body>\" + \"<h1>Labour Poster Form</h1>\" + \"<p>Please fill out the form as per the link below:</p>\" + \"<a href='\" + form_link + \"'>Click here to access the Labour Poster Form</a>\" + \"<br><br>\" + \"<p>Best regards,<br>CHS Payroll Team</p>\" + \"</body>\" + \"</html>\";\nsubject = \"Labour Poster Form Request\";\nsendmail\n[\n\tfrom :zoho.adminuserid\n\tto :\"rhytmrei@gmail.com\"\n\tsubject :subject\n\tmessage :htmlMessage\n\tcontent type :HTML\n]\nreturn \"\";"
    },
    {
        "api_name": "zohobookingstest__addeventandcontactfromzohobookings",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "addEventAndContactFromZohoBookings",
        "id": "512029000002884001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T19:21:09+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/zohobookingstest__addeventandcontactfromzohobookings/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/zohobookingstest__addeventandcontactfromzohobookings/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "testzohobooksinvoiceemail",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "connections": [
            {
                "connectedServiceId": "512029000002062001",
                "connectionLinkName": "zoho_books",
                "connectionName": "zoho_books",
                "isUserDefinedService": "false",
                "scopes": [
                    "ZohoBooks.fullaccess.all",
                    "ZohoBooks.settings.READ"
                ],
                "serviceName": "zoho_books",
                "userAccess": "false"
            }
        ],
        "description": null,
        "display_name": "testZohoBooksInvoiceEmail",
        "id": "512029000003030001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-02-25T14:40:20+01:00",
        "name": "testZohoBooksInvoiceEmail",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/testzohobooksinvoiceemail/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/testzohobooksinvoiceemail/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.testZohoBooksInvoiceEmail()\n{\n//https://www.zoho.com/books/api/v3/invoices/#get-invoice-email-content\n//https://www.zoho.com/books/api/v3/invoices/#email-an-invoice\nurl = \"https://books.zoho.com/api/v3/invoices/2234095000027252008/email?organization_id=713248035\";\nemailContentResponse = invokeurl\n[\n\turl :url\n\ttype :GET\n\tconnection:\"zoho_books\"\n];\nif(emailContentResponse.get(\"code\") != 0)\n{\n\treturn emailContentResponse.get(\"message\");\n}\nemailData = emailContentResponse.get(\"data\");\ninfo emailData;\nto_mail_ids = {\"iy@crmoz.com\"};\nsendPayload = Map();\nsendPayload.put(\"send_attachment\",true);\nsendPayload.put(\"to_mail_ids\",to_mail_ids);\nsendPayload.put(\"subject\",emailData.get(\"subject\"));\nsendPayload.put(\"body\",emailData.get(\"body\"));\nsendResponse = invokeurl\n[\n\turl :url\n\ttype :POST\n\tparameters:sendPayload.toString()\n\tconnection:\"zoho_books\"\n];\ninfo sendResponse;\nreturn sendResponse.get(\"message\");\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "webhooks": [
                {
                    "connection": "zoho_books",
                    "method": "get",
                    "url": "unknown"
                },
                {
                    "connection": "zoho_books",
                    "method": "post",
                    "url": "unknown"
                }
            ]
        },
        "updatedTime": "2025-02-25 05:40:21.0",
        "workflow": "//https://www.zoho.com/books/api/v3/invoices/#get-invoice-email-content\n//https://www.zoho.com/books/api/v3/invoices/#email-an-invoice\nurl = \"https://books.zoho.com/api/v3/invoices/2234095000027252008/email?organization_id=713248035\";\nemailContentResponse = invokeurl\n[\n\turl :url\n\ttype :GET\n\tconnection:\"zoho_books\"\n];\nif(emailContentResponse.get(\"code\") != 0)\n{\n\treturn emailContentResponse.get(\"message\");\n}\nemailData = emailContentResponse.get(\"data\");\ninfo emailData;\nto_mail_ids = {\"iy@crmoz.com\"};\nsendPayload = Map();\nsendPayload.put(\"send_attachment\",true);\nsendPayload.put(\"to_mail_ids\",to_mail_ids);\nsendPayload.put(\"subject\",emailData.get(\"subject\"));\nsendPayload.put(\"body\",emailData.get(\"body\"));\nsendResponse = invokeurl\n[\n\turl :url\n\ttype :POST\n\tparameters:sendPayload.toString()\n\tconnection:\"zoho_books\"\n];\ninfo sendResponse;\nreturn sendResponse.get(\"message\");"
    },
    {
        "api_name": null,
        "associated_place": null,
        "category": "dynamic",
        "config": false,
        "id": "512029000002882001",
        "language": "deluge",
        "modified_by": null,
        "modified_on": null,
        "name": "Untitled_Function31",
        "nameSpace": "ConnectorAction",
        "rest_api": null,
        "return_type": "VOID",
        "script": "void ConnectorAction.Untitled_Function31()\n{\nscheduledMap = Map();\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"DELETE\"}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.invokeConnector",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2024-11-07 10:21:09.0",
        "workflow": "scheduledMap = Map();\nscheduledMap.put(\"reqBody\",{\"urlMap\":{\"ACTION\":\"DELETE\"}});\nresponse = zoho.crm.invokeConnector(\"zohobookingstest.bookingsapi.crmpluginhandler\",scheduledMap);"
    },
    {
        "api_name": "null",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_lead_$KEY$Leads.ID",
                        "value": "Leads.Lead Id"
                    }
                ],
                "id": 4444945000039870500,
                "isOldDataNeeded": false,
                "module": "Leads",
                "name": "updateCrmLeadToShopify",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "ShopifyWFLead",
        "id": "512029000002847001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-10-17T14:59:36+02:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "null",
        "associated_place": [
            {
                "_type": "workflow_rules",
                "arguments": [
                    {
                        "name": "$map_meeting_$KEY$Events.ID",
                        "value": "Meetings.Meeting Id"
                    }
                ],
                "id": 4444945000040259000,
                "isOldDataNeeded": false,
                "module": "Meetings",
                "name": "deleteEventsInZohoBookings",
                "status": true
            }
        ],
        "category": "automation",
        "config": true,
        "description": null,
        "display_name": "deleteEventsInZohoBookings",
        "id": "512029000002885001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T19:21:09+01:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "null",
        "associated_place": [
            {
                "_type": "custom_buttons",
                "arguments": [
                    {
                        "name": "$map_contact_$KEY$Contacts.ID",
                        "value": "id"
                    },
                    {
                        "name": "$map_contact_$KEY$Email",
                        "value": "Email"
                    },
                    {
                        "name": "$map_contact_$KEY$First_Name",
                        "value": "First_Name"
                    },
                    {
                        "name": "$map_contact_$KEY$Last_Name",
                        "value": "Last_Name"
                    }
                ],
                "id": "4444945000040259245",
                "module": "Contacts",
                "name": "Email Booking URL"
            }
        ],
        "category": "button",
        "config": true,
        "description": null,
        "display_name": "emailcalendar",
        "id": "512029000002887001",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T19:21:10+01:00",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/null/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "test13",
        "associated_place": null,
        "category": "automation",
        "config": false,
        "display_name": "test",
        "id": "512029000003018001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-02-18T10:11:12+01:00",
        "name": "test13",
        "nameSpace": "automation",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test13/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test13/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "VOID",
        "script": "void automation.test13()\n{\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2025-02-18 01:11:12.0",
        "workflow": null
    },
    {
        "api_name": "tes1",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "tes",
        "id": "512029000002965001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-01-15T10:43:18+01:00",
        "name": "tes1",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/tes1/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/tes1/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.tes1()\n{\nreturn {\"test\":123};\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": false
        },
        "updatedTime": "2025-01-15 01:43:19.0",
        "workflow": "return {\"test\":123};"
    },
    {
        "api_name": "zohobookingstest__updatecustomermodule",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "updateCustomerModule",
        "id": "512029000002879003",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2024-11-07T19:21:09+01:00",
        "rest_api": [
            {
                "active": true,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/zohobookingstest__updatecustomermodule/actions/execute?auth_type=oauth"
            },
            {
                "active": true,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/zohobookingstest__updatecustomermodule/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "source": "extension"
    },
    {
        "api_name": "test_sf",
        "associated_place": null,
        "category": "standalone",
        "config": false,
        "description": null,
        "display_name": "test_sf",
        "id": "512029000002967001",
        "language": "deluge",
        "modified_by": "Oliver Oliver Gran",
        "modified_on": "2025-01-16T16:24:45+01:00",
        "name": "test_sf",
        "nameSpace": "standalone",
        "rest_api": [
            {
                "active": false,
                "type": "oauth",
                "url": "https://crm.zoho.com/crm/v2/functions/test_sf/actions/execute?auth_type=oauth"
            },
            {
                "active": false,
                "type": "zapikey",
                "url": "https://crm.zoho.com/crm/v2/functions/test_sf/actions/execute?auth_type=apikey&zapikey=1003.b414a7f091536d2d2ace18e70f075783.2bc6b448939be3f13e2d48d2fdb2c7d1"
            }
        ],
        "return_type": "STRING",
        "script": "string standalone.test_sf()\n{\na = zoho.crm.getRecordById(\"Interviews\",4444945000041636907);\ninfo a;\nreturn \"\";\n}",
        "source": "crm",
        "tasks": {
            "external_tasks": true,
            "integrations": [
                {
                    "display_name": "Zoho CRM",
                    "function": "zoho.crm.getRecordById",
                    "service": "ZohoCRM"
                }
            ]
        },
        "updatedTime": "2025-01-16 07:24:46.0",
        "workflow": "a = zoho.crm.getRecordById(\"Interviews\",4444945000041636907);\ninfo a;\nreturn \"\";"
    }
]
